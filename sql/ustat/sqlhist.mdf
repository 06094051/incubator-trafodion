-- @@@ START COPYRIGHT @@@
--
-- (C) Copyright 2007-2014 Hewlett-Packard Development Company, L.P.
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
--
-- @@@ END COPYRIGHT @@@
--------------------------
-- TRANSACTION SUPPORT  --
--------------------------
-- BEGINWORK              : begin transaction
-- COMMITWORK             : commit transaction
-- ROBACKWORK             : rollback transaction
--
-------------------------------
-- HISTOGRAMS TABLE QUERIES  --
-------------------------------
-- INSERT101_{MP|MX|MX_2300}      : insert histograms
-- DELETE101_{MP|MX|MX_2300}      : delete histograms based on [TABLE_UID]
-- DELETE102_{MP|MX|MX_2300}      : delete histograms based on [HISTOGRAM_ID]
-- SECURITY101_{MP|MX|MX_2300}    : security check on HISTOGRAMS table
-- CURSOR101_{MP|MX|MX_2300       : read histograms based on [TABLE_UID]
-- CURSOR101_NOMC_{MP|MX|MX_2300} : read histograms based on [TABLE_UID], but ignore MC
-- CURSOR102_{MP|MX|MX_2300}      : read STATS_TIME, ... from HISTOGRAMS table on [TABLE_UID]
-- CURSOR103_{MP|MX|MX_2300}      : retrieve data from HISTOGRAMS table (DETERMINE MISSING HISTOGRAMS)
-- CURSOR103_MX_2300_X            : same as CURSOR103_MX_2300 but EXLUSIVE MODE for groupListFromTable
--                                : when called from MakeAllHistid
-- CURSOR104_MX_2300              : same as CURSOR103_MX_2300 but READ COMMITTED for HSInsertEmptyHist.
-- CURSOR105_MX_2300              : retrieve data for histograms requiring update (NECESSARY clause)
-- CURSOR106_MX_2300              : similar to CURSOR102 but is READ COMMITTED with UPDATE.
-- UPD106_MX_2300                 : update read_time/read_count in histogram at current cursor
-- CURSOR107_MX_2300              : read histograms for populating interval arrays for IUS
--
----------------------------------------
-- HISTOGRAM_INTERVALS TABLE QUERIES  --
----------------------------------------
-- INSERT201_{MP|MX|MX_2300}            : insert histogram intervals
-- DELETE201_{MP|MX|MX_2300}            : delete histogram intervals based on [TABLE_UID]
-- DELETE202_{MP|MX|MX_2300}            : delete histogram intervals based on [HISTOGRAM_ID]
-- SECURITY201_{MP|MX|MX_2300|MX_2300}  : security check on HISTOGRAM_INTERVALS table
-- CURSOR201_{MP|MX|MX_2300}            : read histogram intervals based on [TABLE_UID]
--
----------------------------------------
-- SHOWSTATS QUERIES  --
----------------------------------------
-- SHOWHIST_{MP|MX|MX_2300}       : get histogram data for SHOWSTATS
-- SHOWINT_{MP|MX|MX_2300}        : get interval data for SHOWSTATS
--
-------------------
-- PLAN QUALITY  --
-------------------
-- PRINTPLAN              : [STMT_NAME] retrieve plan generated
---------------------
-- ROW COUNT     --
---------------------
-- ROWCOUNT_FROM_STATS     : retrieve rowcount from stats for previous statement

----------------------------------------
-- PERSISTENT SAMPLE TABLE QUERIES  ---
----------------------------------------
-- DELETE_PST      : delete from PERSISTENT SAMPLE TABLE
-- INSERT_PST      : insert into PERSISTENT SAMPLE TABLE
-- CURSOR_PST      : select from PERSISTENT SAMPLE TABLE
-- CURSOR_PST_UPDATE_INFO  : select update information from PERSISTENT SAMPLE TABLE
-- UPDATE_PST_UPDATE_INFO  : modify update information in PERSISTENT SAMPLE TABLE
----------------------------------------
-- PERSISTENT_DATA TABLE QUERIES  ---
----------------------------------------
-- DELETE_PDT      : delete from PERSISTENT_DATA TABLE
-- INSERT_PDT      : insert into PERSISTENT_DATA TABLE
-- CURSOR_PDT      : select from PERSISTENT_DATA TABLE

-----------------------------------------------------------------------------
--
-- Note: The HISTOGRAMS table resides on one partition and its data are 
--	 ordered by the clustering keys: TABLE_UID, HISTOGRAM_ID, and COL_POSITION.
--	 There is no need to use "ORDER BY" for these keys, 
--	 if a query will return data ordered by these keys.
--
-- 6/7/13:  CR 6242:  HISTOGRAMS and HISTOGRAM_INTERVALS tables may now be
--          non-partitioned (old style) or multi-partitioned via create of a 
--          new schema or using the TRANSFORM command.
--          Modified queries to add ORDER BY clauses and to set CQDs as follows:
-- ***** IMPORTANT ****
--       All procedures using the HISTOGRAMS and HISTOGRAM_INTERVALS umd tables 
--       should be within the block that disables/resets CQD
--       ATTEMPT_ESP_PARALLELISM and sets/resets CQD DISTRIBUTE_OPENS
--       The histogram umd tables can be non-partitioned or partitioned,
--       the CQDs are required so the generated plans for the procedures
--       can handle both partitioning flavors of the umd tables.
--       All other procedures that don't use the histogram umd tables
--       should not be within this block unless they need to.
--******************************************************************************


MODULE HP_SYSTEM_CATALOG.SYSTEM_SCHEMA.SQLHIST_N29_000 NAMES ARE ISO88591;
TIMESTAMP DEFINITION (1234567890);

PROCEDURE SQLMX_DEFAULT_STATEMENT_1 ()
  control query default ISOLATION_LEVEL 'SERIALIZABLE';

-- Ten minute timeout.
PROCEDURE SQLMX_DEFAULT_STATEMENT_10 ()
 control query default   TIMEOUT        '60000';


   
--
--
--------------------------------------------------------------------------------
PROCEDURE BEGINWORK ()
  BEGIN WORK;

PROCEDURE COMMITWORK ()
  COMMIT WORK;

PROCEDURE ROBACKWORK ()
  ROLLBACK WORK;

--

PROCEDURE SQLMX_DEFAULT_STATEMENT_1014_SET ()
  control query default ATTEMPT_ESP_PARALLELISM 'OFF';

PROCEDURE SQLMX_DEFAULT_STATEMENT_1015_SET ()
  control query default DISTRIBUTE_OPENS '0';  

PROCEDURE SQLMX_DEFAULT_STATEMENT_1016_SET ()
  control query default * RESET RESET;

--------------------------------------------------------------------------------
PROCEDURE INSERT101_MX_2300 (
                  "input_size"     INTEGER,
                  "table_name"     ANSIVARCHAR(600),
                  "table_uid"      ROWSET 10001 LARGEINT,
                  "histogram_id"   ROWSET 10001 INTEGER UNSIGNED,
                  "col_position"   ROWSET 10001 INTEGER,
                  "column_number"  ROWSET 10001 INTEGER,
                  "colcount"       ROWSET 10001 INTEGER,
                  "interval_count" ROWSET 10001 SMALLINT,
                  "rowcount"       ROWSET 10001 LARGEINT,
                  "total_uec"      ROWSET 10001 LARGEINT,
                  "stats_time"     ROWSET 10001 CHARACTER(19),
                  "low_value"      ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2,
                  "high_value"     ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2,
                  "read_time"      ROWSET 10001 CHARACTER(19),
                  "read_count"     ROWSET 10001 SMALLINT,
                  "sample_secs"    ROWSET 10001 LARGEINT,
                  "col_secs"       ROWSET 10001 LARGEINT,
                  "sample_percent" ROWSET 10001 SMALLINT,
                  "cv"             ROWSET 10001 DOUBLE_IEEE,
                  "reason"         ROWSET 10001 CHARACTER(1),
                  "v1"             ROWSET 10001 LARGEINT,
                  "v2"             ROWSET 10001 LARGEINT,
                  "v3"             ROWSET 10001 LARGEINT,
                  "v4"             ROWSET 10001 LARGEINT,
                  "v5"             ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2,
                  "v6"             ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2
                  )

  ROWSET FOR INPUT SIZE :"input_size"
  INSERT INTO :"table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
    VALUES (:"table_uid",
            :"histogram_id",
            :"col_position",
            :"column_number",
            :"colcount",
            :"interval_count",
            :"rowcount",
            :"total_uec",
             CAST( :"stats_time" AS TIMESTAMP(0)),
            :"low_value",
            :"high_value",
             CAST(:"read_time" AS TIMESTAMP(0)),
            :"read_count",
            :"sample_secs",
            :"col_secs",
            :"sample_percent",
             CAST(:"cv" AS FLOAT),
            :"reason",
            :"v1",
            :"v2",
            :"v3",
            :"v4",
            :"v5",
            :"v6");

ALLOCATE STATIC INPUT DESCRIPTOR INSERT101_MX_2300_IVAR FOR STATEMENT INSERT101_MX_2300
                        (INTEGER NOT NULL,
                         ANSIVARCHAR (600) NOT NULL,
                         ROWSET 10001 LARGEINT NOT NULL,
                         ROWSET 10001 INTEGER UNSIGNED NOT NULL,
                         ROWSET 10001 INTEGER NOT NULL,
                         ROWSET 10001 INTEGER NOT NULL,
                         ROWSET 10001 INTEGER NOT NULL,
                         ROWSET 10001 SMALLINT NOT NULL,
                         ROWSET 10001 LARGEINT NOT NULL,
                         ROWSET 10001 LARGEINT NOT NULL,
                         ROWSET 10001 CHARACTER(19) NOT NULL,
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         ROWSET 10001 CHARACTER(19) NOT NULL,           -- read_time
                         ROWSET 10001 SMALLINT NOT NULL,                -- read_count
                         ROWSET 10001 LARGEINT NOT NULL,                -- sample_secs
                         ROWSET 10001 LARGEINT NOT NULL,                -- col_secs
                         ROWSET 10001 SMALLINT NOT NULL,                -- sample_percent
                         ROWSET 10001 DOUBLE_IEEE NOT NULL,             -- cv
                         ROWSET 10001 CHARACTER(1) NOT NULL,            -- reason
                         ROWSET 10001 LARGEINT NOT NULL,                -- v1
                         ROWSET 10001 LARGEINT NOT NULL,                -- v2
                         ROWSET 10001 LARGEINT NOT NULL,                -- v3
                         ROWSET 10001 LARGEINT NOT NULL,                -- v4
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL,  -- v5
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL); -- v6
--
--
--------------------------------------------------------------------------------
PROCEDURE INSERT201_MX_2300 (
               "input_size"        INTEGER,
               "table_name"        ANSIVARCHAR(600),
               "table_uid"         ROWSET 10001 LARGEINT,
               "histogram_id"      ROWSET 10001 INTEGER UNSIGNED,
               "interval_num"      ROWSET 10001 SMALLINT,
               "interval_rowcount" ROWSET 10001 LARGEINT,
               "interval_uec"      ROWSET 10001 LARGEINT,
               "interval_boundary" ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2,
               "std_dev_of_freq"   ROWSET 10001 DOUBLE_IEEE,
               "v1"                ROWSET 10001 LARGEINT,
               "v2"                ROWSET 10001 LARGEINT,
               "v3"                ROWSET 10001 LARGEINT,
               "v4"                ROWSET 10001 LARGEINT,
               "v5"                ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2,
               "v6"                ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2)

  ROWSET FOR INPUT SIZE :"input_size"
  INSERT INTO :"table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAM_INTERVALS'
    VALUES (:"table_uid",
            :"histogram_id",
            :"interval_num",
            :"interval_rowcount",
            :"interval_uec",
            :"interval_boundary",
            :"std_dev_of_freq",
            :"v1",
            :"v2",
            :"v3",
            :"v4",
            :"v5",
            :"v6");

ALLOCATE STATIC INPUT DESCRIPTOR INSERT201_MX_2300_IVAR FOR STATEMENT INSERT201_MX_2300
                        (INTEGER NOT NULL,
                         ANSIVARCHAR (600) NOT NULL,
                         ROWSET 10001 LARGEINT NOT NULL,
                         ROWSET 10001 INTEGER UNSIGNED NOT NULL,
                         ROWSET 10001 SMALLINT NOT NULL,
                         ROWSET 10001 LARGEINT NOT NULL,
                         ROWSET 10001 LARGEINT NOT NULL,
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         ROWSET 10001 DOUBLE_IEEE    NOT NULL,    -- std_dev_of_freq
                         ROWSET 10001 LARGEINT       NOT NULL,    -- v1
                         ROWSET 10001 LARGEINT       NOT NULL,    -- v2
                         ROWSET 10001 LARGEINT       NOT NULL,    -- v3
                         ROWSET 10001 LARGEINT       NOT NULL,    -- v4
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL,  -- v5
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL); -- v6
--
--
--------------------------------------------------------------------------------
PROCEDURE DELETE101_MX_2300 ("table_name" ANSIVARCHAR(600),
                        "table_uid" LARGEINT)

  DELETE FROM :"table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
    WHERE TABLE_UID = :"table_uid";

  ALLOCATE STATIC INPUT DESCRIPTOR DELETE101_MX_2300_IVAR FOR STATEMENT DELETE101_MX_2300
                        (ANSIVARCHAR (600) NOT NULL,
                         LARGEINT NOT NULL);
--
--
--------------------------------------------------------------------------------
PROCEDURE DELETE201_MX_2300 ("table_name" ANSIVARCHAR(600),
                        "table_uid" LARGEINT)

  DELETE FROM :"table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAM_INTERVALS'
    WHERE TABLE_UID = :"table_uid";

  ALLOCATE STATIC INPUT DESCRIPTOR DELETE201_MX_2300_IVAR FOR STATEMENT DELETE201_MX_2300
                        (ANSIVARCHAR (600) NOT NULL,
                         LARGEINT NOT NULL);
--
--
--------------------------------------------------------------------------------
PROCEDURE DELETE102_MX_2300 (
                        "input_size"        INTEGER,
                        "table_name"        ANSIVARCHAR(600),
                        "table_uid"         LARGEINT,
                        "histogram_id"      ROWSET 10001 INTEGER UNSIGNED)

  ROWSET FOR INPUT SIZE :"input_size"
  DELETE FROM :"table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
    WHERE TABLE_UID = :"table_uid" AND
          HISTOGRAM_ID = :"histogram_id";

  ALLOCATE STATIC INPUT DESCRIPTOR DELETE102_MX_2300_IVAR FOR STATEMENT DELETE102_MX_2300
                        (INTEGER NOT NULL,
                         ANSIVARCHAR (600) NOT NULL,
                         LARGEINT NOT NULL,
                         ROWSET 10001 INTEGER UNSIGNED NOT NULL);
--
--
--------------------------------------------------------------------------------
PROCEDURE DELETE202_MX_2300 (
                        "input_size"        INTEGER,
                        "table_name"        ANSIVARCHAR(600),
                        "table_uid"         LARGEINT,
                        "histogram_id"      ROWSET 10001 INTEGER UNSIGNED)

  ROWSET FOR INPUT SIZE :"input_size"
  DELETE FROM :"table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAM_INTERVALS'
    WHERE TABLE_UID = :"table_uid" AND
          HISTOGRAM_ID = :"histogram_id";

  ALLOCATE STATIC INPUT DESCRIPTOR DELETE202_MX_2300_IVAR FOR STATEMENT DELETE202_MX_2300
                        (INTEGER NOT NULL,
                         ANSIVARCHAR (600) NOT NULL,
                         LARGEINT NOT NULL,
                         ROWSET 10001 INTEGER UNSIGNED NOT NULL);
--
--
--------------------------------------------------------------------------------
PROCEDURE CURSOR101_MX_2300 ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT)

  DECLARE CURSOR101_MX_2300 CURSOR FOR
      SELECT HISTOGRAM_ID,
             COLUMN_NUMBER,
             COLCOUNT,
             INTERVAL_COUNT,
             ROWCOUNT,
             TOTAL_UEC,
             JULIANTIMESTAMP(STATS_TIME),
             LOW_VALUE,
             HIGH_VALUE,
             JULIANTIMESTAMP(READ_TIME),
             READ_COUNT,
             SAMPLE_SECS,
             COL_SECS,
             SAMPLE_PERCENT,
             CV,
             REASON,
             V1,
             V2
--           ,V3,V4,V5,V6
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
        WHERE TABLE_UID = :"table_uid" AND REASON != ' '
        ORDER BY TABLE_UID, HISTOGRAM_ID, COL_POSITION
        FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR101_MX_2300_IVAR FOR CURSOR CURSOR101_MX_2300
                        (ANSIVARCHAR (600) NOT NULL, LARGEINT NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR101_MX_2300_OVAR FOR CURSOR CURSOR101_MX_2300
                        (INT UNSIGNED NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         SMALLINT NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         LARGEINT NOT NULL,                -- read_time
                         SMALLINT NOT NULL,                -- read_count
                         LARGEINT NOT NULL,                -- sample_secs
                         LARGEINT NOT NULL,                -- col_secs
                         SMALLINT NOT NULL,                -- sample_percent
                         DOUBLE_IEEE NOT NULL,             -- cv
                         CHARACTER(1) NOT NULL,            -- reason
                         LARGEINT NOT NULL,                         -- v1
                         LARGEINT NOT NULL                          -- v2
--                       LARGEINT NOT NULL,                         -- v3
--                       LARGEINT NOT NULL,                         -- v4
--                       VARCHAR(250) CHARACTER SET UCS2 NOT NULL,  -- v5
--                       VARCHAR(250) CHARACTER SET UCS2 NOT NULL   -- v6
						);


--------------------------------------------------------------------------------
PROCEDURE CURSOR101_NOMC_MX_2300 (
                                  "table_name" ANSIVARCHAR(600),
                                  "table_uid" LARGEINT)
                                  
  DECLARE CURSOR101_NOMC_MX_2300 CURSOR FOR
      SELECT HISTOGRAM_ID,
             COLUMN_NUMBER,
             COLCOUNT,
             INTERVAL_COUNT,
             ROWCOUNT,
             TOTAL_UEC,
             JULIANTIMESTAMP(STATS_TIME),
             LOW_VALUE,
             HIGH_VALUE,
             JULIANTIMESTAMP(READ_TIME),
             READ_COUNT,
             SAMPLE_SECS,
             COL_SECS,
             SAMPLE_PERCENT,
             CV,
             REASON,
             V1
--           V2,V3,V4,V5,V6
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
        WHERE TABLE_UID = :"table_uid" AND COLCOUNT = 1 AND REASON != ' '
        ORDER BY TABLE_UID, HISTOGRAM_ID, COL_POSITION
        FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR101_NOMC_MX_2300_IVAR
    FOR CURSOR CURSOR101_NOMC_MX_2300
                        (ANSIVARCHAR (600) NOT NULL, LARGEINT NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR101_NOMC_MX_2300_OVAR
    FOR CURSOR CURSOR101_NOMC_MX_2300
                        (INT UNSIGNED NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         SMALLINT NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         LARGEINT NOT NULL,                -- read_time
                         SMALLINT NOT NULL,                -- read_count
                         LARGEINT NOT NULL,                -- sample_secs
                         LARGEINT NOT NULL,                -- col_secs
                         SMALLINT NOT NULL,                -- sample_percent
                         DOUBLE_IEEE NOT NULL,             -- cv
                         CHARACTER(1) NOT NULL,            -- reason
                         LARGEINT NOT NULL                 -- v1 
--                       LARGEINT NOT NULL,                -- v2 
--                       LARGEINT NOT NULL,                -- v3 
--                       LARGEINT NOT NULL,                -- v4 
--                       VARCHAR(250) CHARACTER SET UCS2 NOT NULL,                -- v5 
--                       VARCHAR(250) CHARACTER SET UCS2 NOT NULL);               -- v6 
						);


--

--
--------------------------------------------------------------------------------
PROCEDURE CURSOR201_MX_2300 ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT)

  DECLARE CURSOR201_MX_2300 CURSOR FOR
      SELECT HISTOGRAM_ID,
             INTERVAL_NUMBER,
             INTERVAL_ROWCOUNT,
             INTERVAL_UEC,
             INTERVAL_BOUNDARY,
             CAST(STD_DEV_OF_FREQ AS DOUBLE PRECISION ),
             V1,V2,
           --V3,V4,
             V5
           --,V6
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAM_INTERVALS'
        WHERE TABLE_UID = :"table_uid"
        ORDER BY TABLE_UID, HISTOGRAM_ID, INTERVAL_NUMBER
        FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR201_MX_2300_IVAR FOR CURSOR CURSOR201_MX_2300
                        (ANSIVARCHAR (600) NOT NULL, LARGEINT NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR201_MX_2300_OVAR FOR CURSOR CURSOR201_MX_2300
                        (INT UNSIGNED NOT NULL,
                         SMALLINT NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         DOUBLE_IEEE NOT NULL,        -- std_dev_of_freq
                         LARGEINT       NOT NULL,    -- v1
                         LARGEINT       NOT NULL,    -- v2
                         --LARGEINT       NOT NULL,    -- v3
                         --LARGEINT       NOT NULL,    -- v4
                         VARCHAR(250) CHARACTER SET UCS2 NOT NULL  -- v5
                         --VARCHAR(250) CHARACTER SET UCS2 NOT NULL   -- v6
					);


--
--


--------------------------------------------------------------------------------
PROCEDURE CURSOR102_MX_2300 ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT)


  DECLARE CURSOR102_MX_2300 CURSOR FOR
      SELECT JULIANTIMESTAMP(STATS_TIME), COLUMN_NUMBER, JULIANTIMESTAMP(READ_TIME), READ_COUNT
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
        WHERE TABLE_UID = :"table_uid"
          AND COLCOUNT = 1
          AND REASON <> ' '
        ORDER BY TABLE_UID, HISTOGRAM_ID, COL_POSITION
        FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR102_MX_2300_IVAR FOR CURSOR CURSOR102_MX_2300
                        (ANSIVARCHAR(600)  NOT NULL,
                         LARGEINT          NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR102_MX_2300_OVAR FOR CURSOR CURSOR102_MX_2300
                        (LARGEINT     NOT NULL,       -- juliantimestamp(stats_time)
                         INT          NOT NULL,       -- column_number
                         LARGEINT     NOT NULL,       -- juliantimestamp(read_time)
                         SMALLINT     NOT NULL);      -- read_count
--

--------------------------------------------------------------------------------
PROCEDURE CURSOR103_MX_2300 ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT)

  DECLARE CURSOR103_MX_2300 CURSOR FOR
      SELECT HISTOGRAM_ID,
             COL_POSITION,
             COLUMN_NUMBER,
             COLCOUNT,
             cast(READ_TIME as char(19)),
             REASON
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
        WHERE TABLE_UID = :"table_uid" 
        ORDER BY TABLE_UID, HISTOGRAM_ID, COL_POSITION
        FOR SERIALIZABLE ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR103_MX_2300_IVAR FOR CURSOR CURSOR103_MX_2300
                        (ANSIVARCHAR (600) NOT NULL, LARGEINT NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR103_MX_2300_OVAR FOR CURSOR CURSOR103_MX_2300
                        (INT UNSIGNED NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         CHAR(19) NOT NULL,
                         CHAR(1) NOT NULL);


--------------------------------------------------------------------------------
PROCEDURE CURSOR103_MX_2300_X ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT)

  DECLARE CURSOR103_MX_2300_X CURSOR FOR
      SELECT HISTOGRAM_ID,
             COL_POSITION,
             COLUMN_NUMBER,
             COLCOUNT,
             cast(READ_TIME as char(19)),
             REASON
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
        WHERE TABLE_UID = :"table_uid"
        ORDER BY TABLE_UID, HISTOGRAM_ID, COL_POSITION
        FOR SERIALIZABLE ACCESS in exclusive mode;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR103_MX_2300_X_IVAR FOR CURSOR CURSOR103_MX_2300_X
                        (ANSIVARCHAR (600) NOT NULL, LARGEINT NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR103_MX_2300_X_OVAR FOR CURSOR CURSOR103_MX_2300_X
                        (INT UNSIGNED NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         CHAR(19) NOT NULL,
                         CHAR(1) NOT NULL);

--------------------------------------------------------------------------------
-- One second timeout.
PROCEDURE SQLMX_DEFAULT_STATEMENT_6 ()
 control query default   TIMEOUT        '100';

PROCEDURE CURSOR104_MX_2300 ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT)

  DECLARE CURSOR104_MX_2300 CURSOR FOR
      SELECT HISTOGRAM_ID,
             COL_POSITION,
             COLUMN_NUMBER,
             COLCOUNT,
             cast(READ_TIME as char(19)),
             REASON
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
        WHERE TABLE_UID = :"table_uid" 
        ORDER BY TABLE_UID, HISTOGRAM_ID, COL_POSITION
        FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR104_MX_2300_IVAR FOR CURSOR CURSOR104_MX_2300
                        (ANSIVARCHAR (600) NOT NULL, LARGEINT NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR104_MX_2300_OVAR FOR CURSOR CURSOR104_MX_2300
                        (INT UNSIGNED NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         CHAR(19) NOT NULL,
                         CHAR(1) NOT NULL);


--------------------------------------------------------------------------------
PROCEDURE INSERT104_MX_2300 (
                  "input_size"     INTEGER,
                  "table_name"     ANSIVARCHAR(600),
                  "table_uid"      ROWSET 10001 LARGEINT,
                  "histogram_id"   ROWSET 10001 INTEGER UNSIGNED,
                  "col_position"   ROWSET 10001 INTEGER,
                  "column_number"  ROWSET 10001 INTEGER,
                  "colcount"       ROWSET 10001 INTEGER,
                  "interval_count" ROWSET 10001 SMALLINT,
                  "rowcount"       ROWSET 10001 LARGEINT,
                  "total_uec"      ROWSET 10001 LARGEINT,
                  "stats_time"     ROWSET 10001 CHARACTER(19),
                  "low_value"      ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2,
                  "high_value"     ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2,
                  "read_time"      ROWSET 10001 CHARACTER(19),
                  "read_count"     ROWSET 10001 SMALLINT,
                  "sample_secs"    ROWSET 10001 LARGEINT,
                  "col_secs"       ROWSET 10001 LARGEINT,
                  "sample_percent" ROWSET 10001 SMALLINT,
                  "cv"             ROWSET 10001 DOUBLE_IEEE,
                  "reason"         ROWSET 10001 CHARACTER(1),
                  "v1"             ROWSET 10001 LARGEINT,
                  "v2"             ROWSET 10001 LARGEINT,
                  "v3"             ROWSET 10001 LARGEINT,
                  "v4"             ROWSET 10001 LARGEINT,
                  "v5"             ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2,
                  "v6"             ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2
                  )

  ROWSET FOR INPUT SIZE :"input_size"
  INSERT INTO :"table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
    VALUES (:"table_uid",
            :"histogram_id",
            :"col_position",
            :"column_number",
            :"colcount",
            :"interval_count",
            :"rowcount",
            :"total_uec",
             CAST( :"stats_time" AS TIMESTAMP(0)),
            :"low_value",
            :"high_value",
             CAST(:"read_time" AS TIMESTAMP(0)),
            :"read_count",
            :"sample_secs",
            :"col_secs",
            :"sample_percent",
             CAST(:"cv" AS FLOAT),
            :"reason",
            :"v1",
            :"v2",
            :"v3",
            :"v4",
            :"v5",
            :"v6");

ALLOCATE STATIC INPUT DESCRIPTOR INSERT104_MX_2300_IVAR FOR STATEMENT INSERT104_MX_2300
                        (INTEGER NOT NULL,
                         ANSIVARCHAR (600) NOT NULL,
                         ROWSET 10001 LARGEINT NOT NULL,
                         ROWSET 10001 INTEGER UNSIGNED NOT NULL,
                         ROWSET 10001 INTEGER NOT NULL,
                         ROWSET 10001 INTEGER NOT NULL,
                         ROWSET 10001 INTEGER NOT NULL,
                         ROWSET 10001 SMALLINT NOT NULL,
                         ROWSET 10001 LARGEINT NOT NULL,
                         ROWSET 10001 LARGEINT NOT NULL,
                         ROWSET 10001 CHARACTER(19) NOT NULL,
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL,
                         ROWSET 10001 CHARACTER(19) NOT NULL,           -- read_time
                         ROWSET 10001 SMALLINT NOT NULL,                -- read_count
                         ROWSET 10001 LARGEINT NOT NULL,                -- sample_secs
                         ROWSET 10001 LARGEINT NOT NULL,                -- col_secs
                         ROWSET 10001 SMALLINT NOT NULL,                -- sample_percent
                         ROWSET 10001 DOUBLE_IEEE NOT NULL,             -- cv
                         ROWSET 10001 CHARACTER(1) NOT NULL,            -- reason
                         ROWSET 10001 LARGEINT NOT NULL,                -- v1
                         ROWSET 10001 LARGEINT NOT NULL,                -- v2
                         ROWSET 10001 LARGEINT NOT NULL,                -- v3
                         ROWSET 10001 LARGEINT NOT NULL,                -- v4
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL,  -- v5
                         ROWSET 10001 VARCHAR(250) CHARACTER SET UCS2 NOT NULL); -- v6
--
--

--------------------------------------------------------------------------------
PROCEDURE CURSOR105_MX_2300 (
                             "table_name" ANSIVARCHAR(600),
                             "table_uid" LARGEINT,
                             "oldest_allowed_read_time" TIMESTAMP(0))

  DECLARE CURSOR105_MX_2300 CURSOR FOR
      SELECT HISTOGRAM_ID,
             COL_POSITION,
             COLUMN_NUMBER,
             COLCOUNT,
             ROWCOUNT,
             SAMPLE_PERCENT,
             CV,
             REASON
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
        WHERE TABLE_UID = :"table_uid" AND 
              (READ_TIME > :"oldest_allowed_read_time" 
                 OR REASON=' '
                 OR COLCOUNT > 1)
        ORDER BY COLCOUNT, HISTOGRAM_ID, COL_POSITION
        FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR105_MX_2300_IVAR
    FOR CURSOR CURSOR105_MX_2300
                        (ANSIVARCHAR (600) NOT NULL,
                         LARGEINT NOT NULL,
                         TIMESTAMP(0) NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR105_MX_2300_OVAR
    FOR CURSOR CURSOR105_MX_2300
                        (INT UNSIGNED NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL,
                         LARGEINT NOT NULL,
                         SMALLINT NOT NULL,                -- sample_percent
                         DOUBLE_IEEE NOT NULL,             -- cv
                         CHARACTER(1) NOT NULL);           -- reason
--
--

--

--------------------------------------------------------------------------------
-- CURSOR106_MX_2300
-- similar to CURSOR102_MX_2300, but has the "FOR UPDATE OF" clause; the columns
-- to be updated have to be in the select list.
PROCEDURE CURSOR106_MX_2300 ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT)

  DECLARE CURSOR106_MX_2300 CURSOR FOR
      SELECT JULIANTIMESTAMP(STATS_TIME), 
             COLUMN_NUMBER, 
             JULIANTIMESTAMP(READ_TIME),
             READ_TIME, 
             READ_COUNT
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
        WHERE TABLE_UID = :"table_uid"
          AND COLCOUNT = 1
          AND REASON <> ' '
        ORDER BY TABLE_UID, HISTOGRAM_ID, COL_POSITION
        FOR READ COMMITTED ACCESS
        FOR UPDATE OF READ_COUNT, READ_TIME;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR106_MX_2300_IVAR FOR CURSOR CURSOR106_MX_2300
                        (ANSIVARCHAR(600)  NOT NULL,
                         LARGEINT          NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR106_MX_2300_OVAR FOR CURSOR CURSOR106_MX_2300
                        (LARGEINT     NOT NULL,       -- juliantimestamp(stats_time)
                         INT          NOT NULL,       -- column_number
                         LARGEINT     NOT NULL,       -- juliantimestamp(read_time)
                         TIMESTAMP(0) NOT NULL,       -- read_time
                         SMALLINT     NOT NULL);      -- read_count
--


--
--------------------------------------------------------------------------------
PROCEDURE UPD106_MX_2300 ("table_name" ANSIVARCHAR(600),
                          "new_read_time" TIMESTAMP(0),
                          "new_read_count" SMALLINT)
  UPDATE :"table_name"
      PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
      SET READ_TIME = :"new_read_time",
          READ_COUNT = :"new_read_count"
      WHERE CURRENT OF CURSOR106_MX_2300;

  ALLOCATE STATIC INPUT DESCRIPTOR UPD106_MX_2300_IVAR
                        FOR STATEMENT UPD106_MX_2300
                        (ANSIVARCHAR (600) NOT NULL,
                         TIMESTAMP(0) NOT NULL,
                         SMALLINT NOT NULL
                        );

-- Revert back to one minute timeout
PROCEDURE SQLMX_DEFAULT_STATEMENT_7 ()
 control query default   TIMEOUT        '60000';
--

--------------------------------------------------------------------------------
PROCEDURE SHOWHIST_MX_2300 ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT, "histogram_id" INT UNSIGNED)

DECLARE SHOWHIST_MX_2300 CURSOR FOR

      SELECT   
      COL_POSITION
      , COLCOUNT
      , INTERVAL_COUNT
      , ROWCOUNT
      , TOTAL_UEC
      , LOW_VALUE
      , HIGH_VALUE
   FROM 
      :"table_name" 
      PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
   WHERE 
     TABLE_UID = :"table_uid" AND
     HISTOGRAM_ID = :"histogram_id" AND 
     REASON <> ' '
   ORDER BY TABLE_UID, HISTOGRAM_ID, COL_POSITION;

  ALLOCATE STATIC INPUT DESCRIPTOR SHOWHIST_MX_2300_IVAR FOR CURSOR SHOWHIST_MX_2300
	     (ANSIVARCHAR (600) NOT NULL, LARGEINT NOT NULL, INT UNSIGNED NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR SHOWHIST_MX_2300_OVAR FOR CURSOR SHOWHIST_MX_2300
                        (
                         INT NOT NULL,
                         INT NOT NULL,
                         SMALLINT NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         VARCHAR (250) CHARACTER SET UCS2 NOT NULL,	  
                         VARCHAR (250) CHARACTER SET UCS2 NOT NULL);




--------------------------------------------------------------------------------
PROCEDURE SHOWINT_MX_2300 ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT, "histogram_id" INT UNSIGNED)

  DECLARE SHOWINT_MX_2300 CURSOR FOR
      SELECT INTERVAL_ROWCOUNT,
             INTERVAL_NUMBER,
             INTERVAL_UEC,
             INTERVAL_BOUNDARY,
             STD_DEV_OF_FREQ,
             V1,V2,V5
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAM_INTERVALS'
        WHERE TABLE_UID = :"table_uid" AND
	      HISTOGRAM_ID = :"histogram_id" 
	      ORDER BY TABLE_UID, HISTOGRAM_ID, INTERVAL_NUMBER
        FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR SHOWINT_MX_2300_IVAR FOR CURSOR SHOWINT_MX_2300
                        (ANSIVARCHAR (600) NOT NULL, LARGEINT NOT NULL, INT UNSIGNED NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR SHOWINT_MX_2300_OVAR FOR CURSOR SHOWINT_MX_2300
                        (LARGEINT NOT NULL,
			SMALLINT NOT NULL,
			LARGEINT NOT NULL,
			VARCHAR (250) CHARACTER SET UCS2 NOT NULL,
                        DOUBLE_IEEE NOT NULL,       -- stdev
                        LARGEINT       NOT NULL,    -- v1
                        LARGEINT       NOT NULL,    -- v2
                        VARCHAR(250) CHARACTER SET UCS2 NOT NULL  -- v5
                         );


PROCEDURE SQLMX_DEFAULT_STATEMENT_1014_RESET ()
  control query default ATTEMPT_ESP_PARALLELISM RESET;

PROCEDURE SQLMX_DEFAULT_STATEMENT_1015_RESET () 
  control query default DISTRIBUTE_OPENS RESET; 

--
--
--------------------------------------------------------------------------------
PROCEDURE PRINTPLAN ("statement_name" ANSIVARCHAR(600))

  DECLARE PRINTPLAN CURSOR FOR
select
-- LEFT CHILD
        case
          when LEFT_CHILD_SEQ_NUM is null then
            '. '
          else
            cast(cast(LEFT_CHILD_SEQ_NUM as numeric(3)) as char(3))
        end

-- RIGHT CHILD
      , case
          when RIGHT_CHILD_SEQ_NUM is null then
            '. '
          else
            cast(cast(RIGHT_CHILD_SEQ_NUM as numeric(3)) as char(3))
        end

-- SEQUENCE NUMBER
      , cast(cast(SEQ_NUM as numeric(3)) as char(3))

-- OPERATOR
      , substring(lower(OPERATOR) from 1 for 20)

-- OPTIMIZATION
      , cast (case when position('olt_opt_lean: used' in description) > 0 then 'ol ' else
              case when position('olt_optimization: used' in description) > 0 then 'o ' else '' end end
              ||
              case when position('fast_scan: used' in description) > 0 then 'fs ' else '' end
              ||
              case when position('fast_replydata_move: used' in description) > 0 then 'fr ' else '' end
              as char(8))

-- DESCRIPTION
      , substring(
            case
                when OPERATOR = 'ROOT' then
                  case
                    when position('upd_action_on_error: return' IN DESCRIPTION) > 0 then 'r'
                    when position('upd_action_on_error: xn_rollback' IN DESCRIPTION) > 0 then 'x'
                    when position('upd_action_on_error: partial_upd' IN DESCRIPTION) > 0 then 'p'
                    when position('upd_action_on_error: savepoint' IN DESCRIPTION) > 0 then 's'
                    else ' '
                  end
                when OPERATOR in ('INDEX_SCAN', 'INDEX_SCAN_UNIQUE') then
                    substring(
                        substring(
                            substring(
                                DESCRIPTION from position(
                                    'index_scan' in DESCRIPTION
                                )
                            )
                            from (
                                position(
                                    '.' in substring(
                                        DESCRIPTION from position(
                                            'index_scan' in DESCRIPTION
                                        )
                                    )
                                ) + 1
                            )
                        )
                        from (
                            position(
                                '.' in substring(
                                    substring(
                                        DESCRIPTION from position(
                                            'index_scan' in DESCRIPTION
                                        )
                                    )
                                    from (
                                        position(
                                            '.' in substring(
                                                DESCRIPTION from position(
                                                    'index_scan' in DESCRIPTION
                                                )
                                            )
                                        ) + 1
                                    )
                                )
                            ) + 1
                        )
                        for (
                            position(
                                '(' in substring(
                                    substring(
                                        substring(
                                            DESCRIPTION from position(
                                                'index_scan' in DESCRIPTION
                                            )
                                        )
                                        from (
                                            position(
                                                '.' in substring(
                                                    DESCRIPTION from position(
                                                        'index_scan' in DESCRIPTION
                                                    )
                                                )
                                            ) + 1
                                        )
                                    )
                                    from (
                                        position(
                                            '.' in substring(
                                                substring(
                                                    DESCRIPTION from position(
                                                        'index_scan' in DESCRIPTION
                                                    )
                                                )
                                                from (
                                                    position(
                                                        '.' in substring(
                                                            DESCRIPTION from position(
                                                                'index_scan' in DESCRIPTION
                                                            )
                                                        )
                                                    ) + 1
                                                )
                                            )
                                        ) + 1
                                    )
                                )
                            ) - 1
                        )
                    )
                    || ' ('
                    || substring(DESCRIPTION
                                 from (position('key_type' in DESCRIPTION) + 10)
                                 for 1)
                    || ')'
                when OPERATOR in ('ESP_EXCHANGE', 'SPLIT_TOP') then
                    trim(substring(DESCRIPTION
                                   from (position('top_degree_parallelism' in DESCRIPTION) + 24)
                                   for  (position(' ' in substring(DESCRIPTION
                                                                   from (position('top_degree_parallelism' in DESCRIPTION) + 24)
                                                                  )
                                                 ) - 1
                                        )
                                  )
                        )
                    || case position('top_partitioning_function' in DESCRIPTION)
                           when 0 then
                               ':'
                           else
                               '(' ||
                               case position('replicate no broadcast' in substring(DESCRIPTION
                                                                                   from (position('top_partitioning_function' in DESCRIPTION) + 27)
                                                                                   for 22
                                                                                  )
                                            )
                                    when 0 then
                                        case position('replicate via broadcast' in substring(DESCRIPTION
                                                                                             from (position('top_partitioning_function' in DESCRIPTION) + 27)
                                                                                             for 23
                                                                                            )
                                                     )
                                            when 0 then
                                                trim(substring(DESCRIPTION
                                                               from (position('top_partitioning_function' in DESCRIPTION) + 27)
                                                               for 5
                                                              )
                                                    )
                                            else
                                                'rep-b'
                                        end
                                    else
                                        'rep-n'
                               end ||
                               '):'
                       end
                    || trim(substring(DESCRIPTION
                                      from (position('bottom_degree_parallelism' in DESCRIPTION) + 27)
                                      for  (position(' ' in substring(DESCRIPTION
                                                                      from (position('bottom_degree_parallelism' in DESCRIPTION) + 27)
                                                                     )
                                                    ) - 1
                                           )
                                     )
                           )
                    || case position('bottom_partitioning_function' in DESCRIPTION)
                           when 0 then
                               ' '
                           else
                               '(' ||
                               case position('replicate no broadcast' in substring(DESCRIPTION
                                                                                   from (position('bottom_partitioning_function' in DESCRIPTION) + 30)
                                                                                   for 22
                                                                                  )
                                            )
                                   when 0 then
                                       case position('replicate via broadcast' in substring(DESCRIPTION
                                                                                            from (position('bottom_partitioning_function' in DESCRIPTION) + 30)
                                                                                            for 23
                                                                                           )
                                                    )
                                           when 0 then
                                               trim(substring(DESCRIPTION
                                                              from (position('bottom_partitioning_function' in DESCRIPTION) + 30)
                                                              for 5
                                                             )
                                                   )
                                           else
                                               'rep-b'
                                       end
                                   else
                                       'rep-n'
                               end ||
                               ')'
                       end
                else
                    trim(
                        trailing ')' from trim(
                            trailing ' ' from substring(
                                substring(
                                    TNAME
                                    from (
                                        position(
                                            '.' in TNAME
                                        ) + 1
                                    )
                                )
                                from (
                                    position(
                                        '.' in substring(
                                            TNAME
                                            from (
                                                position(
                                                    '.' in TNAME
                                                ) + 1
                                            )
                                        )
                                    ) + 1
                                )
                            )
                        )
                    )
                    || case position('key_type' in DESCRIPTION)
                           when 0 then
                               ' '
                           else
                               ' (' || substring(DESCRIPTION
                                                 from (position('key_type' in DESCRIPTION) + 10)
                                                 for 1
                                                )
                                    || ')'
                       end
            end
            from 1 for 20)

-- CARDINALITY
      , CAST(CARDINALITY AS CHAR(11))

-- OPERATOR COST
      , CAST(OPERATOR_COST AS CHAR(11))

-- TOTAL COST
      , CAST(TOTAL_COST AS CHAR(11))

        FROM TABLE(EXPLAIN(NULL, :"statement_name"))
        ORDER BY SEQ_NUM DESC;

  ALLOCATE STATIC INPUT DESCRIPTOR PRINTPLAN_IVAR FOR CURSOR PRINTPLAN
                        (ANSIVARCHAR (600) NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR PRINTPLAN_OVAR FOR CURSOR PRINTPLAN
                        (ANSIVARCHAR (4) NOT NULL,
                         ANSIVARCHAR (4) NOT NULL,
                         ANSIVARCHAR (4) NOT NULL,
                         ANSIVARCHAR (21) NOT NULL,
                         ANSIVARCHAR (9) NOT NULL,
                         ANSIVARCHAR (21) NOT NULL,
                         ANSIVARCHAR (12) NOT NULL,
                         ANSIVARCHAR (12) NOT NULL,
                         ANSIVARCHAR (12) NOT NULL
			 );

--
--

--------------------------------------------------------------------------------
PROCEDURE ROWCOUNT_FROM_STATS ("table_name" ANSIVARCHAR(600))

  DECLARE ROWCOUNT_FROM_STATS CURSOR FOR
              SELECT SUBSTRING(CAST(VARIABLE_INFO AS VARCHAR(3000) CHARACTER SET ISO88591),LOCATE('AccessedRows',VARIABLE_INFO)+14, 30)
	      FROM TABLE (STATISTICS(NULL, NULL))
	      WHERE VARIABLE_INFO LIKE :"table_name" ;
          
  ALLOCATE STATIC INPUT DESCRIPTOR ROWCOUNT_FROM_STATS_IVAR FOR CURSOR ROWCOUNT_FROM_STATS
                        (ANSIVARCHAR (600) NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR ROWCOUNT_FROM_STATS_OVAR FOR CURSOR ROWCOUNT_FROM_STATS
                        ( ANSIVARCHAR (31) NOT NULL );
--


PROCEDURE SQLMX_DEFAULT_STATEMENT_2014_SET ()
  control query default ATTEMPT_ESP_PARALLELISM 'OFF';

PROCEDURE SQLMX_DEFAULT_STATEMENT_2015_SET ()
  control query default DISTRIBUTE_OPENS '0';  

--
--------------------------------------------------------------------------------
PROCEDURE SECURITY101_MX_2300 ("table_name" ANSIVARCHAR(600))

  UPDATE :"table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
    SET ROWCOUNT = ROWCOUNT
    WHERE TABLE_UID = -1
      AND HISTOGRAM_ID = -1
      AND COL_POSITION = -1;

  ALLOCATE STATIC INPUT DESCRIPTOR SECURITY101_MX_2300_IVAR FOR 
    STATEMENT SECURITY101_MX_2300 (ANSIVARCHAR (600) NOT NULL);
--
--
--------------------------------------------------------------------------------
PROCEDURE SECURITY201_MX_2300 ("table_name" ANSIVARCHAR(600))

  UPDATE :"table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAM_INTERVALS'
    SET INTERVAL_ROWCOUNT = INTERVAL_ROWCOUNT
    WHERE TABLE_UID = -1
      AND HISTOGRAM_ID = -1
      AND INTERVAL_NUMBER = -1;

  ALLOCATE STATIC INPUT DESCRIPTOR SECURITY201_MX_2300_IVAR FOR 
    STATEMENT SECURITY201_MX_2300 (ANSIVARCHAR (600) NOT NULL);
--

PROCEDURE SQLMX_DEFAULT_STATEMENT_2014_RESET ()
  control query default ATTEMPT_ESP_PARALLELISM RESET;

PROCEDURE SQLMX_DEFAULT_STATEMENT_2015_RESET ()
  control query default DISTRIBUTE_OPENS RESET;  

--
--------------------------------------------------------------------------------
PROCEDURE DELETE_PST ("from_table_name" ANSIVARCHAR(600), -- bytes in UTF8
                      "table_name" ANSIVARCHAR(1208))     -- bytes in UTF8
  DELETE FROM :"from_table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.PUBLIC_ACCESS_SCHEMA.PERSISTENT_SAMPLES'
    WHERE TABLE_NAME = TRANSLATE(:"table_name" USING UTF8TOUCS2);

  ALLOCATE STATIC INPUT DESCRIPTOR DELETE_PST_IVAR
    FOR STATEMENT DELETE_PST
                        (ANSIVARCHAR (600) NOT NULL,
                         ANSIVARCHAR (1208) NOT NULL);
--
--
-------------------------------------------------------------------------------
PROCEDURE INSERT_PST ("into_table_name"   ANSIVARCHAR(600), -- bytes in UTF8
                      "table_uid"         LARGEINT,
                      "req_sample_rows"   LARGEINT,
                      "sample_rows"       LARGEINT,
                      "percent"           DOUBLE_IEEE,
                      "creation_date"     CHARACTER(19),
                      "reason"            CHARACTER(1),
                      "table_name"        ANSIVARCHAR(400) CHARACTER SET UCS2,
                      "ius_search_condition" ANSIVARCHAR(512) CHARACTER SET UCS2,
                      "update_date"       CHARACTER(19),
                      "ius_update_history" ANSIVARCHAR(128) CHARACTER SET ISO88591,
                      "v1" ANSIVARCHAR(256) CHARACTER SET UCS2,
                      "v2" ANSIVARCHAR(256) CHARACTER SET UCS2)

  INSERT INTO :"into_table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.PUBLIC_ACCESS_SCHEMA.PERSISTENT_SAMPLES'
    VALUES (:"table_uid",
            :"req_sample_rows",
            :"sample_rows",
             CAST(:"percent" AS FLOAT),
             CAST(:"creation_date" AS TIMESTAMP(0)),
            :"reason",
            :"table_name",
            :"ius_search_condition",
             CAST(:"update_date" AS TIMESTAMP(0)),
            :"ius_update_history",
            :"v1",
            :"v2");

ALLOCATE STATIC INPUT DESCRIPTOR INSERT_PST_IVAR FOR STATEMENT INSERT_PST
                        (ANSIVARCHAR (600) NOT NULL, -- bytes in UTF8
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         DOUBLE_IEEE NOT NULL,
                         CHARACTER(19) NOT NULL,
                         CHARACTER(1) NOT NULL,
                         ANSIVARCHAR (400) CHARACTER SET UCS2 NOT NULL,
                         ANSIVARCHAR (512) CHARACTER SET UCS2 NOT NULL,
                         CHARACTER(19) NOT NULL,
                         ANSIVARCHAR (128) CHARACTER SET ISO88591 NOT NULL,
                         ANSIVARCHAR (256) CHARACTER SET UCS2 NOT NULL,
                         ANSIVARCHAR (256) CHARACTER SET UCS2 NOT NULL);
--
--
--------------------------------------------------------------------------------
PROCEDURE CURSOR_PST ("from_table_name" ANSIVARCHAR(600),
                      "table_uid" LARGEINT,
                      "sample_rows" LARGEINT,
                      "allowed_diff" DOUBLE_IEEE)

  DECLARE CURSOR_PST CURSOR FOR
      SELECT TABLE_NAME,
             NUMROWS,
             PERCENT
      FROM :"from_table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.PUBLIC_ACCESS_SCHEMA.PERSISTENT_SAMPLES'
      WHERE TABLE_UID = :"table_uid"
        AND ABS(RQSTD_NUMROWS - :"sample_rows") <= (:"allowed_diff" * :"sample_rows")
      ORDER BY CREATION_DATE DESCENDING
      FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR_PST_IVAR FOR CURSOR CURSOR_PST
                        (ANSIVARCHAR (600) NOT NULL, -- bytes in UTF8
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         DOUBLE_IEEE NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR_PST_OVAR FOR CURSOR CURSOR_PST
                        (VARCHAR (400) CHARACTER SET UCS2 NOT NULL,
                         LARGEINT NOT NULL,
                         DOUBLE_IEEE NOT NULL);
--
--
--------------------------------------------------------------------------------
--AND REASON = :"reason_code"

PROCEDURE CURSOR_PST_REASON_CODE ("from_table_name" ANSIVARCHAR(600),
                      "table_uid" LARGEINT
                      , "reason_code" CHAR(1) CHARACTER SET ISO88591
)

  DECLARE CURSOR_PST_REASON_CODE CURSOR FOR
      SELECT TABLE_NAME, RQSTD_NUMROWS, NUMROWS, PERCENT
      FROM :"from_table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.PUBLIC_ACCESS_SCHEMA.PERSISTENT_SAMPLES'
      WHERE TABLE_UID = :"table_uid" AND REASON = :"reason_code"
      ORDER BY CREATION_DATE DESCENDING
      FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR_PST_REASON_CODE_IVAR FOR CURSOR CURSOR_PST_REASON_CODE
                        (ANSIVARCHAR (600) NOT NULL, -- bytes in UTF8
                         LARGEINT NOT NULL,
                         CHAR(1) CHARACTER SET ISO88591 NOT NULL
                         );
                         

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR_PST_REASON_CODE_OVAR FOR CURSOR CURSOR_PST_REASON_CODE
                        (VARCHAR (400) CHARACTER SET UCS2 NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         DOUBLE_IEEE NOT NULL);
--
--
--------------------------------------------------------------------------------
PROCEDURE CURSOR_PST_UPDATE_INFO ("from_table_name" ANSIVARCHAR(600),
                                  "table_uid" LARGEINT)

  DECLARE CURSOR_PST_UPDATE_INFO CURSOR FOR
      SELECT (JULIANTIMESTAMP(UPDATE_DATE) - JULIANTIMESTAMP(TIMESTAMP'1970-01-01 00:00:00')) / 1000000,
             IUS_UPDATE_HISTORY
      FROM :"from_table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.PUBLIC_ACCESS_SCHEMA.PERSISTENT_SAMPLES'
      WHERE TABLE_UID = :"table_uid" and REASON = 'I'
      ORDER BY CREATION_DATE DESCENDING
      FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR_PST_UPDATE_INFO_IVAR FOR CURSOR CURSOR_PST_UPDATE_INFO
                        (ANSIVARCHAR (600) NOT NULL, -- bytes in UTF8
                         LARGEINT NOT NULL);
                         

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR_PST_UPDATE_INFO_OVAR FOR CURSOR CURSOR_PST_UPDATE_INFO
                        (LARGEINT NOT NULL,
                         ANSIVARCHAR(128) NOT NULL);
--
--
--------------------------------------------------------------------------------
  PROCEDURE UPDATE_PST_UPDATE_INFO("table_name" ANSIVARCHAR(600),
                                   "new_update_date" TIMESTAMP(0),
                                   "new_ius_update_history" ANSIVARCHAR(128) CHARACTER SET ISO88591,
                                   "table_uid" LARGEINT)
  UPDATE :"table_name"
      PROTOTYPE 'HP_SYSTEM_CATALOG.PUBLIC_ACCESS_SCHEMA.PERSISTENT_SAMPLES'
      SET UPDATE_DATE = :"new_update_date",
          IUS_UPDATE_HISTORY = :"new_ius_update_history"
      WHERE TABLE_UID = :"table_uid" and REASON = 'I';

  ALLOCATE STATIC INPUT DESCRIPTOR UPDATE_PST_UPDATE_INFO_IVAR
                        FOR STATEMENT UPDATE_PST_UPDATE_INFO
                        (ANSIVARCHAR (600) NOT NULL,
                         TIMESTAMP(0) NOT NULL,
                         ANSIVARCHAR(128) NOT NULL,
                         LARGEINT NOT NULL);


--------------------------------------------------------------------------------

PROCEDURE SQLMX_DEFAULT_STATEMENT_1028_SET ()
  control query default ATTEMPT_ESP_PARALLELISM 'OFF';

PROCEDURE SQLMX_DEFAULT_STATEMENT_1029_SET ()
  control query default DISTRIBUTE_OPENS '0';  


PROCEDURE CURSOR107_MX_2300 ("table_name" ANSIVARCHAR(600), "table_uid" LARGEINT, "col_num" INT)

  DECLARE CURSOR107_MX_2300 CURSOR FOR
      SELECT HISTOGRAM_ID,
             INTERVAL_COUNT,
             ROWCOUNT,
             TOTAL_UEC,
             V2
        FROM :"table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.HP_DEFINITION_SCHEMA.HISTOGRAMS'
        WHERE TABLE_UID = :"table_uid" AND COLUMN_NUMBER = :"col_num" AND COLCOUNT = 1 AND REASON != ' '
        ORDER BY TABLE_UID, HISTOGRAM_ID, COL_POSITION
        FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR107_MX_2300_IVAR FOR CURSOR CURSOR107_MX_2300
                        (ANSIVARCHAR (600) NOT NULL, LARGEINT NOT NULL, INT NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR107_MX_2300_OVAR FOR CURSOR CURSOR107_MX_2300
                        (INT UNSIGNED NOT NULL,
                         SMALLINT NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL,
                         LARGEINT NOT NULL
						);
--

PROCEDURE SQLMX_DEFAULT_STATEMENT_1028_RESET ()
  control query default ATTEMPT_ESP_PARALLELISM RESET;

PROCEDURE SQLMX_DEFAULT_STATEMENT_1029_RESET ()
  control query default DISTRIBUTE_OPENS RESET; 
--
--------------------------------------------------------------------------------
PROCEDURE DELETE_PDT ("from_table_name" ANSIVARCHAR(600), -- bytes in UTF8
                      "table_name"      ANSIVARCHAR(400) CHARACTER SET UCS2,
                      "object_sub_id" INT,
                      "sequence_num" INT)

  DELETE FROM :"from_table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.PUBLIC_ACCESS_SCHEMA.PERSISTENT_DATA'
    WHERE TABLE_NAME = TRANSLATE(:"table_name" USING UTF8TOUCS2) AND
          OBJECT_SUB_ID = :"object_sub_id" AND 
          SEQUENCE_NUM = :"sequence_num";

  ALLOCATE STATIC INPUT DESCRIPTOR DELETE_PDT_IVAR FOR STATEMENT DELETE_PDT
                        (ANSIVARCHAR (600) NOT NULL, -- bytes in UTF8
                         ANSIVARCHAR (400) CHARACTER SET UCS2 NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL);
--
--
-------------------------------------------------------------------------------
PROCEDURE INSERT_PDT ("into_table_name"   ANSIVARCHAR(600), -- bytes in UTF8
                      "table_name"        ANSIVARCHAR(400) CHARACTER SET UCS2,
                      "object_sub_id"     INT,
                      "sequence_num"      INT,
                      "data"              ANSIVARCHAR(31892) CHARACTER SET ISO88591)

  INSERT INTO :"into_table_name"
    PROTOTYPE 'HP_SYSTEM_CATALOG.PUBLIC_ACCESS_SCHEMA.PERSISTENT_DATA'
    VALUES (:"table_name",
            :"object_sub_id",
            :"sequence_num",
            :"data");

ALLOCATE STATIC INPUT DESCRIPTOR INSERT_PDT_IVAR FOR STATEMENT INSERT_PDT
                        (ANSIVARCHAR (600) NOT NULL, -- bytes in UTF8
                         ANSIVARCHAR (400) CHARACTER SET UCS2 NOT NULL, 
                         INT NOT NULL,
                         INT NOT NULL,
                         ANSIVARCHAR (31892) CHARACTER SET ISO88591 NOT NULL);
--
--
--------------------------------------------------------------------------------
PROCEDURE CURSOR_PDT ("from_table_name" ANSIVARCHAR(600),
                      "table_name"      ANSIVARCHAR(400) CHARACTER SET UCS2,
                      "object_sub_id"   INT,
                      "sequence_num"    INT)

  DECLARE CURSOR_PDT CURSOR FOR
      SELECT DATA
      FROM :"from_table_name"
        PROTOTYPE 'HP_SYSTEM_CATALOG.PUBLIC_ACCESS_SCHEMA.PERSISTENT_DATA'
    WHERE TABLE_NAME = TRANSLATE(:"table_name" USING UTF8TOUCS2) AND
          OBJECT_SUB_ID = :"object_sub_id" AND 
          SEQUENCE_NUM = :"sequence_num"
      FOR READ UNCOMMITTED ACCESS;

  ALLOCATE STATIC INPUT DESCRIPTOR CURSOR_PDT_IVAR FOR CURSOR CURSOR_PDT
                        (ANSIVARCHAR (600) NOT NULL, -- bytes in UTF8
                         ANSIVARCHAR (400) CHARACTER SET UCS2 NOT NULL,
                         INT NOT NULL,
                         INT NOT NULL);

  ALLOCATE STATIC OUTPUT DESCRIPTOR CURSOR_PDT_OVAR FOR CURSOR CURSOR_PDT
                        (VARCHAR (31892) CHARACTER SET ISO88591 NOT NULL);
--
--
