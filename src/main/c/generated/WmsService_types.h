/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WmsService_TYPES_H
#define WmsService_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace trafodion { namespace wms { namespace thrift {

struct Operation {
  enum type {
    OPERATION_BEGIN = 100,
    OPERATION_UPDATE = 101,
    OPERATION_END = 102,
    OPERATION_UPDATE_PARENT_ID = 103,
    OPERATION_CANCEL_CHILDREN = 104
  };
};

extern const std::map<int, const char*> _Operation_VALUES_TO_NAMES;

struct Action {
  enum type {
    ACTION_CONTINUE = 200,
    ACTION_REJECT = 201,
    ACTION_CANCEL = 202,
    ACTION_KILL = 203,
    ACTION_WARNING = 204,
    ACTION_PRIORITY_LOW = 205,
    ACTION_PRIORITY_MEDIUM = 206,
    ACTION_PRIORITY_HIGH = 207
  };
};

extern const std::map<int, const char*> _Action_VALUES_TO_NAMES;

typedef struct _KeyValue__isset {
  _KeyValue__isset() : boolValue(false), byteValue(false), shortValue(false), intValue(false), longValue(false), floatValue(false), stringValue(false) {}
  bool boolValue;
  bool byteValue;
  bool shortValue;
  bool intValue;
  bool longValue;
  bool floatValue;
  bool stringValue;
} _KeyValue__isset;

class KeyValue {
 public:

  static const char* ascii_fingerprint; // = "8030FA0B1A7FF7D870C593DE44E90298";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x30,0xFA,0x0B,0x1A,0x7F,0xF7,0xD8,0x70,0xC5,0x93,0xDE,0x44,0xE9,0x02,0x98};

  KeyValue() : boolValue(0), byteValue(0), shortValue(0), intValue(0), longValue(0), floatValue(0), stringValue() {
  }

  virtual ~KeyValue() throw() {}

  bool boolValue;
  int8_t byteValue;
  int16_t shortValue;
  int32_t intValue;
  int64_t longValue;
  double floatValue;
  std::string stringValue;

  _KeyValue__isset __isset;

  void __set_boolValue(const bool val) {
    boolValue = val;
    __isset.boolValue = true;
  }

  void __set_byteValue(const int8_t val) {
    byteValue = val;
    __isset.byteValue = true;
  }

  void __set_shortValue(const int16_t val) {
    shortValue = val;
    __isset.shortValue = true;
  }

  void __set_intValue(const int32_t val) {
    intValue = val;
    __isset.intValue = true;
  }

  void __set_longValue(const int64_t val) {
    longValue = val;
    __isset.longValue = true;
  }

  void __set_floatValue(const double val) {
    floatValue = val;
    __isset.floatValue = true;
  }

  void __set_stringValue(const std::string& val) {
    stringValue = val;
    __isset.stringValue = true;
  }

  bool operator == (const KeyValue & rhs) const
  {
    if (__isset.boolValue != rhs.__isset.boolValue)
      return false;
    else if (__isset.boolValue && !(boolValue == rhs.boolValue))
      return false;
    if (__isset.byteValue != rhs.__isset.byteValue)
      return false;
    else if (__isset.byteValue && !(byteValue == rhs.byteValue))
      return false;
    if (__isset.shortValue != rhs.__isset.shortValue)
      return false;
    else if (__isset.shortValue && !(shortValue == rhs.shortValue))
      return false;
    if (__isset.intValue != rhs.__isset.intValue)
      return false;
    else if (__isset.intValue && !(intValue == rhs.intValue))
      return false;
    if (__isset.longValue != rhs.__isset.longValue)
      return false;
    else if (__isset.longValue && !(longValue == rhs.longValue))
      return false;
    if (__isset.floatValue != rhs.__isset.floatValue)
      return false;
    else if (__isset.floatValue && !(floatValue == rhs.floatValue))
      return false;
    if (__isset.stringValue != rhs.__isset.stringValue)
      return false;
    else if (__isset.stringValue && !(stringValue == rhs.stringValue))
      return false;
    return true;
  }
  bool operator != (const KeyValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(KeyValue &a, KeyValue &b);

typedef struct _Data__isset {
  _Data__isset() : keyValues(false) {}
  bool keyValues;
} _Data__isset;

class Data {
 public:

  static const char* ascii_fingerprint; // = "3744E9C024E14DD4F9ECA86B921D240A";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x44,0xE9,0xC0,0x24,0xE1,0x4D,0xD4,0xF9,0xEC,0xA8,0x6B,0x92,0x1D,0x24,0x0A};

  Data() {
  }

  virtual ~Data() throw() {}

  std::map<std::string, KeyValue>  keyValues;

  _Data__isset __isset;

  void __set_keyValues(const std::map<std::string, KeyValue> & val) {
    keyValues = val;
    __isset.keyValues = true;
  }

  bool operator == (const Data & rhs) const
  {
    if (__isset.keyValues != rhs.__isset.keyValues)
      return false;
    else if (__isset.keyValues && !(keyValues == rhs.keyValues))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Data &a, Data &b);

typedef struct _Header__isset {
  _Header__isset() : version(false), clientIpAddress(false), clientTimestamp(false), clientUserName(false), clientApplication(false), serverLastUpdated(false) {}
  bool version;
  bool clientIpAddress;
  bool clientTimestamp;
  bool clientUserName;
  bool clientApplication;
  bool serverLastUpdated;
} _Header__isset;

class Header {
 public:

  static const char* ascii_fingerprint; // = "CE62EB594CA7F8C2ABE78957866085E9";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x62,0xEB,0x59,0x4C,0xA7,0xF8,0xC2,0xAB,0xE7,0x89,0x57,0x86,0x60,0x85,0xE9};

  Header() : version(), clientIpAddress(), clientTimestamp(0), clientUserName(), clientApplication(), serverLastUpdated(0) {
  }

  virtual ~Header() throw() {}

  std::string version;
  std::string clientIpAddress;
  int64_t clientTimestamp;
  std::string clientUserName;
  std::string clientApplication;
  int64_t serverLastUpdated;

  _Header__isset __isset;

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_clientIpAddress(const std::string& val) {
    clientIpAddress = val;
  }

  void __set_clientTimestamp(const int64_t val) {
    clientTimestamp = val;
  }

  void __set_clientUserName(const std::string& val) {
    clientUserName = val;
  }

  void __set_clientApplication(const std::string& val) {
    clientApplication = val;
  }

  void __set_serverLastUpdated(const int64_t val) {
    serverLastUpdated = val;
  }

  bool operator == (const Header & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(clientIpAddress == rhs.clientIpAddress))
      return false;
    if (!(clientTimestamp == rhs.clientTimestamp))
      return false;
    if (!(clientUserName == rhs.clientUserName))
      return false;
    if (!(clientApplication == rhs.clientApplication))
      return false;
    if (!(serverLastUpdated == rhs.serverLastUpdated))
      return false;
    return true;
  }
  bool operator != (const Header &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Header & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Header &a, Header &b);

typedef struct _Request__isset {
  _Request__isset() : header(false), data(false) {}
  bool header;
  bool data;
} _Request__isset;

class Request {
 public:

  static const char* ascii_fingerprint; // = "252EE71CE3D737D84E12CF91BC47093B";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x2E,0xE7,0x1C,0xE3,0xD7,0x37,0xD8,0x4E,0x12,0xCF,0x91,0xBC,0x47,0x09,0x3B};

  Request() {
  }

  virtual ~Request() throw() {}

  Header header;
  Data data;

  _Request__isset __isset;

  void __set_header(const Header& val) {
    header = val;
  }

  void __set_data(const Data& val) {
    data = val;
  }

  bool operator == (const Request & rhs) const
  {
    if (!(header == rhs.header))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Request &a, Request &b);

typedef struct _Response__isset {
  _Response__isset() : header(false), data(false) {}
  bool header;
  bool data;
} _Response__isset;

class Response {
 public:

  static const char* ascii_fingerprint; // = "252EE71CE3D737D84E12CF91BC47093B";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x2E,0xE7,0x1C,0xE3,0xD7,0x37,0xD8,0x4E,0x12,0xCF,0x91,0xBC,0x47,0x09,0x3B};

  Response() {
  }

  virtual ~Response() throw() {}

  Header header;
  Data data;

  _Response__isset __isset;

  void __set_header(const Header& val) {
    header = val;
  }

  void __set_data(const Data& val) {
    data = val;
  }

  bool operator == (const Response & rhs) const
  {
    if (!(header == rhs.header))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Response &a, Response &b);

typedef struct _Stream__isset {
  _Stream__isset() : name(false), value(false), comment(false), timestamp(false) {}
  bool name;
  bool value;
  bool comment;
  bool timestamp;
} _Stream__isset;

class Stream {
 public:

  static const char* ascii_fingerprint; // = "5F9965D46A4F3845985AC0F9B81C3C69";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x99,0x65,0xD4,0x6A,0x4F,0x38,0x45,0x98,0x5A,0xC0,0xF9,0xB8,0x1C,0x3C,0x69};

  Stream() : name(), value(), comment(), timestamp(0) {
  }

  virtual ~Stream() throw() {}

  std::string name;
  std::string value;
  std::string comment;
  int64_t timestamp;

  _Stream__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_comment(const std::string& val) {
    comment = val;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  bool operator == (const Stream & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const Stream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Stream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Stream &a, Stream &b);

typedef struct _StreamResponse__isset {
  _StreamResponse__isset() : streamList(false) {}
  bool streamList;
} _StreamResponse__isset;

class StreamResponse {
 public:

  static const char* ascii_fingerprint; // = "DDDA8F891CEFA6BAEE9C7096D0B1642F";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0xDA,0x8F,0x89,0x1C,0xEF,0xA6,0xBA,0xEE,0x9C,0x70,0x96,0xD0,0xB1,0x64,0x2F};

  StreamResponse() {
  }

  virtual ~StreamResponse() throw() {}

  std::vector<Stream>  streamList;

  _StreamResponse__isset __isset;

  void __set_streamList(const std::vector<Stream> & val) {
    streamList = val;
  }

  bool operator == (const StreamResponse & rhs) const
  {
    if (!(streamList == rhs.streamList))
      return false;
    return true;
  }
  bool operator != (const StreamResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StreamResponse &a, StreamResponse &b);

typedef struct _Rule__isset {
  _Rule__isset() : name(false), value(false), comment(false), timestamp(false) {}
  bool name;
  bool value;
  bool comment;
  bool timestamp;
} _Rule__isset;

class Rule {
 public:

  static const char* ascii_fingerprint; // = "5F9965D46A4F3845985AC0F9B81C3C69";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x99,0x65,0xD4,0x6A,0x4F,0x38,0x45,0x98,0x5A,0xC0,0xF9,0xB8,0x1C,0x3C,0x69};

  Rule() : name(), value(), comment(), timestamp(0) {
  }

  virtual ~Rule() throw() {}

  std::string name;
  std::string value;
  std::string comment;
  int64_t timestamp;

  _Rule__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_comment(const std::string& val) {
    comment = val;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  bool operator == (const Rule & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const Rule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Rule &a, Rule &b);

typedef struct _RuleResponse__isset {
  _RuleResponse__isset() : ruleList(false) {}
  bool ruleList;
} _RuleResponse__isset;

class RuleResponse {
 public:

  static const char* ascii_fingerprint; // = "DDDA8F891CEFA6BAEE9C7096D0B1642F";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0xDA,0x8F,0x89,0x1C,0xEF,0xA6,0xBA,0xEE,0x9C,0x70,0x96,0xD0,0xB1,0x64,0x2F};

  RuleResponse() {
  }

  virtual ~RuleResponse() throw() {}

  std::vector<Rule>  ruleList;

  _RuleResponse__isset __isset;

  void __set_ruleList(const std::vector<Rule> & val) {
    ruleList = val;
  }

  bool operator == (const RuleResponse & rhs) const
  {
    if (!(ruleList == rhs.ruleList))
      return false;
    return true;
  }
  bool operator != (const RuleResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RuleResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RuleResponse &a, RuleResponse &b);

typedef struct _WorkloadResponse__isset {
  _WorkloadResponse__isset() : workloadList(false) {}
  bool workloadList;
} _WorkloadResponse__isset;

class WorkloadResponse {
 public:

  static const char* ascii_fingerprint; // = "D0D9EE8C6C26E09B1A4E0CDB1751C878";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0xD9,0xEE,0x8C,0x6C,0x26,0xE0,0x9B,0x1A,0x4E,0x0C,0xDB,0x17,0x51,0xC8,0x78};

  WorkloadResponse() {
  }

  virtual ~WorkloadResponse() throw() {}

  std::vector<Request>  workloadList;

  _WorkloadResponse__isset __isset;

  void __set_workloadList(const std::vector<Request> & val) {
    workloadList = val;
  }

  bool operator == (const WorkloadResponse & rhs) const
  {
    if (!(workloadList == rhs.workloadList))
      return false;
    return true;
  }
  bool operator != (const WorkloadResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkloadResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WorkloadResponse &a, WorkloadResponse &b);

typedef struct _IOError__isset {
  _IOError__isset() : message(false) {}
  bool message;
} _IOError__isset;

class IOError : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  IOError() : message() {
  }

  virtual ~IOError() throw() {}

  std::string message;

  _IOError__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const IOError & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const IOError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IOError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IOError &a, IOError &b);

typedef struct _IllegalArgument__isset {
  _IllegalArgument__isset() : message(false) {}
  bool message;
} _IllegalArgument__isset;

class IllegalArgument : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  IllegalArgument() : message() {
  }

  virtual ~IllegalArgument() throw() {}

  std::string message;

  _IllegalArgument__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const IllegalArgument & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const IllegalArgument &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IllegalArgument & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IllegalArgument &a, IllegalArgument &b);

}}} // namespace

#endif
