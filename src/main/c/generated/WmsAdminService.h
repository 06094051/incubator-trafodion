/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WmsAdminService_H
#define WmsAdminService_H

#include <thrift/TDispatchProcessor.h>
#include "WmsService_types.h"

namespace trafodion { namespace wms { namespace thrift {

class WmsAdminServiceIf {
 public:
  virtual ~WmsAdminServiceIf() {}
  virtual int64_t ping(const int64_t timestamp) = 0;
  virtual void addStream(const Stream& stream) = 0;
  virtual void alterStream(const Stream& stream) = 0;
  virtual void deleteStream(const Stream& stream) = 0;
  virtual void stream(StreamResponse& _return) = 0;
  virtual void addRule(const Rule& rule) = 0;
  virtual void alterRule(const Rule& rule) = 0;
  virtual void deleteRule(const Rule& rule) = 0;
  virtual void rule(RuleResponse& _return) = 0;
  virtual void workload(WorkloadResponse& _return) = 0;
};

class WmsAdminServiceIfFactory {
 public:
  typedef WmsAdminServiceIf Handler;

  virtual ~WmsAdminServiceIfFactory() {}

  virtual WmsAdminServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WmsAdminServiceIf* /* handler */) = 0;
};

class WmsAdminServiceIfSingletonFactory : virtual public WmsAdminServiceIfFactory {
 public:
  WmsAdminServiceIfSingletonFactory(const boost::shared_ptr<WmsAdminServiceIf>& iface) : iface_(iface) {}
  virtual ~WmsAdminServiceIfSingletonFactory() {}

  virtual WmsAdminServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WmsAdminServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<WmsAdminServiceIf> iface_;
};

class WmsAdminServiceNull : virtual public WmsAdminServiceIf {
 public:
  virtual ~WmsAdminServiceNull() {}
  int64_t ping(const int64_t /* timestamp */) {
    int64_t _return = 0;
    return _return;
  }
  void addStream(const Stream& /* stream */) {
    return;
  }
  void alterStream(const Stream& /* stream */) {
    return;
  }
  void deleteStream(const Stream& /* stream */) {
    return;
  }
  void stream(StreamResponse& /* _return */) {
    return;
  }
  void addRule(const Rule& /* rule */) {
    return;
  }
  void alterRule(const Rule& /* rule */) {
    return;
  }
  void deleteRule(const Rule& /* rule */) {
    return;
  }
  void rule(RuleResponse& /* _return */) {
    return;
  }
  void workload(WorkloadResponse& /* _return */) {
    return;
  }
};

typedef struct _WmsAdminService_ping_args__isset {
  _WmsAdminService_ping_args__isset() : timestamp(false) {}
  bool timestamp;
} _WmsAdminService_ping_args__isset;

class WmsAdminService_ping_args {
 public:

  WmsAdminService_ping_args() : timestamp(0) {
  }

  virtual ~WmsAdminService_ping_args() throw() {}

  int64_t timestamp;

  _WmsAdminService_ping_args__isset __isset;

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  bool operator == (const WmsAdminService_ping_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_ping_pargs {
 public:


  virtual ~WmsAdminService_ping_pargs() throw() {}

  const int64_t* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_ping_result__isset {
  _WmsAdminService_ping_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsAdminService_ping_result__isset;

class WmsAdminService_ping_result {
 public:

  WmsAdminService_ping_result() : success(0) {
  }

  virtual ~WmsAdminService_ping_result() throw() {}

  int64_t success;
  IOError io;

  _WmsAdminService_ping_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_io(const IOError& val) {
    io = val;
  }

  bool operator == (const WmsAdminService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_ping_presult__isset {
  _WmsAdminService_ping_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsAdminService_ping_presult__isset;

class WmsAdminService_ping_presult {
 public:


  virtual ~WmsAdminService_ping_presult() throw() {}

  int64_t* success;
  IOError io;

  _WmsAdminService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WmsAdminService_addStream_args__isset {
  _WmsAdminService_addStream_args__isset() : stream(false) {}
  bool stream;
} _WmsAdminService_addStream_args__isset;

class WmsAdminService_addStream_args {
 public:

  WmsAdminService_addStream_args() {
  }

  virtual ~WmsAdminService_addStream_args() throw() {}

  Stream stream;

  _WmsAdminService_addStream_args__isset __isset;

  void __set_stream(const Stream& val) {
    stream = val;
  }

  bool operator == (const WmsAdminService_addStream_args & rhs) const
  {
    if (!(stream == rhs.stream))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_addStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_addStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_addStream_pargs {
 public:


  virtual ~WmsAdminService_addStream_pargs() throw() {}

  const Stream* stream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_addStream_result__isset {
  _WmsAdminService_addStream_result__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_addStream_result__isset;

class WmsAdminService_addStream_result {
 public:

  WmsAdminService_addStream_result() {
  }

  virtual ~WmsAdminService_addStream_result() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_addStream_result__isset __isset;

  void __set_io(const IOError& val) {
    io = val;
  }

  void __set_ia(const IllegalArgument& val) {
    ia = val;
  }

  bool operator == (const WmsAdminService_addStream_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_addStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_addStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_addStream_presult__isset {
  _WmsAdminService_addStream_presult__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_addStream_presult__isset;

class WmsAdminService_addStream_presult {
 public:


  virtual ~WmsAdminService_addStream_presult() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_addStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WmsAdminService_alterStream_args__isset {
  _WmsAdminService_alterStream_args__isset() : stream(false) {}
  bool stream;
} _WmsAdminService_alterStream_args__isset;

class WmsAdminService_alterStream_args {
 public:

  WmsAdminService_alterStream_args() {
  }

  virtual ~WmsAdminService_alterStream_args() throw() {}

  Stream stream;

  _WmsAdminService_alterStream_args__isset __isset;

  void __set_stream(const Stream& val) {
    stream = val;
  }

  bool operator == (const WmsAdminService_alterStream_args & rhs) const
  {
    if (!(stream == rhs.stream))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_alterStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_alterStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_alterStream_pargs {
 public:


  virtual ~WmsAdminService_alterStream_pargs() throw() {}

  const Stream* stream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_alterStream_result__isset {
  _WmsAdminService_alterStream_result__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_alterStream_result__isset;

class WmsAdminService_alterStream_result {
 public:

  WmsAdminService_alterStream_result() {
  }

  virtual ~WmsAdminService_alterStream_result() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_alterStream_result__isset __isset;

  void __set_io(const IOError& val) {
    io = val;
  }

  void __set_ia(const IllegalArgument& val) {
    ia = val;
  }

  bool operator == (const WmsAdminService_alterStream_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_alterStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_alterStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_alterStream_presult__isset {
  _WmsAdminService_alterStream_presult__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_alterStream_presult__isset;

class WmsAdminService_alterStream_presult {
 public:


  virtual ~WmsAdminService_alterStream_presult() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_alterStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WmsAdminService_deleteStream_args__isset {
  _WmsAdminService_deleteStream_args__isset() : stream(false) {}
  bool stream;
} _WmsAdminService_deleteStream_args__isset;

class WmsAdminService_deleteStream_args {
 public:

  WmsAdminService_deleteStream_args() {
  }

  virtual ~WmsAdminService_deleteStream_args() throw() {}

  Stream stream;

  _WmsAdminService_deleteStream_args__isset __isset;

  void __set_stream(const Stream& val) {
    stream = val;
  }

  bool operator == (const WmsAdminService_deleteStream_args & rhs) const
  {
    if (!(stream == rhs.stream))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_deleteStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_deleteStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_deleteStream_pargs {
 public:


  virtual ~WmsAdminService_deleteStream_pargs() throw() {}

  const Stream* stream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_deleteStream_result__isset {
  _WmsAdminService_deleteStream_result__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_deleteStream_result__isset;

class WmsAdminService_deleteStream_result {
 public:

  WmsAdminService_deleteStream_result() {
  }

  virtual ~WmsAdminService_deleteStream_result() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_deleteStream_result__isset __isset;

  void __set_io(const IOError& val) {
    io = val;
  }

  void __set_ia(const IllegalArgument& val) {
    ia = val;
  }

  bool operator == (const WmsAdminService_deleteStream_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_deleteStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_deleteStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_deleteStream_presult__isset {
  _WmsAdminService_deleteStream_presult__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_deleteStream_presult__isset;

class WmsAdminService_deleteStream_presult {
 public:


  virtual ~WmsAdminService_deleteStream_presult() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_deleteStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class WmsAdminService_stream_args {
 public:

  WmsAdminService_stream_args() {
  }

  virtual ~WmsAdminService_stream_args() throw() {}


  bool operator == (const WmsAdminService_stream_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WmsAdminService_stream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_stream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_stream_pargs {
 public:


  virtual ~WmsAdminService_stream_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_stream_result__isset {
  _WmsAdminService_stream_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsAdminService_stream_result__isset;

class WmsAdminService_stream_result {
 public:

  WmsAdminService_stream_result() {
  }

  virtual ~WmsAdminService_stream_result() throw() {}

  StreamResponse success;
  IOError io;

  _WmsAdminService_stream_result__isset __isset;

  void __set_success(const StreamResponse& val) {
    success = val;
  }

  void __set_io(const IOError& val) {
    io = val;
  }

  bool operator == (const WmsAdminService_stream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_stream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_stream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_stream_presult__isset {
  _WmsAdminService_stream_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsAdminService_stream_presult__isset;

class WmsAdminService_stream_presult {
 public:


  virtual ~WmsAdminService_stream_presult() throw() {}

  StreamResponse* success;
  IOError io;

  _WmsAdminService_stream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WmsAdminService_addRule_args__isset {
  _WmsAdminService_addRule_args__isset() : rule(false) {}
  bool rule;
} _WmsAdminService_addRule_args__isset;

class WmsAdminService_addRule_args {
 public:

  WmsAdminService_addRule_args() {
  }

  virtual ~WmsAdminService_addRule_args() throw() {}

  Rule rule;

  _WmsAdminService_addRule_args__isset __isset;

  void __set_rule(const Rule& val) {
    rule = val;
  }

  bool operator == (const WmsAdminService_addRule_args & rhs) const
  {
    if (!(rule == rhs.rule))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_addRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_addRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_addRule_pargs {
 public:


  virtual ~WmsAdminService_addRule_pargs() throw() {}

  const Rule* rule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_addRule_result__isset {
  _WmsAdminService_addRule_result__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_addRule_result__isset;

class WmsAdminService_addRule_result {
 public:

  WmsAdminService_addRule_result() {
  }

  virtual ~WmsAdminService_addRule_result() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_addRule_result__isset __isset;

  void __set_io(const IOError& val) {
    io = val;
  }

  void __set_ia(const IllegalArgument& val) {
    ia = val;
  }

  bool operator == (const WmsAdminService_addRule_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_addRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_addRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_addRule_presult__isset {
  _WmsAdminService_addRule_presult__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_addRule_presult__isset;

class WmsAdminService_addRule_presult {
 public:


  virtual ~WmsAdminService_addRule_presult() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_addRule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WmsAdminService_alterRule_args__isset {
  _WmsAdminService_alterRule_args__isset() : rule(false) {}
  bool rule;
} _WmsAdminService_alterRule_args__isset;

class WmsAdminService_alterRule_args {
 public:

  WmsAdminService_alterRule_args() {
  }

  virtual ~WmsAdminService_alterRule_args() throw() {}

  Rule rule;

  _WmsAdminService_alterRule_args__isset __isset;

  void __set_rule(const Rule& val) {
    rule = val;
  }

  bool operator == (const WmsAdminService_alterRule_args & rhs) const
  {
    if (!(rule == rhs.rule))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_alterRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_alterRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_alterRule_pargs {
 public:


  virtual ~WmsAdminService_alterRule_pargs() throw() {}

  const Rule* rule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_alterRule_result__isset {
  _WmsAdminService_alterRule_result__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_alterRule_result__isset;

class WmsAdminService_alterRule_result {
 public:

  WmsAdminService_alterRule_result() {
  }

  virtual ~WmsAdminService_alterRule_result() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_alterRule_result__isset __isset;

  void __set_io(const IOError& val) {
    io = val;
  }

  void __set_ia(const IllegalArgument& val) {
    ia = val;
  }

  bool operator == (const WmsAdminService_alterRule_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_alterRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_alterRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_alterRule_presult__isset {
  _WmsAdminService_alterRule_presult__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_alterRule_presult__isset;

class WmsAdminService_alterRule_presult {
 public:


  virtual ~WmsAdminService_alterRule_presult() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_alterRule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WmsAdminService_deleteRule_args__isset {
  _WmsAdminService_deleteRule_args__isset() : rule(false) {}
  bool rule;
} _WmsAdminService_deleteRule_args__isset;

class WmsAdminService_deleteRule_args {
 public:

  WmsAdminService_deleteRule_args() {
  }

  virtual ~WmsAdminService_deleteRule_args() throw() {}

  Rule rule;

  _WmsAdminService_deleteRule_args__isset __isset;

  void __set_rule(const Rule& val) {
    rule = val;
  }

  bool operator == (const WmsAdminService_deleteRule_args & rhs) const
  {
    if (!(rule == rhs.rule))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_deleteRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_deleteRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_deleteRule_pargs {
 public:


  virtual ~WmsAdminService_deleteRule_pargs() throw() {}

  const Rule* rule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_deleteRule_result__isset {
  _WmsAdminService_deleteRule_result__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_deleteRule_result__isset;

class WmsAdminService_deleteRule_result {
 public:

  WmsAdminService_deleteRule_result() {
  }

  virtual ~WmsAdminService_deleteRule_result() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_deleteRule_result__isset __isset;

  void __set_io(const IOError& val) {
    io = val;
  }

  void __set_ia(const IllegalArgument& val) {
    ia = val;
  }

  bool operator == (const WmsAdminService_deleteRule_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_deleteRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_deleteRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_deleteRule_presult__isset {
  _WmsAdminService_deleteRule_presult__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _WmsAdminService_deleteRule_presult__isset;

class WmsAdminService_deleteRule_presult {
 public:


  virtual ~WmsAdminService_deleteRule_presult() throw() {}

  IOError io;
  IllegalArgument ia;

  _WmsAdminService_deleteRule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class WmsAdminService_rule_args {
 public:

  WmsAdminService_rule_args() {
  }

  virtual ~WmsAdminService_rule_args() throw() {}


  bool operator == (const WmsAdminService_rule_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WmsAdminService_rule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_rule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_rule_pargs {
 public:


  virtual ~WmsAdminService_rule_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_rule_result__isset {
  _WmsAdminService_rule_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsAdminService_rule_result__isset;

class WmsAdminService_rule_result {
 public:

  WmsAdminService_rule_result() {
  }

  virtual ~WmsAdminService_rule_result() throw() {}

  RuleResponse success;
  IOError io;

  _WmsAdminService_rule_result__isset __isset;

  void __set_success(const RuleResponse& val) {
    success = val;
  }

  void __set_io(const IOError& val) {
    io = val;
  }

  bool operator == (const WmsAdminService_rule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_rule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_rule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_rule_presult__isset {
  _WmsAdminService_rule_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsAdminService_rule_presult__isset;

class WmsAdminService_rule_presult {
 public:


  virtual ~WmsAdminService_rule_presult() throw() {}

  RuleResponse* success;
  IOError io;

  _WmsAdminService_rule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class WmsAdminService_workload_args {
 public:

  WmsAdminService_workload_args() {
  }

  virtual ~WmsAdminService_workload_args() throw() {}


  bool operator == (const WmsAdminService_workload_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WmsAdminService_workload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_workload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsAdminService_workload_pargs {
 public:


  virtual ~WmsAdminService_workload_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_workload_result__isset {
  _WmsAdminService_workload_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsAdminService_workload_result__isset;

class WmsAdminService_workload_result {
 public:

  WmsAdminService_workload_result() {
  }

  virtual ~WmsAdminService_workload_result() throw() {}

  WorkloadResponse success;
  IOError io;

  _WmsAdminService_workload_result__isset __isset;

  void __set_success(const WorkloadResponse& val) {
    success = val;
  }

  void __set_io(const IOError& val) {
    io = val;
  }

  bool operator == (const WmsAdminService_workload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const WmsAdminService_workload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsAdminService_workload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsAdminService_workload_presult__isset {
  _WmsAdminService_workload_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsAdminService_workload_presult__isset;

class WmsAdminService_workload_presult {
 public:


  virtual ~WmsAdminService_workload_presult() throw() {}

  WorkloadResponse* success;
  IOError io;

  _WmsAdminService_workload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WmsAdminServiceClient : virtual public WmsAdminServiceIf {
 public:
  WmsAdminServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WmsAdminServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t ping(const int64_t timestamp);
  void send_ping(const int64_t timestamp);
  int64_t recv_ping();
  void addStream(const Stream& stream);
  void send_addStream(const Stream& stream);
  void recv_addStream();
  void alterStream(const Stream& stream);
  void send_alterStream(const Stream& stream);
  void recv_alterStream();
  void deleteStream(const Stream& stream);
  void send_deleteStream(const Stream& stream);
  void recv_deleteStream();
  void stream(StreamResponse& _return);
  void send_stream();
  void recv_stream(StreamResponse& _return);
  void addRule(const Rule& rule);
  void send_addRule(const Rule& rule);
  void recv_addRule();
  void alterRule(const Rule& rule);
  void send_alterRule(const Rule& rule);
  void recv_alterRule();
  void deleteRule(const Rule& rule);
  void send_deleteRule(const Rule& rule);
  void recv_deleteRule();
  void rule(RuleResponse& _return);
  void send_rule();
  void recv_rule(RuleResponse& _return);
  void workload(WorkloadResponse& _return);
  void send_workload();
  void recv_workload(WorkloadResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WmsAdminServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WmsAdminServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WmsAdminServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alterStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alterRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_workload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WmsAdminServiceProcessor(boost::shared_ptr<WmsAdminServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &WmsAdminServiceProcessor::process_ping;
    processMap_["addStream"] = &WmsAdminServiceProcessor::process_addStream;
    processMap_["alterStream"] = &WmsAdminServiceProcessor::process_alterStream;
    processMap_["deleteStream"] = &WmsAdminServiceProcessor::process_deleteStream;
    processMap_["stream"] = &WmsAdminServiceProcessor::process_stream;
    processMap_["addRule"] = &WmsAdminServiceProcessor::process_addRule;
    processMap_["alterRule"] = &WmsAdminServiceProcessor::process_alterRule;
    processMap_["deleteRule"] = &WmsAdminServiceProcessor::process_deleteRule;
    processMap_["rule"] = &WmsAdminServiceProcessor::process_rule;
    processMap_["workload"] = &WmsAdminServiceProcessor::process_workload;
  }

  virtual ~WmsAdminServiceProcessor() {}
};

class WmsAdminServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WmsAdminServiceProcessorFactory(const ::boost::shared_ptr< WmsAdminServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WmsAdminServiceIfFactory > handlerFactory_;
};

class WmsAdminServiceMultiface : virtual public WmsAdminServiceIf {
 public:
  WmsAdminServiceMultiface(std::vector<boost::shared_ptr<WmsAdminServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WmsAdminServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WmsAdminServiceIf> > ifaces_;
  WmsAdminServiceMultiface() {}
  void add(boost::shared_ptr<WmsAdminServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t ping(const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(timestamp);
    }
    return ifaces_[i]->ping(timestamp);
  }

  void addStream(const Stream& stream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addStream(stream);
    }
    ifaces_[i]->addStream(stream);
  }

  void alterStream(const Stream& stream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alterStream(stream);
    }
    ifaces_[i]->alterStream(stream);
  }

  void deleteStream(const Stream& stream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteStream(stream);
    }
    ifaces_[i]->deleteStream(stream);
  }

  void stream(StreamResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stream(_return);
    }
    ifaces_[i]->stream(_return);
    return;
  }

  void addRule(const Rule& rule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addRule(rule);
    }
    ifaces_[i]->addRule(rule);
  }

  void alterRule(const Rule& rule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alterRule(rule);
    }
    ifaces_[i]->alterRule(rule);
  }

  void deleteRule(const Rule& rule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteRule(rule);
    }
    ifaces_[i]->deleteRule(rule);
  }

  void rule(RuleResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rule(_return);
    }
    ifaces_[i]->rule(_return);
    return;
  }

  void workload(WorkloadResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->workload(_return);
    }
    ifaces_[i]->workload(_return);
    return;
  }

};

}}} // namespace

#endif
