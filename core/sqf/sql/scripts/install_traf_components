#!/bin/bash

#### Script to install and configure DCS, REST and Phoenix tests...

# Location of hadoop install
MY_SW_ROOT=$MY_SQROOT/sql/local_hadoop
MY_LOG_FILE=$MY_SW_ROOT/log/install_traf_components_$(date +%F_%T).log

# Default location of Trafodion, DCS, REST and Phoenix src folders
TRAF_SRC=$MY_SQROOT/../../
DCS_SRC=$MY_SQROOT/../../dcs
REST_SRC=$MY_SQROOT/../rest
PHX_SRC=$MY_SQROOT/../../tests/phx
TRAF_TARS=$MY_SQROOT/../../distribution

MY_DCS_MASTER_PORT=`cat $HOME/.dcs-masterport-$USER`

if [ -z "$DCS_TAR" ]; then
  DCS_TAR=$TRAF_TARS/dcs*tar.gz 
fi

if [ -z "$REST_TAR" ]; then
  REST_TAR=$TRAF_TARS/rest*tar.gz
fi

if [ -z "$PHX_TAR" ]; then
    PHX_TAR=$TRAF_TARS/phoenix*.tgz
fi

if [ -z "$CLIENT_TAR" ]; then
    CLIENT_TAR=$TRAF_TARS/*clients*.tgz
fi

if [ -f "$CLIENT_TAR" ]; then
   cd $MY_SW_ROOT
   tar -xzf $CLIENT_TAR *Linux*
   tar -xzf $CLIENT_TAR *odb*
   LNXDRVR_TAR=$MY_SW_ROOT/clients/*Linux*.gz
   ODB_TAR=$MY_SW_ROOT/clients/*odb*.gz
fi

echo | tee ${MY_LOG_FILE}
echo "Installing and configuring DCS, REST, TRAFCI & Phoenix tests for Trafodion..." | tee -a ${MY_LOG_FILE}

echo | tee -a ${MY_LOG_FILE}
echo "Environment used for core, DCS, REST and Phonenix ..." | tee -a ${MY_LOG_FILE}
echo | tee -a ${MY_LOG_FILE}

if [ ! -d "$DCS_SRC" ]; then
  echo "Using only tar distribution and does not include source..."
  echo | tee -a ${MY_LOG_FILE}
else
  echo "   For Core... $TRAF_SRC" | tee -a ${MY_LOG_FILE}
  echo "   For DCS... $DCS_SRC" | tee -a ${MY_LOG_FILE}
  echo "   For REST... $REST_SRC" | tee -a ${MY_LOG_FILE}
  echo "   For PHX... $PHX_SRC" | tee -a ${MY_LOG_FILE}
fi

echo "   For local hadoop... $MY_SW_ROOT" | tee -a ${MY_LOG_FILE}
echo "   For DCS_TAR... $DCS_TAR" | tee -a ${MY_LOG_FILE}
echo "   For REST_TAR... $REST_TAR" | tee -a ${MY_LOG_FILE}

if [ -f "$PHX_TAR" ]; then
  echo "   For PHX_TAR... $PHX_TAR" | tee -a ${MY_LOG_FILE}
fi

if [ -f "$CLIENT_TAR" ]; then
  echo "   For CLIENT_TAR... $CLIENT_TAR" | tee -a ${MY_LOG_FILE}
  echo "      For ODB_TAR... $ODB_TAR" | tee -a ${MY_LOG_FILE}
  echo "      For LNXDRVR_TAR... $LNXDRVR_TAR" | tee -a ${MY_LOG_FILE}
fi

cd $MY_SW_ROOT

echo | tee -a ${MY_LOG_FILE}
# Begin set up of DCS

if [ -d dcs-* ]; then
  echo "DCS files already exist, skipping DCS setup" | tee -a ${MY_LOG_FILE}
else
  if [ -n "$DCS_URL" ]; then 
    echo "Downloading DCS Tar: $DCS_URL" | tee -a ${MY_LOG_FILE}
    rm -f dcs_download.tar
    curl ${DCS_URL} -o dcs_download.tar
    DCS_TAR=./dcs_download.tar
  else
    if [ -f "$DCS_TAR" ]; then
      echo "Using DCS Tar: $DCS_TAR" | tee -a ${MY_LOG_FILE}
    elif [ -d "$DCS_SRC" ]; then
      echo "DCS tar file was not found in $TRAF_TARS" | tee -a ${MY_LOG_FILE}
      echo "Building DCS tar file" | tee -a ${MY_LOG_FILE}
      if [ -f "$MY_SQROOT/export/lib/jdbcT4.jar" ]; then
         echo "JDBCT4 jar file exist. Proceeding to build DCS from $DCS_SRC" | tee -a ${MY_LOG_FILE}
         cd $DCS_SRC
         ${MAVEN:-mvn} clean site package >>${MY_LOG_FILE} 2>&1
         mv $DCS_SRC/target/dcs*.gz $TRAF_TARS
         cd $MY_SW_ROOT
      else
         echo "JDBCT4 jar file does not exist $MY_SQROOT/export/lib folder. " | tee -a ${MY_LOG_FILE}
         echo "Please build the core Trafodion component"  | tee -a ${MY_LOG_FILE}
         exit 2
      fi
    fi
  fi

# Install DCS
  echo "Installing DCS from: $DCS_TAR"  | tee -a ${MY_LOG_FILE}
  tar xzf $DCS_TAR | tee -a ${MY_LOG_FILE}
  DCS_HOME=$(/bin/ls -d $MY_SW_ROOT/dcs-*)

# Configure DCS
  echo "Adding DCS_INSTALL_DIR=$DCS_INSTALL_DIR to ~/.trafodion"  | tee -a ${MY_LOG_FILE}
  if [[ -f ~/.trafodion ]]
  then
    mv -f ~/.trafodion ~/.trafodion.orig
    grep -v 'DCS_INSTALL_DIR=' ~/.trafodion.orig > ~/.trafodion
  fi
  DCSDIR=${DCS_HOME##*/}
  echo "export DCS_INSTALL_DIR=\${MY_SQROOT}/sql/local_hadoop/$DCSDIR" >> ~/.trafodion | tee -a ${MY_LOG_FILE}

  echo "Setting DCS env and site.xml file" | tee -a ${MY_LOG_FILE}
  cd $DCS_HOME/conf/
  mv dcs-env.sh dcs-env.sh.orig
  echo "MY_SQROOT=$MY_SQROOT" > dcs-env.sh
  sed -e "s@#[ ]*export DCS_MANAGES_ZK=true@export DCS_MANAGES_ZK=false@" dcs-env.sh.orig >> dcs-env.sh
  mv -f dcs-site.xml dcs-site.xml.orig
  sed -e "s@</configuration>@@" dcs-site.xml.orig > dcs-site.xml
  cat $HOME/.dcs-site.xml-$USER >> $DCS_HOME/conf/dcs-site.xml
  echo "</configuration>" >> $DCS_HOME/conf/dcs-site.xml

  echo "Configured $DCS_HOME/conf/dcs-site.xml" | tee -a ${MY_LOG_FILE}

  echo "localhost 4" > servers
  echo "Configured $DCS_HOME/conf/servers" | tee -a ${MY_LOG_FILE}

# Configure DCS test scripts
  if [[ -n "$DCS_SRC" ]]
  then
    echo "Adding swjdbc script...." | tee -a ${MY_LOG_FILE}
    cat <<EOF >$MY_SQROOT/sql/scripts/swjdbc
#!/bin/sh
# command to run JDBC tests
cd $DCS_SRC/src/test/jdbc_test
./jdbc_test.py --appid=jdbc_test --user=SOMEUSER --pw=SOMEPASSWORD --javahome=\$JAVA_HOME \\
  --target=localhost:$MY_DCS_MASTER_PORT \\
  --jdbctype=T4 --jdbccp=\$MY_SQROOT/export/lib/jdbcT4.jar "\$@"
EOF
    chmod +x $MY_SQROOT/sql/scripts/swjdbc
  fi
fi

# End of DCS setup

cd $MY_SW_ROOT

echo | tee -a ${MY_LOG_FILE}
# Begin setup of REST Server 

if [ -d rest-* ]; then
  echo "REST files already exist, skipping REST setup"
else
  if [ -n "$REST_URL" ]; then
    echo "Downloading REST Tar: $REST_URL" | tee -a ${MY_LOG_FILE}
    rm -f rest_download.tar
    curl ${REST_URL} -o rest_download.tar
    REST_TAR=./rest_download.tar
  else
    if [ -f "$REST_TAR" ]; then
        echo "Using REST Tar: $REST_TAR" | tee -a ${MY_LOG_FILE}
    elif [ -d "$REST_SRC" ]; then
      echo "REST tar file was not found in $TRAF_TARS" | tee -a ${MY_LOG_FILE}
      echo "Building REST tar file" | tee -a ${MY_LOG_FILE}
      if [ -f $MY_SQROOT/export/lib/jdbcT4.jar ]; then
         echo "JDBCT4 jar file exist. Proceeding to build REST from $REST_SRC" | tee -a ${MY_LOG_FILE}
         cd $REST_SRC
         ${MAVEN:-mvn} clean site package >>${MY_LOG_FILE} 2>&1
         mv $REST_SRC/target/rest*.gz $TRAF_TARS
         cd $MY_SW_ROOT
       else
         echo "JDBCT4 jar file does not exist $MY_SQROOT/export/lib folder. Please build the core Trafodion components" | tee -a ${MY_LOG_FILE}
       exit 2
      fi
    fi
  fi

# Install REST
  echo "Installing REST from: $REST_TAR"  | tee -a ${MY_LOG_FILE}
  tar xzf $REST_TAR | tee -a ${MY_LOG_FILE}
  REST_HOME=$(/bin/ls -d $MY_SW_ROOT/rest-*)

# Configure REST
  echo "Adding REST_INSTALL_DIR=$REST_INSTALL_DIR to via ~/.trafodion"  | tee -a ${MY_LOG_FILE}
  if [[ -f ~/.trafodion ]]
  then
    mv -f ~/.trafodion ~/.trafodion.orig
    grep -v 'REST_INSTALL_DIR=' ~/.trafodion.orig >> ~/.trafodion
  fi
  RESTDIR=${REST_HOME##*/}
  echo "export REST_INSTALL_DIR=\${MY_SQROOT}/sql/local_hadoop/$RESTDIR" >> ~/.trafodion  | tee -a ${MY_LOG_FILE}
  echo "Setting REST env and site.xml "  | tee -a ${MY_LOG_FILE}
  cd $REST_HOME/conf/
  mv rest-env.sh rest-env.sh.orig

  echo "MY_SQROOT=$MY_SQROOT" > rest-env.sh
  sed -e "s@#[ ]*export REST_MANAGES_ZK=true@export REST_MANAGES_ZK=false@" rest-env.sh.orig >> rest-env.sh
  mv -f rest-site.xml rest-site.xml.orig
  sed -e "s@</configuration>@@" rest-site.xml.orig > rest-site.xml
  cat $HOME/.rest-site.xml-$USER >> $REST_HOME/conf/rest-site.xml
  echo "</configuration>" >> $REST_HOME/conf/rest-site.xml

  echo "Configured $REST_HOME/conf/rest-site.xml" | tee -a ${MY_LOG_FILE}
fi

# End of setup for REST

cd $MY_SW_ROOT

echo | tee -a ${MY_LOG_FILE}
# Begin setup of TRAFCI

echo "Configuring TRAFCI " | tee -a ${MY_LOG_FILE}
TRAFCI_BIN_DIR=$MY_SQROOT/trafci/bin
if [[ -f $TRAFCI_BIN_DIR/trafci ]]
then
  mv $TRAFCI_BIN_DIR/trafci  $TRAFCI_BIN_DIR/trafci.orig | tee -a ${MY_LOG_FILE}
  sed -e "s@localhost:23400@localhost:$MY_DCS_MASTER_PORT@" $TRAFCI_BIN_DIR/trafci.orig >> $TRAFCI_BIN_DIR/trafci | tee -a ${MY_LOG_FILE}
  chmod +x $TRAFCI_BIN_DIR/trafci | tee -a ${MY_LOG_FILE}
  echo "Adding swtrafci script..." | tee -a ${MY_LOG_FILE}
  cat <<EOF >$MY_SQROOT/sql/scripts/swtrafci
#!/bin/sh
# command to run trafci
HNAME=localhost:$MY_DCS_MASTER_PORT
UNAME=zz
PWORD=zz

$MY_SQROOT/trafci/bin/trafci.sh -h $HNAME -u $UNAME -p $PWORD
EOF
  chmod +x $MY_SQROOT/sql/scripts/swtrafci
else
  echo "$TRAFCI_BIN_DIR not found" | tee -a ${MY_LOG_FILE}
fi

# End setup for TRAFCI

echo | tee -a ${MY_LOG_FILE}
# Begin setup of Phoenix test

PHXDIR=$MY_SW_ROOT/tests/phx

if [ -d "$PHXDIR" ]; then
  echo "Phoenix tests already exist $PHXDIR, skipping Phoenix test setup" | tee -a ${MY_LOG_FILE}
else
  if [ -f "$PHX_TAR" ]; then
    echo "Installing Phoenix tests $PHX_TAR"| tee -a ${MY_LOG_FILE}
    tar -xzf $PHX_TAR | tee -a ${MY_LOG_FILE}
    echo "Successfully installed Phoenix tests "| tee -a ${MY_LOG_FILE}
  elif [ -d "$PHX_SRC" ]; then
     echo "Phoenix files already exist $PHX_SRC skipping Phoenix setup" | tee -a ${MY_LOG_FILE}
     PHXDIR=$PHX_SRC
  fi

echo "Adding swphoenix script..." | tee -a ${MY_LOG_FILE}
  cat <<EOF >$MY_SQROOT/sql/scripts/swphoenix
#!/bin/sh
# command to run phoenix tests

cd $PHXDIR
if [[ \$1 == "t4" ]]
then
  ./phoenix_test.py --target=localhost:$MY_DCS_MASTER_PORT --user=dontcare --pw=dontcare \\
     --targettype=TR --javahome=\$JAVA_HOME --jdbccp=\$MY_SQROOT/export/lib/jdbcT4.jar
elif [[ \$1 == "t2" ]]
then
  export LD_PRELOAD=\$JAVA_HOME/jre/lib/amd64/libjsig.so:\$MY_SQROOT/export/lib\$SQ_MBTYPE/libseabasesig.so
  ./phoenix_test.py --targettype=TR --javahome=\$JAVA_HOME \\
     --jdbccp=\$MY_SQROOT/export/lib/jdbcT2.jar --jdbctype=T2
else
  echo "Usage: swphoenix (t2|t4)"
  exit 1
fi
EOF

  chmod +x $MY_SQROOT/sql/scripts/swphoenix
fi

# End of Phoenix setup

cd $MY_SW_ROOT

echo | tee -a ${MY_LOG_FILE}
# Begin setup of Linux driver

LNXDRVR=$MY_SW_ROOT/lnxdrvr

if [ -d $LNXDRVR ]; then
  echo "Linux driver files already exist $LNXDRVR, skipping Linux Driver setup" | tee -a ${MY_LOG_FILE}
else
  if [ -f "$LNXDRVR_TAR" ]; then
     echo "Installing Linux driver: $LNXDRV"| tee -a ${MY_LOG_FILE}
     mkdir -p $LNXDRVR | tee -a ${MY_LOG_FILE}
     cd $LNXDRVR 
     tar -xzf $LNXDRVR_TAR | tee -a ${MY_LOG_FILE} 
     cd PkgTmp 
     ./install.sh <<EOF | tee -a ${MY_LOG_FILE}
YES
../
../
../
EOF
    cd .. | tee -a ${MY_LOG_FILE}
    mv TRAFDSN TRAFDSN.orig | tee -a ${MY_LOG_FILE}
    sed -e "s@TCP:1.2.3.4:23400@TCP:localhost:$MY_DCS_MASTER_PORT@" TRAFDSN.orig >> TRAFDSN | tee -a ${MY_LOG_FILE}
    echo "Successfully installed linux driver in $LNXDRVR"| tee -a ${MY_LOG_FILE}
  else
    echo "Linux driver tar file not found. Please install it manually..." | tee -a ${MY_LOG_FILE}
  fi
fi

# End setup of Linux driver

cd $MY_SW_ROOT

echo | tee -a ${MY_LOG_FILE}
# Begin setup of ODB load tool

ODBLOC=$MY_SW_ROOT/odb

if [ -d $ODBLOC ]; then
  echo "ODB files already exist $ODBLOC, skipping ODB setup" | tee -a ${MY_LOG_FILE}
else
  if [ -f "$ODB_TAR" ]; then
    echo "Installing ODB tool: $ODBLOC"| tee -a ${MY_LOG_FILE}
    mkdir -p $ODBLOC | tee -a ${MY_LOG_FILE}
    cd $ODBLOC 
    tar -xzf $ODB_TAR | tee -a ${MY_LOG_FILE}
    echo "Successfully installed ODB tool in $ODBLOC"| tee -a ${MY_LOG_FILE}
  else
    echo "ODB tar file not found. Please install it manually after installing linux odbc driver..." | tee -a ${MY_LOG_FILE}
  fi
fi

# End setup of ODB load told

echo | tee -a ${MY_LOG_FILE}
echo "Configuration scripts for DCS, REST, TRAFCI and Phoenix test are set up " | tee -a ${MY_LOG_FILE}

echo | tee -a ${MY_LOG_FILE}
echo "   Open a new session and start Trafodion by executing sqgen and sqstart scripts" | tee -a ${MY_LOG_FILE}
echo | tee -a ${MY_LOG_FILE}
