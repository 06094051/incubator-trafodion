// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_dtm_2eevents_2eproto__INCLUDED
#define PROTOBUF_dtm_2eevents_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.event_header.pb.h"

namespace dtm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dtm_2eevents_2eproto();
void protobuf_AssignDesc_dtm_2eevents_2eproto();
void protobuf_ShutdownFile_dtm_2eevents_2eproto();

class events;

// ===================================================================

class events : public ::google::protobuf::Message {
 public:
  events();
  virtual ~events();
  
  events(const events& from);
  
  inline events& operator=(const events& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const events& default_instance();
  void Swap(events* other);
  
  // implements Message ----------------------------------------------
  
  events* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const events& from);
  void MergeFrom(const events& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .common.event_header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::event_header& header() const;
  inline ::common::event_header* mutable_header();
  
  // optional int32 error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional int32 rmid = 3;
  inline bool has_rmid() const;
  inline void clear_rmid();
  static const int kRmidFieldNumber = 3;
  inline ::google::protobuf::int32 rmid() const;
  inline void set_rmid(::google::protobuf::int32 value);
  
  // optional int32 dtmid = 4;
  inline bool has_dtmid() const;
  inline void clear_dtmid();
  static const int kDtmidFieldNumber = 4;
  inline ::google::protobuf::int32 dtmid() const;
  inline void set_dtmid(::google::protobuf::int32 value);
  
  // optional int32 seq_num = 5;
  inline bool has_seq_num() const;
  inline void clear_seq_num();
  static const int kSeqNumFieldNumber = 5;
  inline ::google::protobuf::int32 seq_num() const;
  inline void set_seq_num(::google::protobuf::int32 value);
  
  // optional int32 msgid = 6;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 6;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // optional int64 xa_error = 7;
  inline bool has_xa_error() const;
  inline void clear_xa_error();
  static const int kXaErrorFieldNumber = 7;
  inline ::google::protobuf::int64 xa_error() const;
  inline void set_xa_error(::google::protobuf::int64 value);
  
  // optional int32 pool_size = 8;
  inline bool has_pool_size() const;
  inline void clear_pool_size();
  static const int kPoolSizeFieldNumber = 8;
  inline ::google::protobuf::int32 pool_size() const;
  inline void set_pool_size(::google::protobuf::int32 value);
  
  // optional int32 pool_elems = 9;
  inline bool has_pool_elems() const;
  inline void clear_pool_elems();
  static const int kPoolElemsFieldNumber = 9;
  inline ::google::protobuf::int32 pool_elems() const;
  inline void set_pool_elems(::google::protobuf::int32 value);
  
  // optional int32 msg_retries = 10;
  inline bool has_msg_retries() const;
  inline void clear_msg_retries();
  static const int kMsgRetriesFieldNumber = 10;
  inline ::google::protobuf::int32 msg_retries() const;
  inline void set_msg_retries(::google::protobuf::int32 value);
  
  // optional int32 pool_high = 11;
  inline bool has_pool_high() const;
  inline void clear_pool_high();
  static const int kPoolHighFieldNumber = 11;
  inline ::google::protobuf::int32 pool_high() const;
  inline void set_pool_high(::google::protobuf::int32 value);
  
  // optional int32 pool_low = 12;
  inline bool has_pool_low() const;
  inline void clear_pool_low();
  static const int kPoolLowFieldNumber = 12;
  inline ::google::protobuf::int32 pool_low() const;
  inline void set_pool_low(::google::protobuf::int32 value);
  
  // optional int32 pool_max = 13;
  inline bool has_pool_max() const;
  inline void clear_pool_max();
  static const int kPoolMaxFieldNumber = 13;
  inline ::google::protobuf::int32 pool_max() const;
  inline void set_pool_max(::google::protobuf::int32 value);
  
  // optional int32 tx_state = 14;
  inline bool has_tx_state() const;
  inline void clear_tx_state();
  static const int kTxStateFieldNumber = 14;
  inline ::google::protobuf::int32 tx_state() const;
  inline void set_tx_state(::google::protobuf::int32 value);
  
  // optional int32 data = 15;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 15;
  inline ::google::protobuf::int32 data() const;
  inline void set_data(::google::protobuf::int32 value);
  
  // optional int32 data1 = 16;
  inline bool has_data1() const;
  inline void clear_data1();
  static const int kData1FieldNumber = 16;
  inline ::google::protobuf::int32 data1() const;
  inline void set_data1(::google::protobuf::int32 value);
  
  // optional int64 data2 = 17;
  inline bool has_data2() const;
  inline void clear_data2();
  static const int kData2FieldNumber = 17;
  inline ::google::protobuf::int64 data2() const;
  inline void set_data2(::google::protobuf::int64 value);
  
  // optional string string1 = 18;
  inline bool has_string1() const;
  inline void clear_string1();
  static const int kString1FieldNumber = 18;
  inline const ::std::string& string1() const;
  inline void set_string1(const ::std::string& value);
  inline void set_string1(const char* value);
  inline void set_string1(const char* value, size_t size);
  inline ::std::string* mutable_string1();
  
  // optional int32 node = 19;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 19;
  inline ::google::protobuf::int32 node() const;
  inline void set_node(::google::protobuf::int32 value);
  
  // optional int32 msgid2 = 20;
  inline bool has_msgid2() const;
  inline void clear_msgid2();
  static const int kMsgid2FieldNumber = 20;
  inline ::google::protobuf::int32 msgid2() const;
  inline void set_msgid2(::google::protobuf::int32 value);
  
  // optional int32 offset = 21;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 21;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);
  
  // optional int32 tm_event_msg = 22;
  inline bool has_tm_event_msg() const;
  inline void clear_tm_event_msg();
  static const int kTmEventMsgFieldNumber = 22;
  inline ::google::protobuf::int32 tm_event_msg() const;
  inline void set_tm_event_msg(::google::protobuf::int32 value);
  
  // optional uint32 data4 = 23;
  inline bool has_data4() const;
  inline void clear_data4();
  static const int kData4FieldNumber = 23;
  inline ::google::protobuf::uint32 data4() const;
  inline void set_data4(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::common::event_header* header_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 rmid_;
  ::google::protobuf::int32 dtmid_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int64 xa_error_;
  ::google::protobuf::int32 pool_size_;
  ::google::protobuf::int32 pool_elems_;
  ::google::protobuf::int32 msg_retries_;
  ::google::protobuf::int32 pool_high_;
  ::google::protobuf::int32 pool_low_;
  ::google::protobuf::int32 pool_max_;
  ::google::protobuf::int32 tx_state_;
  ::google::protobuf::int32 data_;
  ::google::protobuf::int32 data1_;
  ::google::protobuf::int64 data2_;
  ::std::string* string1_;
  static const ::std::string _default_string1_;
  ::google::protobuf::int32 node_;
  ::google::protobuf::int32 msgid2_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 tm_event_msg_;
  ::google::protobuf::uint32 data4_;
  friend void  protobuf_AddDesc_dtm_2eevents_2eproto();
  friend void protobuf_AssignDesc_dtm_2eevents_2eproto();
  friend void protobuf_ShutdownFile_dtm_2eevents_2eproto();
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static events* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// events

// required .common.event_header header = 1;
inline bool events::has_header() const {
  return _has_bit(0);
}
inline void events::clear_header() {
  if (header_ != NULL) header_->::common::event_header::Clear();
  _clear_bit(0);
}
inline const ::common::event_header& events::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::event_header* events::mutable_header() {
  _set_bit(0);
  if (header_ == NULL) header_ = new ::common::event_header;
  return header_;
}

// optional int32 error_code = 2;
inline bool events::has_error_code() const {
  return _has_bit(1);
}
inline void events::clear_error_code() {
  error_code_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 events::error_code() const {
  return error_code_;
}
inline void events::set_error_code(::google::protobuf::int32 value) {
  _set_bit(1);
  error_code_ = value;
}

// optional int32 rmid = 3;
inline bool events::has_rmid() const {
  return _has_bit(2);
}
inline void events::clear_rmid() {
  rmid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 events::rmid() const {
  return rmid_;
}
inline void events::set_rmid(::google::protobuf::int32 value) {
  _set_bit(2);
  rmid_ = value;
}

// optional int32 dtmid = 4;
inline bool events::has_dtmid() const {
  return _has_bit(3);
}
inline void events::clear_dtmid() {
  dtmid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 events::dtmid() const {
  return dtmid_;
}
inline void events::set_dtmid(::google::protobuf::int32 value) {
  _set_bit(3);
  dtmid_ = value;
}

// optional int32 seq_num = 5;
inline bool events::has_seq_num() const {
  return _has_bit(4);
}
inline void events::clear_seq_num() {
  seq_num_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 events::seq_num() const {
  return seq_num_;
}
inline void events::set_seq_num(::google::protobuf::int32 value) {
  _set_bit(4);
  seq_num_ = value;
}

// optional int32 msgid = 6;
inline bool events::has_msgid() const {
  return _has_bit(5);
}
inline void events::clear_msgid() {
  msgid_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 events::msgid() const {
  return msgid_;
}
inline void events::set_msgid(::google::protobuf::int32 value) {
  _set_bit(5);
  msgid_ = value;
}

// optional int64 xa_error = 7;
inline bool events::has_xa_error() const {
  return _has_bit(6);
}
inline void events::clear_xa_error() {
  xa_error_ = GOOGLE_LONGLONG(0);
  _clear_bit(6);
}
inline ::google::protobuf::int64 events::xa_error() const {
  return xa_error_;
}
inline void events::set_xa_error(::google::protobuf::int64 value) {
  _set_bit(6);
  xa_error_ = value;
}

// optional int32 pool_size = 8;
inline bool events::has_pool_size() const {
  return _has_bit(7);
}
inline void events::clear_pool_size() {
  pool_size_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 events::pool_size() const {
  return pool_size_;
}
inline void events::set_pool_size(::google::protobuf::int32 value) {
  _set_bit(7);
  pool_size_ = value;
}

// optional int32 pool_elems = 9;
inline bool events::has_pool_elems() const {
  return _has_bit(8);
}
inline void events::clear_pool_elems() {
  pool_elems_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 events::pool_elems() const {
  return pool_elems_;
}
inline void events::set_pool_elems(::google::protobuf::int32 value) {
  _set_bit(8);
  pool_elems_ = value;
}

// optional int32 msg_retries = 10;
inline bool events::has_msg_retries() const {
  return _has_bit(9);
}
inline void events::clear_msg_retries() {
  msg_retries_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 events::msg_retries() const {
  return msg_retries_;
}
inline void events::set_msg_retries(::google::protobuf::int32 value) {
  _set_bit(9);
  msg_retries_ = value;
}

// optional int32 pool_high = 11;
inline bool events::has_pool_high() const {
  return _has_bit(10);
}
inline void events::clear_pool_high() {
  pool_high_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 events::pool_high() const {
  return pool_high_;
}
inline void events::set_pool_high(::google::protobuf::int32 value) {
  _set_bit(10);
  pool_high_ = value;
}

// optional int32 pool_low = 12;
inline bool events::has_pool_low() const {
  return _has_bit(11);
}
inline void events::clear_pool_low() {
  pool_low_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 events::pool_low() const {
  return pool_low_;
}
inline void events::set_pool_low(::google::protobuf::int32 value) {
  _set_bit(11);
  pool_low_ = value;
}

// optional int32 pool_max = 13;
inline bool events::has_pool_max() const {
  return _has_bit(12);
}
inline void events::clear_pool_max() {
  pool_max_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 events::pool_max() const {
  return pool_max_;
}
inline void events::set_pool_max(::google::protobuf::int32 value) {
  _set_bit(12);
  pool_max_ = value;
}

// optional int32 tx_state = 14;
inline bool events::has_tx_state() const {
  return _has_bit(13);
}
inline void events::clear_tx_state() {
  tx_state_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 events::tx_state() const {
  return tx_state_;
}
inline void events::set_tx_state(::google::protobuf::int32 value) {
  _set_bit(13);
  tx_state_ = value;
}

// optional int32 data = 15;
inline bool events::has_data() const {
  return _has_bit(14);
}
inline void events::clear_data() {
  data_ = 0;
  _clear_bit(14);
}
inline ::google::protobuf::int32 events::data() const {
  return data_;
}
inline void events::set_data(::google::protobuf::int32 value) {
  _set_bit(14);
  data_ = value;
}

// optional int32 data1 = 16;
inline bool events::has_data1() const {
  return _has_bit(15);
}
inline void events::clear_data1() {
  data1_ = 0;
  _clear_bit(15);
}
inline ::google::protobuf::int32 events::data1() const {
  return data1_;
}
inline void events::set_data1(::google::protobuf::int32 value) {
  _set_bit(15);
  data1_ = value;
}

// optional int64 data2 = 17;
inline bool events::has_data2() const {
  return _has_bit(16);
}
inline void events::clear_data2() {
  data2_ = GOOGLE_LONGLONG(0);
  _clear_bit(16);
}
inline ::google::protobuf::int64 events::data2() const {
  return data2_;
}
inline void events::set_data2(::google::protobuf::int64 value) {
  _set_bit(16);
  data2_ = value;
}

// optional string string1 = 18;
inline bool events::has_string1() const {
  return _has_bit(17);
}
inline void events::clear_string1() {
  if (string1_ != &_default_string1_) {
    string1_->clear();
  }
  _clear_bit(17);
}
inline const ::std::string& events::string1() const {
  return *string1_;
}
inline void events::set_string1(const ::std::string& value) {
  _set_bit(17);
  if (string1_ == &_default_string1_) {
    string1_ = new ::std::string;
  }
  string1_->assign(value);
}
inline void events::set_string1(const char* value) {
  _set_bit(17);
  if (string1_ == &_default_string1_) {
    string1_ = new ::std::string;
  }
  string1_->assign(value);
}
inline void events::set_string1(const char* value, size_t size) {
  _set_bit(17);
  if (string1_ == &_default_string1_) {
    string1_ = new ::std::string;
  }
  string1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* events::mutable_string1() {
  _set_bit(17);
  if (string1_ == &_default_string1_) {
    string1_ = new ::std::string;
  }
  return string1_;
}

// optional int32 node = 19;
inline bool events::has_node() const {
  return _has_bit(18);
}
inline void events::clear_node() {
  node_ = 0;
  _clear_bit(18);
}
inline ::google::protobuf::int32 events::node() const {
  return node_;
}
inline void events::set_node(::google::protobuf::int32 value) {
  _set_bit(18);
  node_ = value;
}

// optional int32 msgid2 = 20;
inline bool events::has_msgid2() const {
  return _has_bit(19);
}
inline void events::clear_msgid2() {
  msgid2_ = 0;
  _clear_bit(19);
}
inline ::google::protobuf::int32 events::msgid2() const {
  return msgid2_;
}
inline void events::set_msgid2(::google::protobuf::int32 value) {
  _set_bit(19);
  msgid2_ = value;
}

// optional int32 offset = 21;
inline bool events::has_offset() const {
  return _has_bit(20);
}
inline void events::clear_offset() {
  offset_ = 0;
  _clear_bit(20);
}
inline ::google::protobuf::int32 events::offset() const {
  return offset_;
}
inline void events::set_offset(::google::protobuf::int32 value) {
  _set_bit(20);
  offset_ = value;
}

// optional int32 tm_event_msg = 22;
inline bool events::has_tm_event_msg() const {
  return _has_bit(21);
}
inline void events::clear_tm_event_msg() {
  tm_event_msg_ = 0;
  _clear_bit(21);
}
inline ::google::protobuf::int32 events::tm_event_msg() const {
  return tm_event_msg_;
}
inline void events::set_tm_event_msg(::google::protobuf::int32 value) {
  _set_bit(21);
  tm_event_msg_ = value;
}

// optional uint32 data4 = 23;
inline bool events::has_data4() const {
  return _has_bit(22);
}
inline void events::clear_data4() {
  data4_ = 0u;
  _clear_bit(22);
}
inline ::google::protobuf::uint32 events::data4() const {
  return data4_;
}
inline void events::set_data4(::google::protobuf::uint32 value) {
  _set_bit(22);
  data4_ = value;
}


}  // namespace dtm
#endif  // PROTOBUF_dtm_2eevents_2eproto__INCLUDED
