// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "dtm.perf_stats.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace dtm {

namespace {

const ::google::protobuf::Descriptor* tm_perf_stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_perf_stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_perf_tx_begin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_perf_tx_begin_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_perf_audit_write_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_perf_audit_write_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_perf_abort_count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_perf_abort_count_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_perf_commit_count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_perf_commit_count_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_perf_resources_by_node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_perf_resources_by_node_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dtm_2eperf_5fstats_2eproto() {
  protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dtm.perf_stats.proto");
  GOOGLE_CHECK(file != NULL);
  tm_perf_stats_descriptor_ = file->message_type(0);
  static const int tm_perf_stats_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, tx_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, abort_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, commit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, tm_initiated_aborts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, tm_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, tx_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, hung_tx_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, outstanding_tx_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, oldest_transid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, oldest_transid_timestamp_),
  };
  tm_perf_stats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_perf_stats_descriptor_,
      tm_perf_stats::default_instance_,
      tm_perf_stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_stats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_perf_stats));
  tm_perf_tx_begin_descriptor_ = file->message_type(1);
  static const int tm_perf_tx_begin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_tx_begin, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_tx_begin, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_tx_begin, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_tx_begin, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_tx_begin, oldest_transid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_tx_begin, oldest_transid_timestamp_),
  };
  tm_perf_tx_begin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_perf_tx_begin_descriptor_,
      tm_perf_tx_begin::default_instance_,
      tm_perf_tx_begin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_tx_begin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_tx_begin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_perf_tx_begin));
  tm_perf_audit_write_descriptor_ = file->message_type(2);
  static const int tm_perf_audit_write_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, transid_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, transid_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, transid_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, transid_4_),
  };
  tm_perf_audit_write_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_perf_audit_write_descriptor_,
      tm_perf_audit_write::default_instance_,
      tm_perf_audit_write_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_audit_write, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_perf_audit_write));
  tm_perf_abort_count_descriptor_ = file->message_type(3);
  static const int tm_perf_abort_count_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_abort_count, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_abort_count, abort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_abort_count, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_abort_count, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_abort_count, oldest_transid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_abort_count, oldest_transid_timestamp_),
  };
  tm_perf_abort_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_perf_abort_count_descriptor_,
      tm_perf_abort_count::default_instance_,
      tm_perf_abort_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_abort_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_abort_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_perf_abort_count));
  tm_perf_commit_count_descriptor_ = file->message_type(4);
  static const int tm_perf_commit_count_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_commit_count, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_commit_count, commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_commit_count, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_commit_count, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_commit_count, oldest_transid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_commit_count, oldest_transid_timestamp_),
  };
  tm_perf_commit_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_perf_commit_count_descriptor_,
      tm_perf_commit_count::default_instance_,
      tm_perf_commit_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_commit_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_commit_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_perf_commit_count));
  tm_perf_resources_by_node_descriptor_ = file->message_type(5);
  static const int tm_perf_resources_by_node_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_poolthresholdeventcounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_poolsizenow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_inuselistnow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_freelistnow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_steadystatelow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_steadystatehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_totalallocs_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_totalallocs_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_totaldeallocs_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_totaldeallocs_delete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_total_tx_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_total_abort_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, tx_total_commit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_poolthresholdeventcounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_poolsizenow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_inuselistnow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_freelistnow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_steadystatelow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_steadystatehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_totalallocs_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_totalallocs_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_totaldeallocs_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, thread_totaldeallocs_delete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, total_tx_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, total_abort_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, total_commit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, current_tx_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, oldest_transid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, oldest_transid_timestamp_),
  };
  tm_perf_resources_by_node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_perf_resources_by_node_descriptor_,
      tm_perf_resources_by_node::default_instance_,
      tm_perf_resources_by_node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_perf_resources_by_node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_perf_resources_by_node));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dtm_2eperf_5fstats_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_perf_stats_descriptor_, &tm_perf_stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_perf_tx_begin_descriptor_, &tm_perf_tx_begin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_perf_audit_write_descriptor_, &tm_perf_audit_write::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_perf_abort_count_descriptor_, &tm_perf_abort_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_perf_commit_count_descriptor_, &tm_perf_commit_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_perf_resources_by_node_descriptor_, &tm_perf_resources_by_node::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dtm_2eperf_5fstats_2eproto() {
  delete tm_perf_stats::default_instance_;
  delete tm_perf_stats_reflection_;
  delete tm_perf_tx_begin::default_instance_;
  delete tm_perf_tx_begin_reflection_;
  delete tm_perf_audit_write::default_instance_;
  delete tm_perf_audit_write_reflection_;
  delete tm_perf_abort_count::default_instance_;
  delete tm_perf_abort_count_reflection_;
  delete tm_perf_commit_count::default_instance_;
  delete tm_perf_commit_count_reflection_;
  delete tm_perf_resources_by_node::default_instance_;
  delete tm_perf_resources_by_node_reflection_;
}

void protobuf_AddDesc_dtm_2eperf_5fstats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eqpid_5fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024dtm.perf_stats.proto\022\003dtm\032\030common.qpid"
    "_header.proto\"\241\002\n\rtm_perf_stats\022#\n\006heade"
    "r\030\001 \002(\0132\023.common.qpid_header\022\020\n\010tx_count"
    "\030\002 \002(\003\022\023\n\013abort_count\030\003 \002(\003\022\024\n\014commit_co"
    "unt\030\004 \002(\003\022\033\n\023tm_initiated_aborts\030\005 \002(\003\022\020"
    "\n\010tm_state\030\006 \002(\t\022\020\n\010tx_state\030\007 \002(\t\022\025\n\rhu"
    "ng_tx_count\030\010 \002(\005\022\034\n\024outstanding_tx_coun"
    "t\030\t \002(\005\022\026\n\016oldest_transid\030\n \002(\014\022 \n\030oldes"
    "t_transid_timestamp\030\013 \002(\003\"\232\001\n\020tm_perf_tx"
    "_begin\022#\n\006header\030\001 \002(\0132\023.common.qpid_hea"
    "der\022\r\n\005count\030\002 \002(\003\022\013\n\003nid\030\003 \002(\003\022\013\n\003pid\030\004"
    " \001(\003\022\026\n\016oldest_transid\030\005 \002(\014\022 \n\030oldest_t"
    "ransid_timestamp\030\006 \002(\003\"\256\001\n\023tm_perf_audit"
    "_write\022#\n\006header\030\001 \002(\0132\023.common.qpid_hea"
    "der\022\014\n\004time\030\002 \002(\003\022\013\n\003nid\030\003 \002(\003\022\013\n\003pid\030\004 "
    "\002(\003\022\021\n\ttransid_1\030\005 \002(\003\022\021\n\ttransid_2\030\006 \002("
    "\003\022\021\n\ttransid_3\030\007 \002(\003\022\021\n\ttransid_4\030\010 \002(\003\""
    "\235\001\n\023tm_perf_abort_count\022#\n\006header\030\001 \002(\0132"
    "\023.common.qpid_header\022\r\n\005abort\030\002 \002(\003\022\013\n\003n"
    "id\030\003 \002(\003\022\013\n\003pid\030\004 \002(\003\022\026\n\016oldest_transid\030"
    "\005 \002(\014\022 \n\030oldest_transid_timestamp\030\006 \002(\003\""
    "\237\001\n\024tm_perf_commit_count\022#\n\006header\030\001 \002(\013"
    "2\023.common.qpid_header\022\016\n\006commit\030\002 \002(\003\022\013\n"
    "\003nid\030\003 \002(\003\022\013\n\003pid\030\004 \002(\003\022\026\n\016oldest_transi"
    "d\030\005 \002(\014\022 \n\030oldest_transid_timestamp\030\006 \002("
    "\003\"\323\007\n\031tm_perf_resources_by_node\022#\n\006heade"
    "r\030\001 \002(\0132\023.common.qpid_header\022\014\n\004node\030\002 \002"
    "(\003\022$\n\034tx_poolThresholdEventCounter\030\003 \002(\005"
    "\022\026\n\016tx_poolSizeNow\030\004 \002(\005\022\027\n\017tx_inUseList"
    "Now\030\005 \002(\005\022\026\n\016tx_freeListNow\030\006 \002(\005\022\031\n\021tx_"
    "steadyStateLow\030\007 \002(\005\022\032\n\022tx_steadyStateHi"
    "gh\030\010 \002(\005\022\016\n\006tx_max\030\t \002(\005\022\032\n\022tx_totalAllo"
    "cs_new\030\n \002(\005\022\033\n\023tx_totalAllocs_free\030\013 \002("
    "\005\022\035\n\025tx_totalDeallocs_free\030\014 \002(\005\022\037\n\027tx_t"
    "otalDeallocs_delete\030\r \002(\005\022\031\n\021tx_total_tx"
    "_count\030\016 \002(\003\022\034\n\024tx_total_abort_count\030\017 \002"
    "(\003\022\035\n\025tx_total_commit_count\030\020 \002(\003\022(\n thr"
    "ead_poolThresholdEventCounter\030\021 \002(\005\022\032\n\022t"
    "hread_poolSizeNow\030\022 \002(\005\022\033\n\023thread_inUseL"
    "istNow\030\023 \002(\005\022\032\n\022thread_freeListNow\030\024 \002(\005"
    "\022\035\n\025thread_steadyStateLow\030\025 \002(\005\022\036\n\026threa"
    "d_steadyStateHigh\030\026 \002(\005\022\022\n\nthread_max\030\027 "
    "\002(\005\022\036\n\026thread_totalAllocs_new\030\030 \002(\005\022\037\n\027t"
    "hread_totalAllocs_free\030\031 \002(\005\022!\n\031thread_t"
    "otalDeallocs_free\030\032 \002(\005\022#\n\033thread_totalD"
    "eallocs_delete\030\033 \002(\005\022\026\n\016total_tx_count\030\034"
    " \002(\003\022\031\n\021total_abort_count\030\035 \002(\003\022\032\n\022total"
    "_commit_count\030\036 \002(\003\022\030\n\020current_tx_count\030"
    "\037 \002(\003\022\026\n\016oldest_transid\030  \002(\014\022 \n\030oldest_"
    "transid_timestamp\030! \002(\003", 1983);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dtm.perf_stats.proto", &protobuf_RegisterTypes);
  tm_perf_stats::default_instance_ = new tm_perf_stats();
  tm_perf_tx_begin::default_instance_ = new tm_perf_tx_begin();
  tm_perf_audit_write::default_instance_ = new tm_perf_audit_write();
  tm_perf_abort_count::default_instance_ = new tm_perf_abort_count();
  tm_perf_commit_count::default_instance_ = new tm_perf_commit_count();
  tm_perf_resources_by_node::default_instance_ = new tm_perf_resources_by_node();
  tm_perf_stats::default_instance_->InitAsDefaultInstance();
  tm_perf_tx_begin::default_instance_->InitAsDefaultInstance();
  tm_perf_audit_write::default_instance_->InitAsDefaultInstance();
  tm_perf_abort_count::default_instance_->InitAsDefaultInstance();
  tm_perf_commit_count::default_instance_->InitAsDefaultInstance();
  tm_perf_resources_by_node::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dtm_2eperf_5fstats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dtm_2eperf_5fstats_2eproto {
  StaticDescriptorInitializer_dtm_2eperf_5fstats_2eproto() {
    protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();
  }
} static_descriptor_initializer_dtm_2eperf_5fstats_2eproto_;


// ===================================================================

const ::std::string tm_perf_stats::_default_tm_state_;
const ::std::string tm_perf_stats::_default_tx_state_;
const ::std::string tm_perf_stats::_default_oldest_transid_;
#ifndef _MSC_VER
const int tm_perf_stats::kHeaderFieldNumber;
const int tm_perf_stats::kTxCountFieldNumber;
const int tm_perf_stats::kAbortCountFieldNumber;
const int tm_perf_stats::kCommitCountFieldNumber;
const int tm_perf_stats::kTmInitiatedAbortsFieldNumber;
const int tm_perf_stats::kTmStateFieldNumber;
const int tm_perf_stats::kTxStateFieldNumber;
const int tm_perf_stats::kHungTxCountFieldNumber;
const int tm_perf_stats::kOutstandingTxCountFieldNumber;
const int tm_perf_stats::kOldestTransidFieldNumber;
const int tm_perf_stats::kOldestTransidTimestampFieldNumber;
#endif  // !_MSC_VER

tm_perf_stats::tm_perf_stats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_perf_stats::InitAsDefaultInstance() {  header_ = const_cast< ::common::qpid_header*>(&::common::qpid_header::default_instance());
}

tm_perf_stats::tm_perf_stats(const tm_perf_stats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_perf_stats::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  tx_count_ = GOOGLE_LONGLONG(0);
  abort_count_ = GOOGLE_LONGLONG(0);
  commit_count_ = GOOGLE_LONGLONG(0);
  tm_initiated_aborts_ = GOOGLE_LONGLONG(0);
  tm_state_ = const_cast< ::std::string*>(&_default_tm_state_);
  tx_state_ = const_cast< ::std::string*>(&_default_tx_state_);
  hung_tx_count_ = 0;
  outstanding_tx_count_ = 0;
  oldest_transid_ = const_cast< ::std::string*>(&_default_oldest_transid_);
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_perf_stats::~tm_perf_stats() {
  SharedDtor();
}

void tm_perf_stats::SharedDtor() {
  if (tm_state_ != &_default_tm_state_) {
    delete tm_state_;
  }
  if (tx_state_ != &_default_tx_state_) {
    delete tx_state_;
  }
  if (oldest_transid_ != &_default_oldest_transid_) {
    delete oldest_transid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

const ::google::protobuf::Descriptor* tm_perf_stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_stats_descriptor_;
}

const tm_perf_stats& tm_perf_stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();  return *default_instance_;
}

tm_perf_stats* tm_perf_stats::default_instance_ = NULL;

tm_perf_stats* tm_perf_stats::New() const {
  return new tm_perf_stats;
}

void tm_perf_stats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (header_ != NULL) header_->::common::qpid_header::Clear();
    }
    tx_count_ = GOOGLE_LONGLONG(0);
    abort_count_ = GOOGLE_LONGLONG(0);
    commit_count_ = GOOGLE_LONGLONG(0);
    tm_initiated_aborts_ = GOOGLE_LONGLONG(0);
    if (_has_bit(5)) {
      if (tm_state_ != &_default_tm_state_) {
        tm_state_->clear();
      }
    }
    if (_has_bit(6)) {
      if (tx_state_ != &_default_tx_state_) {
        tx_state_->clear();
      }
    }
    hung_tx_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    outstanding_tx_count_ = 0;
    if (_has_bit(9)) {
      if (oldest_transid_ != &_default_oldest_transid_) {
        oldest_transid_->clear();
      }
    }
    oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_perf_stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .common.qpid_header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_header()));
        if (input->ExpectTag(16)) goto parse_tx_count;
        break;
      }
      
      // required int64 tx_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &tx_count_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_abort_count;
        break;
      }
      
      // required int64 abort_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_abort_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &abort_count_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_commit_count;
        break;
      }
      
      // required int64 commit_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_commit_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &commit_count_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_tm_initiated_aborts;
        break;
      }
      
      // required int64 tm_initiated_aborts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tm_initiated_aborts:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &tm_initiated_aborts_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_tm_state;
        break;
      }
      
      // required string tm_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_tm_state:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_tm_state()));
        if (input->ExpectTag(58)) goto parse_tx_state;
        break;
      }
      
      // required string tx_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_tx_state:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_tx_state()));
        if (input->ExpectTag(64)) goto parse_hung_tx_count;
        break;
      }
      
      // required int32 hung_tx_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hung_tx_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &hung_tx_count_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_outstanding_tx_count;
        break;
      }
      
      // required int32 outstanding_tx_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_outstanding_tx_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &outstanding_tx_count_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_oldest_transid;
        break;
      }
      
      // required bytes oldest_transid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_oldest_transid()));
        if (input->ExpectTag(88)) goto parse_oldest_transid_timestamp;
        break;
      }
      
      // required int64 oldest_transid_timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid_timestamp:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &oldest_transid_timestamp_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_perf_stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    tm_perf_stats::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->header(), output);
  }
  
  // required int64 tx_count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(2, this->tx_count(), output);
  }
  
  // required int64 abort_count = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(3, this->abort_count(), output);
  }
  
  // required int64 commit_count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(4, this->commit_count(), output);
  }
  
  // required int64 tm_initiated_aborts = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(5, this->tm_initiated_aborts(), output);
  }
  
  // required string tm_state = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->tm_state(), output);
  }
  
  // required string tx_state = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->tx_state(), output);
  }
  
  // required int32 hung_tx_count = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->hung_tx_count(), output);
  }
  
  // required int32 outstanding_tx_count = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->outstanding_tx_count(), output);
  }
  
  // required bytes oldest_transid = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(10, this->oldest_transid(), output);
  }
  
  // required int64 oldest_transid_timestamp = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(11, this->oldest_transid_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_perf_stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->header(), target);
  }
  
  // required int64 tx_count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(2, this->tx_count(), target);
  }
  
  // required int64 abort_count = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(3, this->abort_count(), target);
  }
  
  // required int64 commit_count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(4, this->commit_count(), target);
  }
  
  // required int64 tm_initiated_aborts = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(5, this->tm_initiated_aborts(), target);
  }
  
  // required string tm_state = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->tm_state(), target);
  }
  
  // required string tx_state = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->tx_state(), target);
  }
  
  // required int32 hung_tx_count = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->hung_tx_count(), target);
  }
  
  // required int32 outstanding_tx_count = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->outstanding_tx_count(), target);
  }
  
  // required bytes oldest_transid = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(10, this->oldest_transid(), target);
  }
  
  // required int64 oldest_transid_timestamp = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(11, this->oldest_transid_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_perf_stats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.qpid_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->header());
    }
    
    // required int64 tx_count = 2;
    if (has_tx_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->tx_count());
    }
    
    // required int64 abort_count = 3;
    if (has_abort_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->abort_count());
    }
    
    // required int64 commit_count = 4;
    if (has_commit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->commit_count());
    }
    
    // required int64 tm_initiated_aborts = 5;
    if (has_tm_initiated_aborts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->tm_initiated_aborts());
    }
    
    // required string tm_state = 6;
    if (has_tm_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->tm_state());
    }
    
    // required string tx_state = 7;
    if (has_tx_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->tx_state());
    }
    
    // required int32 hung_tx_count = 8;
    if (has_hung_tx_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->hung_tx_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 outstanding_tx_count = 9;
    if (has_outstanding_tx_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->outstanding_tx_count());
    }
    
    // required bytes oldest_transid = 10;
    if (has_oldest_transid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->oldest_transid());
    }
    
    // required int64 oldest_transid_timestamp = 11;
    if (has_oldest_transid_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->oldest_transid_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void tm_perf_stats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_perf_stats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_perf_stats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_perf_stats::MergeFrom(const tm_perf_stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_header()->::common::qpid_header::MergeFrom(from.header());
    }
    if (from._has_bit(1)) {
      set_tx_count(from.tx_count());
    }
    if (from._has_bit(2)) {
      set_abort_count(from.abort_count());
    }
    if (from._has_bit(3)) {
      set_commit_count(from.commit_count());
    }
    if (from._has_bit(4)) {
      set_tm_initiated_aborts(from.tm_initiated_aborts());
    }
    if (from._has_bit(5)) {
      set_tm_state(from.tm_state());
    }
    if (from._has_bit(6)) {
      set_tx_state(from.tx_state());
    }
    if (from._has_bit(7)) {
      set_hung_tx_count(from.hung_tx_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_outstanding_tx_count(from.outstanding_tx_count());
    }
    if (from._has_bit(9)) {
      set_oldest_transid(from.oldest_transid());
    }
    if (from._has_bit(10)) {
      set_oldest_transid_timestamp(from.oldest_transid_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_perf_stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_stats::CopyFrom(const tm_perf_stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_stats::Swap(tm_perf_stats* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(tx_count_, other->tx_count_);
    std::swap(abort_count_, other->abort_count_);
    std::swap(commit_count_, other->commit_count_);
    std::swap(tm_initiated_aborts_, other->tm_initiated_aborts_);
    std::swap(tm_state_, other->tm_state_);
    std::swap(tx_state_, other->tx_state_);
    std::swap(hung_tx_count_, other->hung_tx_count_);
    std::swap(outstanding_tx_count_, other->outstanding_tx_count_);
    std::swap(oldest_transid_, other->oldest_transid_);
    std::swap(oldest_transid_timestamp_, other->oldest_transid_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool tm_perf_stats::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* tm_perf_stats::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* tm_perf_stats::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_stats_reflection_;
}

// ===================================================================

const ::std::string tm_perf_tx_begin::_default_oldest_transid_;
#ifndef _MSC_VER
const int tm_perf_tx_begin::kHeaderFieldNumber;
const int tm_perf_tx_begin::kCountFieldNumber;
const int tm_perf_tx_begin::kNidFieldNumber;
const int tm_perf_tx_begin::kPidFieldNumber;
const int tm_perf_tx_begin::kOldestTransidFieldNumber;
const int tm_perf_tx_begin::kOldestTransidTimestampFieldNumber;
#endif  // !_MSC_VER

tm_perf_tx_begin::tm_perf_tx_begin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_perf_tx_begin::InitAsDefaultInstance() {  header_ = const_cast< ::common::qpid_header*>(&::common::qpid_header::default_instance());
}

tm_perf_tx_begin::tm_perf_tx_begin(const tm_perf_tx_begin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_perf_tx_begin::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  count_ = GOOGLE_LONGLONG(0);
  nid_ = GOOGLE_LONGLONG(0);
  pid_ = GOOGLE_LONGLONG(0);
  oldest_transid_ = const_cast< ::std::string*>(&_default_oldest_transid_);
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_perf_tx_begin::~tm_perf_tx_begin() {
  SharedDtor();
}

void tm_perf_tx_begin::SharedDtor() {
  if (oldest_transid_ != &_default_oldest_transid_) {
    delete oldest_transid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

const ::google::protobuf::Descriptor* tm_perf_tx_begin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_tx_begin_descriptor_;
}

const tm_perf_tx_begin& tm_perf_tx_begin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();  return *default_instance_;
}

tm_perf_tx_begin* tm_perf_tx_begin::default_instance_ = NULL;

tm_perf_tx_begin* tm_perf_tx_begin::New() const {
  return new tm_perf_tx_begin;
}

void tm_perf_tx_begin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (header_ != NULL) header_->::common::qpid_header::Clear();
    }
    count_ = GOOGLE_LONGLONG(0);
    nid_ = GOOGLE_LONGLONG(0);
    pid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (oldest_transid_ != &_default_oldest_transid_) {
        oldest_transid_->clear();
      }
    }
    oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_perf_tx_begin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .common.qpid_header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_header()));
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &count_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nid;
        break;
      }
      
      // required int64 nid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &nid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_pid;
        break;
      }
      
      // optional int64 pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &pid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_oldest_transid;
        break;
      }
      
      // required bytes oldest_transid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_oldest_transid()));
        if (input->ExpectTag(48)) goto parse_oldest_transid_timestamp;
        break;
      }
      
      // required int64 oldest_transid_timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid_timestamp:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &oldest_transid_timestamp_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_perf_tx_begin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    tm_perf_tx_begin::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->header(), output);
  }
  
  // required int64 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(2, this->count(), output);
  }
  
  // required int64 nid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(3, this->nid(), output);
  }
  
  // optional int64 pid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(4, this->pid(), output);
  }
  
  // required bytes oldest_transid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->oldest_transid(), output);
  }
  
  // required int64 oldest_transid_timestamp = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(6, this->oldest_transid_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_perf_tx_begin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->header(), target);
  }
  
  // required int64 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(2, this->count(), target);
  }
  
  // required int64 nid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(3, this->nid(), target);
  }
  
  // optional int64 pid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(4, this->pid(), target);
  }
  
  // required bytes oldest_transid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->oldest_transid(), target);
  }
  
  // required int64 oldest_transid_timestamp = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(6, this->oldest_transid_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_perf_tx_begin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.qpid_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->header());
    }
    
    // required int64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->count());
    }
    
    // required int64 nid = 3;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->nid());
    }
    
    // optional int64 pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->pid());
    }
    
    // required bytes oldest_transid = 5;
    if (has_oldest_transid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->oldest_transid());
    }
    
    // required int64 oldest_transid_timestamp = 6;
    if (has_oldest_transid_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->oldest_transid_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void tm_perf_tx_begin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_perf_tx_begin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_perf_tx_begin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_perf_tx_begin::MergeFrom(const tm_perf_tx_begin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_header()->::common::qpid_header::MergeFrom(from.header());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
    if (from._has_bit(2)) {
      set_nid(from.nid());
    }
    if (from._has_bit(3)) {
      set_pid(from.pid());
    }
    if (from._has_bit(4)) {
      set_oldest_transid(from.oldest_transid());
    }
    if (from._has_bit(5)) {
      set_oldest_transid_timestamp(from.oldest_transid_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_perf_tx_begin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_tx_begin::CopyFrom(const tm_perf_tx_begin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_tx_begin::Swap(tm_perf_tx_begin* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(count_, other->count_);
    std::swap(nid_, other->nid_);
    std::swap(pid_, other->pid_);
    std::swap(oldest_transid_, other->oldest_transid_);
    std::swap(oldest_transid_timestamp_, other->oldest_transid_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool tm_perf_tx_begin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* tm_perf_tx_begin::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* tm_perf_tx_begin::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_tx_begin_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int tm_perf_audit_write::kHeaderFieldNumber;
const int tm_perf_audit_write::kTimeFieldNumber;
const int tm_perf_audit_write::kNidFieldNumber;
const int tm_perf_audit_write::kPidFieldNumber;
const int tm_perf_audit_write::kTransid1FieldNumber;
const int tm_perf_audit_write::kTransid2FieldNumber;
const int tm_perf_audit_write::kTransid3FieldNumber;
const int tm_perf_audit_write::kTransid4FieldNumber;
#endif  // !_MSC_VER

tm_perf_audit_write::tm_perf_audit_write()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_perf_audit_write::InitAsDefaultInstance() {  header_ = const_cast< ::common::qpid_header*>(&::common::qpid_header::default_instance());
}

tm_perf_audit_write::tm_perf_audit_write(const tm_perf_audit_write& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_perf_audit_write::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  time_ = GOOGLE_LONGLONG(0);
  nid_ = GOOGLE_LONGLONG(0);
  pid_ = GOOGLE_LONGLONG(0);
  transid_1_ = GOOGLE_LONGLONG(0);
  transid_2_ = GOOGLE_LONGLONG(0);
  transid_3_ = GOOGLE_LONGLONG(0);
  transid_4_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_perf_audit_write::~tm_perf_audit_write() {
  SharedDtor();
}

void tm_perf_audit_write::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

const ::google::protobuf::Descriptor* tm_perf_audit_write::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_audit_write_descriptor_;
}

const tm_perf_audit_write& tm_perf_audit_write::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();  return *default_instance_;
}

tm_perf_audit_write* tm_perf_audit_write::default_instance_ = NULL;

tm_perf_audit_write* tm_perf_audit_write::New() const {
  return new tm_perf_audit_write;
}

void tm_perf_audit_write::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (header_ != NULL) header_->::common::qpid_header::Clear();
    }
    time_ = GOOGLE_LONGLONG(0);
    nid_ = GOOGLE_LONGLONG(0);
    pid_ = GOOGLE_LONGLONG(0);
    transid_1_ = GOOGLE_LONGLONG(0);
    transid_2_ = GOOGLE_LONGLONG(0);
    transid_3_ = GOOGLE_LONGLONG(0);
    transid_4_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_perf_audit_write::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .common.qpid_header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_header()));
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &time_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nid;
        break;
      }
      
      // required int64 nid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &nid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_pid;
        break;
      }
      
      // required int64 pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &pid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_transid_1;
        break;
      }
      
      // required int64 transid_1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_transid_1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &transid_1_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_transid_2;
        break;
      }
      
      // required int64 transid_2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_transid_2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &transid_2_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_transid_3;
        break;
      }
      
      // required int64 transid_3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_transid_3:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &transid_3_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_transid_4;
        break;
      }
      
      // required int64 transid_4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_transid_4:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &transid_4_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_perf_audit_write::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    tm_perf_audit_write::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->header(), output);
  }
  
  // required int64 time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(2, this->time(), output);
  }
  
  // required int64 nid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(3, this->nid(), output);
  }
  
  // required int64 pid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(4, this->pid(), output);
  }
  
  // required int64 transid_1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(5, this->transid_1(), output);
  }
  
  // required int64 transid_2 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(6, this->transid_2(), output);
  }
  
  // required int64 transid_3 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(7, this->transid_3(), output);
  }
  
  // required int64 transid_4 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(8, this->transid_4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_perf_audit_write::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->header(), target);
  }
  
  // required int64 time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(2, this->time(), target);
  }
  
  // required int64 nid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(3, this->nid(), target);
  }
  
  // required int64 pid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(4, this->pid(), target);
  }
  
  // required int64 transid_1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(5, this->transid_1(), target);
  }
  
  // required int64 transid_2 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(6, this->transid_2(), target);
  }
  
  // required int64 transid_3 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(7, this->transid_3(), target);
  }
  
  // required int64 transid_4 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(8, this->transid_4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_perf_audit_write::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.qpid_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->header());
    }
    
    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->time());
    }
    
    // required int64 nid = 3;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->nid());
    }
    
    // required int64 pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->pid());
    }
    
    // required int64 transid_1 = 5;
    if (has_transid_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->transid_1());
    }
    
    // required int64 transid_2 = 6;
    if (has_transid_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->transid_2());
    }
    
    // required int64 transid_3 = 7;
    if (has_transid_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->transid_3());
    }
    
    // required int64 transid_4 = 8;
    if (has_transid_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->transid_4());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void tm_perf_audit_write::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_perf_audit_write* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_perf_audit_write*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_perf_audit_write::MergeFrom(const tm_perf_audit_write& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_header()->::common::qpid_header::MergeFrom(from.header());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
    if (from._has_bit(2)) {
      set_nid(from.nid());
    }
    if (from._has_bit(3)) {
      set_pid(from.pid());
    }
    if (from._has_bit(4)) {
      set_transid_1(from.transid_1());
    }
    if (from._has_bit(5)) {
      set_transid_2(from.transid_2());
    }
    if (from._has_bit(6)) {
      set_transid_3(from.transid_3());
    }
    if (from._has_bit(7)) {
      set_transid_4(from.transid_4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_perf_audit_write::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_audit_write::CopyFrom(const tm_perf_audit_write& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_audit_write::Swap(tm_perf_audit_write* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(time_, other->time_);
    std::swap(nid_, other->nid_);
    std::swap(pid_, other->pid_);
    std::swap(transid_1_, other->transid_1_);
    std::swap(transid_2_, other->transid_2_);
    std::swap(transid_3_, other->transid_3_);
    std::swap(transid_4_, other->transid_4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool tm_perf_audit_write::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* tm_perf_audit_write::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* tm_perf_audit_write::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_audit_write_reflection_;
}

// ===================================================================

const ::std::string tm_perf_abort_count::_default_oldest_transid_;
#ifndef _MSC_VER
const int tm_perf_abort_count::kHeaderFieldNumber;
const int tm_perf_abort_count::kAbortFieldNumber;
const int tm_perf_abort_count::kNidFieldNumber;
const int tm_perf_abort_count::kPidFieldNumber;
const int tm_perf_abort_count::kOldestTransidFieldNumber;
const int tm_perf_abort_count::kOldestTransidTimestampFieldNumber;
#endif  // !_MSC_VER

tm_perf_abort_count::tm_perf_abort_count()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_perf_abort_count::InitAsDefaultInstance() {  header_ = const_cast< ::common::qpid_header*>(&::common::qpid_header::default_instance());
}

tm_perf_abort_count::tm_perf_abort_count(const tm_perf_abort_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_perf_abort_count::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  abort_ = GOOGLE_LONGLONG(0);
  nid_ = GOOGLE_LONGLONG(0);
  pid_ = GOOGLE_LONGLONG(0);
  oldest_transid_ = const_cast< ::std::string*>(&_default_oldest_transid_);
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_perf_abort_count::~tm_perf_abort_count() {
  SharedDtor();
}

void tm_perf_abort_count::SharedDtor() {
  if (oldest_transid_ != &_default_oldest_transid_) {
    delete oldest_transid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

const ::google::protobuf::Descriptor* tm_perf_abort_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_abort_count_descriptor_;
}

const tm_perf_abort_count& tm_perf_abort_count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();  return *default_instance_;
}

tm_perf_abort_count* tm_perf_abort_count::default_instance_ = NULL;

tm_perf_abort_count* tm_perf_abort_count::New() const {
  return new tm_perf_abort_count;
}

void tm_perf_abort_count::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (header_ != NULL) header_->::common::qpid_header::Clear();
    }
    abort_ = GOOGLE_LONGLONG(0);
    nid_ = GOOGLE_LONGLONG(0);
    pid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (oldest_transid_ != &_default_oldest_transid_) {
        oldest_transid_->clear();
      }
    }
    oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_perf_abort_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .common.qpid_header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_header()));
        if (input->ExpectTag(16)) goto parse_abort;
        break;
      }
      
      // required int64 abort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_abort:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &abort_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nid;
        break;
      }
      
      // required int64 nid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &nid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_pid;
        break;
      }
      
      // required int64 pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &pid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_oldest_transid;
        break;
      }
      
      // required bytes oldest_transid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_oldest_transid()));
        if (input->ExpectTag(48)) goto parse_oldest_transid_timestamp;
        break;
      }
      
      // required int64 oldest_transid_timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid_timestamp:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &oldest_transid_timestamp_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_perf_abort_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    tm_perf_abort_count::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->header(), output);
  }
  
  // required int64 abort = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(2, this->abort(), output);
  }
  
  // required int64 nid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(3, this->nid(), output);
  }
  
  // required int64 pid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(4, this->pid(), output);
  }
  
  // required bytes oldest_transid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->oldest_transid(), output);
  }
  
  // required int64 oldest_transid_timestamp = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(6, this->oldest_transid_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_perf_abort_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->header(), target);
  }
  
  // required int64 abort = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(2, this->abort(), target);
  }
  
  // required int64 nid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(3, this->nid(), target);
  }
  
  // required int64 pid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(4, this->pid(), target);
  }
  
  // required bytes oldest_transid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->oldest_transid(), target);
  }
  
  // required int64 oldest_transid_timestamp = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(6, this->oldest_transid_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_perf_abort_count::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.qpid_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->header());
    }
    
    // required int64 abort = 2;
    if (has_abort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->abort());
    }
    
    // required int64 nid = 3;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->nid());
    }
    
    // required int64 pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->pid());
    }
    
    // required bytes oldest_transid = 5;
    if (has_oldest_transid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->oldest_transid());
    }
    
    // required int64 oldest_transid_timestamp = 6;
    if (has_oldest_transid_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->oldest_transid_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void tm_perf_abort_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_perf_abort_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_perf_abort_count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_perf_abort_count::MergeFrom(const tm_perf_abort_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_header()->::common::qpid_header::MergeFrom(from.header());
    }
    if (from._has_bit(1)) {
      set_abort(from.abort());
    }
    if (from._has_bit(2)) {
      set_nid(from.nid());
    }
    if (from._has_bit(3)) {
      set_pid(from.pid());
    }
    if (from._has_bit(4)) {
      set_oldest_transid(from.oldest_transid());
    }
    if (from._has_bit(5)) {
      set_oldest_transid_timestamp(from.oldest_transid_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_perf_abort_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_abort_count::CopyFrom(const tm_perf_abort_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_abort_count::Swap(tm_perf_abort_count* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(abort_, other->abort_);
    std::swap(nid_, other->nid_);
    std::swap(pid_, other->pid_);
    std::swap(oldest_transid_, other->oldest_transid_);
    std::swap(oldest_transid_timestamp_, other->oldest_transid_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool tm_perf_abort_count::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* tm_perf_abort_count::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* tm_perf_abort_count::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_abort_count_reflection_;
}

// ===================================================================

const ::std::string tm_perf_commit_count::_default_oldest_transid_;
#ifndef _MSC_VER
const int tm_perf_commit_count::kHeaderFieldNumber;
const int tm_perf_commit_count::kCommitFieldNumber;
const int tm_perf_commit_count::kNidFieldNumber;
const int tm_perf_commit_count::kPidFieldNumber;
const int tm_perf_commit_count::kOldestTransidFieldNumber;
const int tm_perf_commit_count::kOldestTransidTimestampFieldNumber;
#endif  // !_MSC_VER

tm_perf_commit_count::tm_perf_commit_count()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_perf_commit_count::InitAsDefaultInstance() {  header_ = const_cast< ::common::qpid_header*>(&::common::qpid_header::default_instance());
}

tm_perf_commit_count::tm_perf_commit_count(const tm_perf_commit_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_perf_commit_count::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  commit_ = GOOGLE_LONGLONG(0);
  nid_ = GOOGLE_LONGLONG(0);
  pid_ = GOOGLE_LONGLONG(0);
  oldest_transid_ = const_cast< ::std::string*>(&_default_oldest_transid_);
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_perf_commit_count::~tm_perf_commit_count() {
  SharedDtor();
}

void tm_perf_commit_count::SharedDtor() {
  if (oldest_transid_ != &_default_oldest_transid_) {
    delete oldest_transid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

const ::google::protobuf::Descriptor* tm_perf_commit_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_commit_count_descriptor_;
}

const tm_perf_commit_count& tm_perf_commit_count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();  return *default_instance_;
}

tm_perf_commit_count* tm_perf_commit_count::default_instance_ = NULL;

tm_perf_commit_count* tm_perf_commit_count::New() const {
  return new tm_perf_commit_count;
}

void tm_perf_commit_count::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (header_ != NULL) header_->::common::qpid_header::Clear();
    }
    commit_ = GOOGLE_LONGLONG(0);
    nid_ = GOOGLE_LONGLONG(0);
    pid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (oldest_transid_ != &_default_oldest_transid_) {
        oldest_transid_->clear();
      }
    }
    oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_perf_commit_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .common.qpid_header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_header()));
        if (input->ExpectTag(16)) goto parse_commit;
        break;
      }
      
      // required int64 commit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_commit:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &commit_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nid;
        break;
      }
      
      // required int64 nid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &nid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_pid;
        break;
      }
      
      // required int64 pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &pid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_oldest_transid;
        break;
      }
      
      // required bytes oldest_transid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_oldest_transid()));
        if (input->ExpectTag(48)) goto parse_oldest_transid_timestamp;
        break;
      }
      
      // required int64 oldest_transid_timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid_timestamp:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &oldest_transid_timestamp_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_perf_commit_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    tm_perf_commit_count::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->header(), output);
  }
  
  // required int64 commit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(2, this->commit(), output);
  }
  
  // required int64 nid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(3, this->nid(), output);
  }
  
  // required int64 pid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(4, this->pid(), output);
  }
  
  // required bytes oldest_transid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->oldest_transid(), output);
  }
  
  // required int64 oldest_transid_timestamp = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(6, this->oldest_transid_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_perf_commit_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->header(), target);
  }
  
  // required int64 commit = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(2, this->commit(), target);
  }
  
  // required int64 nid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(3, this->nid(), target);
  }
  
  // required int64 pid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(4, this->pid(), target);
  }
  
  // required bytes oldest_transid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->oldest_transid(), target);
  }
  
  // required int64 oldest_transid_timestamp = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(6, this->oldest_transid_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_perf_commit_count::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.qpid_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->header());
    }
    
    // required int64 commit = 2;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->commit());
    }
    
    // required int64 nid = 3;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->nid());
    }
    
    // required int64 pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->pid());
    }
    
    // required bytes oldest_transid = 5;
    if (has_oldest_transid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->oldest_transid());
    }
    
    // required int64 oldest_transid_timestamp = 6;
    if (has_oldest_transid_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->oldest_transid_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void tm_perf_commit_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_perf_commit_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_perf_commit_count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_perf_commit_count::MergeFrom(const tm_perf_commit_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_header()->::common::qpid_header::MergeFrom(from.header());
    }
    if (from._has_bit(1)) {
      set_commit(from.commit());
    }
    if (from._has_bit(2)) {
      set_nid(from.nid());
    }
    if (from._has_bit(3)) {
      set_pid(from.pid());
    }
    if (from._has_bit(4)) {
      set_oldest_transid(from.oldest_transid());
    }
    if (from._has_bit(5)) {
      set_oldest_transid_timestamp(from.oldest_transid_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_perf_commit_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_commit_count::CopyFrom(const tm_perf_commit_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_commit_count::Swap(tm_perf_commit_count* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(commit_, other->commit_);
    std::swap(nid_, other->nid_);
    std::swap(pid_, other->pid_);
    std::swap(oldest_transid_, other->oldest_transid_);
    std::swap(oldest_transid_timestamp_, other->oldest_transid_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool tm_perf_commit_count::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* tm_perf_commit_count::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* tm_perf_commit_count::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_commit_count_reflection_;
}

// ===================================================================

const ::std::string tm_perf_resources_by_node::_default_oldest_transid_;
#ifndef _MSC_VER
const int tm_perf_resources_by_node::kHeaderFieldNumber;
const int tm_perf_resources_by_node::kNodeFieldNumber;
const int tm_perf_resources_by_node::kTxPoolThresholdEventCounterFieldNumber;
const int tm_perf_resources_by_node::kTxPoolSizeNowFieldNumber;
const int tm_perf_resources_by_node::kTxInUseListNowFieldNumber;
const int tm_perf_resources_by_node::kTxFreeListNowFieldNumber;
const int tm_perf_resources_by_node::kTxSteadyStateLowFieldNumber;
const int tm_perf_resources_by_node::kTxSteadyStateHighFieldNumber;
const int tm_perf_resources_by_node::kTxMaxFieldNumber;
const int tm_perf_resources_by_node::kTxTotalAllocsNewFieldNumber;
const int tm_perf_resources_by_node::kTxTotalAllocsFreeFieldNumber;
const int tm_perf_resources_by_node::kTxTotalDeallocsFreeFieldNumber;
const int tm_perf_resources_by_node::kTxTotalDeallocsDeleteFieldNumber;
const int tm_perf_resources_by_node::kTxTotalTxCountFieldNumber;
const int tm_perf_resources_by_node::kTxTotalAbortCountFieldNumber;
const int tm_perf_resources_by_node::kTxTotalCommitCountFieldNumber;
const int tm_perf_resources_by_node::kThreadPoolThresholdEventCounterFieldNumber;
const int tm_perf_resources_by_node::kThreadPoolSizeNowFieldNumber;
const int tm_perf_resources_by_node::kThreadInUseListNowFieldNumber;
const int tm_perf_resources_by_node::kThreadFreeListNowFieldNumber;
const int tm_perf_resources_by_node::kThreadSteadyStateLowFieldNumber;
const int tm_perf_resources_by_node::kThreadSteadyStateHighFieldNumber;
const int tm_perf_resources_by_node::kThreadMaxFieldNumber;
const int tm_perf_resources_by_node::kThreadTotalAllocsNewFieldNumber;
const int tm_perf_resources_by_node::kThreadTotalAllocsFreeFieldNumber;
const int tm_perf_resources_by_node::kThreadTotalDeallocsFreeFieldNumber;
const int tm_perf_resources_by_node::kThreadTotalDeallocsDeleteFieldNumber;
const int tm_perf_resources_by_node::kTotalTxCountFieldNumber;
const int tm_perf_resources_by_node::kTotalAbortCountFieldNumber;
const int tm_perf_resources_by_node::kTotalCommitCountFieldNumber;
const int tm_perf_resources_by_node::kCurrentTxCountFieldNumber;
const int tm_perf_resources_by_node::kOldestTransidFieldNumber;
const int tm_perf_resources_by_node::kOldestTransidTimestampFieldNumber;
#endif  // !_MSC_VER

tm_perf_resources_by_node::tm_perf_resources_by_node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_perf_resources_by_node::InitAsDefaultInstance() {  header_ = const_cast< ::common::qpid_header*>(&::common::qpid_header::default_instance());
}

tm_perf_resources_by_node::tm_perf_resources_by_node(const tm_perf_resources_by_node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_perf_resources_by_node::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  node_ = GOOGLE_LONGLONG(0);
  tx_poolthresholdeventcounter_ = 0;
  tx_poolsizenow_ = 0;
  tx_inuselistnow_ = 0;
  tx_freelistnow_ = 0;
  tx_steadystatelow_ = 0;
  tx_steadystatehigh_ = 0;
  tx_max_ = 0;
  tx_totalallocs_new_ = 0;
  tx_totalallocs_free_ = 0;
  tx_totaldeallocs_free_ = 0;
  tx_totaldeallocs_delete_ = 0;
  tx_total_tx_count_ = GOOGLE_LONGLONG(0);
  tx_total_abort_count_ = GOOGLE_LONGLONG(0);
  tx_total_commit_count_ = GOOGLE_LONGLONG(0);
  thread_poolthresholdeventcounter_ = 0;
  thread_poolsizenow_ = 0;
  thread_inuselistnow_ = 0;
  thread_freelistnow_ = 0;
  thread_steadystatelow_ = 0;
  thread_steadystatehigh_ = 0;
  thread_max_ = 0;
  thread_totalallocs_new_ = 0;
  thread_totalallocs_free_ = 0;
  thread_totaldeallocs_free_ = 0;
  thread_totaldeallocs_delete_ = 0;
  total_tx_count_ = GOOGLE_LONGLONG(0);
  total_abort_count_ = GOOGLE_LONGLONG(0);
  total_commit_count_ = GOOGLE_LONGLONG(0);
  current_tx_count_ = GOOGLE_LONGLONG(0);
  oldest_transid_ = const_cast< ::std::string*>(&_default_oldest_transid_);
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_perf_resources_by_node::~tm_perf_resources_by_node() {
  SharedDtor();
}

void tm_perf_resources_by_node::SharedDtor() {
  if (oldest_transid_ != &_default_oldest_transid_) {
    delete oldest_transid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

const ::google::protobuf::Descriptor* tm_perf_resources_by_node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_resources_by_node_descriptor_;
}

const tm_perf_resources_by_node& tm_perf_resources_by_node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();  return *default_instance_;
}

tm_perf_resources_by_node* tm_perf_resources_by_node::default_instance_ = NULL;

tm_perf_resources_by_node* tm_perf_resources_by_node::New() const {
  return new tm_perf_resources_by_node;
}

void tm_perf_resources_by_node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (header_ != NULL) header_->::common::qpid_header::Clear();
    }
    node_ = GOOGLE_LONGLONG(0);
    tx_poolthresholdeventcounter_ = 0;
    tx_poolsizenow_ = 0;
    tx_inuselistnow_ = 0;
    tx_freelistnow_ = 0;
    tx_steadystatelow_ = 0;
    tx_steadystatehigh_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tx_max_ = 0;
    tx_totalallocs_new_ = 0;
    tx_totalallocs_free_ = 0;
    tx_totaldeallocs_free_ = 0;
    tx_totaldeallocs_delete_ = 0;
    tx_total_tx_count_ = GOOGLE_LONGLONG(0);
    tx_total_abort_count_ = GOOGLE_LONGLONG(0);
    tx_total_commit_count_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    thread_poolthresholdeventcounter_ = 0;
    thread_poolsizenow_ = 0;
    thread_inuselistnow_ = 0;
    thread_freelistnow_ = 0;
    thread_steadystatelow_ = 0;
    thread_steadystatehigh_ = 0;
    thread_max_ = 0;
    thread_totalallocs_new_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    thread_totalallocs_free_ = 0;
    thread_totaldeallocs_free_ = 0;
    thread_totaldeallocs_delete_ = 0;
    total_tx_count_ = GOOGLE_LONGLONG(0);
    total_abort_count_ = GOOGLE_LONGLONG(0);
    total_commit_count_ = GOOGLE_LONGLONG(0);
    current_tx_count_ = GOOGLE_LONGLONG(0);
    if (_has_bit(31)) {
      if (oldest_transid_ != &_default_oldest_transid_) {
        oldest_transid_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_perf_resources_by_node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .common.qpid_header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_header()));
        if (input->ExpectTag(16)) goto parse_node;
        break;
      }
      
      // required int64 node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_node:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &node_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_tx_poolThresholdEventCounter;
        break;
      }
      
      // required int32 tx_poolThresholdEventCounter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_poolThresholdEventCounter:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_poolthresholdeventcounter_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_tx_poolSizeNow;
        break;
      }
      
      // required int32 tx_poolSizeNow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_poolSizeNow:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_poolsizenow_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_tx_inUseListNow;
        break;
      }
      
      // required int32 tx_inUseListNow = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_inUseListNow:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_inuselistnow_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_tx_freeListNow;
        break;
      }
      
      // required int32 tx_freeListNow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_freeListNow:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_freelistnow_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_tx_steadyStateLow;
        break;
      }
      
      // required int32 tx_steadyStateLow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_steadyStateLow:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_steadystatelow_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_tx_steadyStateHigh;
        break;
      }
      
      // required int32 tx_steadyStateHigh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_steadyStateHigh:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_steadystatehigh_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_tx_max;
        break;
      }
      
      // required int32 tx_max = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_max:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_max_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_tx_totalAllocs_new;
        break;
      }
      
      // required int32 tx_totalAllocs_new = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_totalAllocs_new:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_totalallocs_new_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_tx_totalAllocs_free;
        break;
      }
      
      // required int32 tx_totalAllocs_free = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_totalAllocs_free:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_totalallocs_free_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_tx_totalDeallocs_free;
        break;
      }
      
      // required int32 tx_totalDeallocs_free = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_totalDeallocs_free:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_totaldeallocs_free_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_tx_totalDeallocs_delete;
        break;
      }
      
      // required int32 tx_totalDeallocs_delete = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_totalDeallocs_delete:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &tx_totaldeallocs_delete_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_tx_total_tx_count;
        break;
      }
      
      // required int64 tx_total_tx_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_total_tx_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &tx_total_tx_count_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_tx_total_abort_count;
        break;
      }
      
      // required int64 tx_total_abort_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_total_abort_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &tx_total_abort_count_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_tx_total_commit_count;
        break;
      }
      
      // required int64 tx_total_commit_count = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tx_total_commit_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &tx_total_commit_count_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_thread_poolThresholdEventCounter;
        break;
      }
      
      // required int32 thread_poolThresholdEventCounter = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_poolThresholdEventCounter:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_poolthresholdeventcounter_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_thread_poolSizeNow;
        break;
      }
      
      // required int32 thread_poolSizeNow = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_poolSizeNow:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_poolsizenow_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_thread_inUseListNow;
        break;
      }
      
      // required int32 thread_inUseListNow = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_inUseListNow:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_inuselistnow_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_thread_freeListNow;
        break;
      }
      
      // required int32 thread_freeListNow = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_freeListNow:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_freelistnow_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_thread_steadyStateLow;
        break;
      }
      
      // required int32 thread_steadyStateLow = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_steadyStateLow:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_steadystatelow_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_thread_steadyStateHigh;
        break;
      }
      
      // required int32 thread_steadyStateHigh = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_steadyStateHigh:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_steadystatehigh_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_thread_max;
        break;
      }
      
      // required int32 thread_max = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_max:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_max_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_thread_totalAllocs_new;
        break;
      }
      
      // required int32 thread_totalAllocs_new = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_totalAllocs_new:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_totalallocs_new_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_thread_totalAllocs_free;
        break;
      }
      
      // required int32 thread_totalAllocs_free = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_totalAllocs_free:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_totalallocs_free_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_thread_totalDeallocs_free;
        break;
      }
      
      // required int32 thread_totalDeallocs_free = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_totalDeallocs_free:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_totaldeallocs_free_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_thread_totalDeallocs_delete;
        break;
      }
      
      // required int32 thread_totalDeallocs_delete = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_thread_totalDeallocs_delete:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &thread_totaldeallocs_delete_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_total_tx_count;
        break;
      }
      
      // required int64 total_tx_count = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_total_tx_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &total_tx_count_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_total_abort_count;
        break;
      }
      
      // required int64 total_abort_count = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_total_abort_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &total_abort_count_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_total_commit_count;
        break;
      }
      
      // required int64 total_commit_count = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_total_commit_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &total_commit_count_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_current_tx_count;
        break;
      }
      
      // required int64 current_tx_count = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_current_tx_count:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &current_tx_count_));
        _set_bit(30);
        if (input->ExpectTag(258)) goto parse_oldest_transid;
        break;
      }
      
      // required bytes oldest_transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_oldest_transid()));
        if (input->ExpectTag(264)) goto parse_oldest_transid_timestamp;
        break;
      }
      
      // required int64 oldest_transid_timestamp = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oldest_transid_timestamp:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &oldest_transid_timestamp_));
        _set_bit(32);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_perf_resources_by_node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    tm_perf_resources_by_node::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->header(), output);
  }
  
  // required int64 node = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(2, this->node(), output);
  }
  
  // required int32 tx_poolThresholdEventCounter = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->tx_poolthresholdeventcounter(), output);
  }
  
  // required int32 tx_poolSizeNow = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->tx_poolsizenow(), output);
  }
  
  // required int32 tx_inUseListNow = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->tx_inuselistnow(), output);
  }
  
  // required int32 tx_freeListNow = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->tx_freelistnow(), output);
  }
  
  // required int32 tx_steadyStateLow = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->tx_steadystatelow(), output);
  }
  
  // required int32 tx_steadyStateHigh = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->tx_steadystatehigh(), output);
  }
  
  // required int32 tx_max = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->tx_max(), output);
  }
  
  // required int32 tx_totalAllocs_new = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(10, this->tx_totalallocs_new(), output);
  }
  
  // required int32 tx_totalAllocs_free = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->tx_totalallocs_free(), output);
  }
  
  // required int32 tx_totalDeallocs_free = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(12, this->tx_totaldeallocs_free(), output);
  }
  
  // required int32 tx_totalDeallocs_delete = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->tx_totaldeallocs_delete(), output);
  }
  
  // required int64 tx_total_tx_count = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(14, this->tx_total_tx_count(), output);
  }
  
  // required int64 tx_total_abort_count = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(15, this->tx_total_abort_count(), output);
  }
  
  // required int64 tx_total_commit_count = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(16, this->tx_total_commit_count(), output);
  }
  
  // required int32 thread_poolThresholdEventCounter = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(17, this->thread_poolthresholdeventcounter(), output);
  }
  
  // required int32 thread_poolSizeNow = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(18, this->thread_poolsizenow(), output);
  }
  
  // required int32 thread_inUseListNow = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(19, this->thread_inuselistnow(), output);
  }
  
  // required int32 thread_freeListNow = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(20, this->thread_freelistnow(), output);
  }
  
  // required int32 thread_steadyStateLow = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(21, this->thread_steadystatelow(), output);
  }
  
  // required int32 thread_steadyStateHigh = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(22, this->thread_steadystatehigh(), output);
  }
  
  // required int32 thread_max = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(23, this->thread_max(), output);
  }
  
  // required int32 thread_totalAllocs_new = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(24, this->thread_totalallocs_new(), output);
  }
  
  // required int32 thread_totalAllocs_free = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(25, this->thread_totalallocs_free(), output);
  }
  
  // required int32 thread_totalDeallocs_free = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(26, this->thread_totaldeallocs_free(), output);
  }
  
  // required int32 thread_totalDeallocs_delete = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(27, this->thread_totaldeallocs_delete(), output);
  }
  
  // required int64 total_tx_count = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(28, this->total_tx_count(), output);
  }
  
  // required int64 total_abort_count = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(29, this->total_abort_count(), output);
  }
  
  // required int64 total_commit_count = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(30, this->total_commit_count(), output);
  }
  
  // required int64 current_tx_count = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(31, this->current_tx_count(), output);
  }
  
  // required bytes oldest_transid = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(32, this->oldest_transid(), output);
  }
  
  // required int64 oldest_transid_timestamp = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(33, this->oldest_transid_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_perf_resources_by_node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .common.qpid_header header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->header(), target);
  }
  
  // required int64 node = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(2, this->node(), target);
  }
  
  // required int32 tx_poolThresholdEventCounter = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->tx_poolthresholdeventcounter(), target);
  }
  
  // required int32 tx_poolSizeNow = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->tx_poolsizenow(), target);
  }
  
  // required int32 tx_inUseListNow = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->tx_inuselistnow(), target);
  }
  
  // required int32 tx_freeListNow = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->tx_freelistnow(), target);
  }
  
  // required int32 tx_steadyStateLow = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->tx_steadystatelow(), target);
  }
  
  // required int32 tx_steadyStateHigh = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->tx_steadystatehigh(), target);
  }
  
  // required int32 tx_max = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->tx_max(), target);
  }
  
  // required int32 tx_totalAllocs_new = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(10, this->tx_totalallocs_new(), target);
  }
  
  // required int32 tx_totalAllocs_free = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->tx_totalallocs_free(), target);
  }
  
  // required int32 tx_totalDeallocs_free = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(12, this->tx_totaldeallocs_free(), target);
  }
  
  // required int32 tx_totalDeallocs_delete = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->tx_totaldeallocs_delete(), target);
  }
  
  // required int64 tx_total_tx_count = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(14, this->tx_total_tx_count(), target);
  }
  
  // required int64 tx_total_abort_count = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(15, this->tx_total_abort_count(), target);
  }
  
  // required int64 tx_total_commit_count = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(16, this->tx_total_commit_count(), target);
  }
  
  // required int32 thread_poolThresholdEventCounter = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(17, this->thread_poolthresholdeventcounter(), target);
  }
  
  // required int32 thread_poolSizeNow = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(18, this->thread_poolsizenow(), target);
  }
  
  // required int32 thread_inUseListNow = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(19, this->thread_inuselistnow(), target);
  }
  
  // required int32 thread_freeListNow = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(20, this->thread_freelistnow(), target);
  }
  
  // required int32 thread_steadyStateLow = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(21, this->thread_steadystatelow(), target);
  }
  
  // required int32 thread_steadyStateHigh = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(22, this->thread_steadystatehigh(), target);
  }
  
  // required int32 thread_max = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(23, this->thread_max(), target);
  }
  
  // required int32 thread_totalAllocs_new = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(24, this->thread_totalallocs_new(), target);
  }
  
  // required int32 thread_totalAllocs_free = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(25, this->thread_totalallocs_free(), target);
  }
  
  // required int32 thread_totalDeallocs_free = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(26, this->thread_totaldeallocs_free(), target);
  }
  
  // required int32 thread_totalDeallocs_delete = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(27, this->thread_totaldeallocs_delete(), target);
  }
  
  // required int64 total_tx_count = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(28, this->total_tx_count(), target);
  }
  
  // required int64 total_abort_count = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(29, this->total_abort_count(), target);
  }
  
  // required int64 total_commit_count = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(30, this->total_commit_count(), target);
  }
  
  // required int64 current_tx_count = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(31, this->current_tx_count(), target);
  }
  
  // required bytes oldest_transid = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(32, this->oldest_transid(), target);
  }
  
  // required int64 oldest_transid_timestamp = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(33, this->oldest_transid_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_perf_resources_by_node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.qpid_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->header());
    }
    
    // required int64 node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->node());
    }
    
    // required int32 tx_poolThresholdEventCounter = 3;
    if (has_tx_poolthresholdeventcounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_poolthresholdeventcounter());
    }
    
    // required int32 tx_poolSizeNow = 4;
    if (has_tx_poolsizenow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_poolsizenow());
    }
    
    // required int32 tx_inUseListNow = 5;
    if (has_tx_inuselistnow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_inuselistnow());
    }
    
    // required int32 tx_freeListNow = 6;
    if (has_tx_freelistnow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_freelistnow());
    }
    
    // required int32 tx_steadyStateLow = 7;
    if (has_tx_steadystatelow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_steadystatelow());
    }
    
    // required int32 tx_steadyStateHigh = 8;
    if (has_tx_steadystatehigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_steadystatehigh());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 tx_max = 9;
    if (has_tx_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_max());
    }
    
    // required int32 tx_totalAllocs_new = 10;
    if (has_tx_totalallocs_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_totalallocs_new());
    }
    
    // required int32 tx_totalAllocs_free = 11;
    if (has_tx_totalallocs_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_totalallocs_free());
    }
    
    // required int32 tx_totalDeallocs_free = 12;
    if (has_tx_totaldeallocs_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_totaldeallocs_free());
    }
    
    // required int32 tx_totalDeallocs_delete = 13;
    if (has_tx_totaldeallocs_delete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->tx_totaldeallocs_delete());
    }
    
    // required int64 tx_total_tx_count = 14;
    if (has_tx_total_tx_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->tx_total_tx_count());
    }
    
    // required int64 tx_total_abort_count = 15;
    if (has_tx_total_abort_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->tx_total_abort_count());
    }
    
    // required int64 tx_total_commit_count = 16;
    if (has_tx_total_commit_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->tx_total_commit_count());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 thread_poolThresholdEventCounter = 17;
    if (has_thread_poolthresholdeventcounter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_poolthresholdeventcounter());
    }
    
    // required int32 thread_poolSizeNow = 18;
    if (has_thread_poolsizenow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_poolsizenow());
    }
    
    // required int32 thread_inUseListNow = 19;
    if (has_thread_inuselistnow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_inuselistnow());
    }
    
    // required int32 thread_freeListNow = 20;
    if (has_thread_freelistnow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_freelistnow());
    }
    
    // required int32 thread_steadyStateLow = 21;
    if (has_thread_steadystatelow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_steadystatelow());
    }
    
    // required int32 thread_steadyStateHigh = 22;
    if (has_thread_steadystatehigh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_steadystatehigh());
    }
    
    // required int32 thread_max = 23;
    if (has_thread_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_max());
    }
    
    // required int32 thread_totalAllocs_new = 24;
    if (has_thread_totalallocs_new()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_totalallocs_new());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 thread_totalAllocs_free = 25;
    if (has_thread_totalallocs_free()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_totalallocs_free());
    }
    
    // required int32 thread_totalDeallocs_free = 26;
    if (has_thread_totaldeallocs_free()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_totaldeallocs_free());
    }
    
    // required int32 thread_totalDeallocs_delete = 27;
    if (has_thread_totaldeallocs_delete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->thread_totaldeallocs_delete());
    }
    
    // required int64 total_tx_count = 28;
    if (has_total_tx_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->total_tx_count());
    }
    
    // required int64 total_abort_count = 29;
    if (has_total_abort_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->total_abort_count());
    }
    
    // required int64 total_commit_count = 30;
    if (has_total_commit_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->total_commit_count());
    }
    
    // required int64 current_tx_count = 31;
    if (has_current_tx_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->current_tx_count());
    }
    
    // required bytes oldest_transid = 32;
    if (has_oldest_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->oldest_transid());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int64 oldest_transid_timestamp = 33;
    if (has_oldest_transid_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->oldest_transid_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void tm_perf_resources_by_node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_perf_resources_by_node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_perf_resources_by_node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_perf_resources_by_node::MergeFrom(const tm_perf_resources_by_node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_header()->::common::qpid_header::MergeFrom(from.header());
    }
    if (from._has_bit(1)) {
      set_node(from.node());
    }
    if (from._has_bit(2)) {
      set_tx_poolthresholdeventcounter(from.tx_poolthresholdeventcounter());
    }
    if (from._has_bit(3)) {
      set_tx_poolsizenow(from.tx_poolsizenow());
    }
    if (from._has_bit(4)) {
      set_tx_inuselistnow(from.tx_inuselistnow());
    }
    if (from._has_bit(5)) {
      set_tx_freelistnow(from.tx_freelistnow());
    }
    if (from._has_bit(6)) {
      set_tx_steadystatelow(from.tx_steadystatelow());
    }
    if (from._has_bit(7)) {
      set_tx_steadystatehigh(from.tx_steadystatehigh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_tx_max(from.tx_max());
    }
    if (from._has_bit(9)) {
      set_tx_totalallocs_new(from.tx_totalallocs_new());
    }
    if (from._has_bit(10)) {
      set_tx_totalallocs_free(from.tx_totalallocs_free());
    }
    if (from._has_bit(11)) {
      set_tx_totaldeallocs_free(from.tx_totaldeallocs_free());
    }
    if (from._has_bit(12)) {
      set_tx_totaldeallocs_delete(from.tx_totaldeallocs_delete());
    }
    if (from._has_bit(13)) {
      set_tx_total_tx_count(from.tx_total_tx_count());
    }
    if (from._has_bit(14)) {
      set_tx_total_abort_count(from.tx_total_abort_count());
    }
    if (from._has_bit(15)) {
      set_tx_total_commit_count(from.tx_total_commit_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_thread_poolthresholdeventcounter(from.thread_poolthresholdeventcounter());
    }
    if (from._has_bit(17)) {
      set_thread_poolsizenow(from.thread_poolsizenow());
    }
    if (from._has_bit(18)) {
      set_thread_inuselistnow(from.thread_inuselistnow());
    }
    if (from._has_bit(19)) {
      set_thread_freelistnow(from.thread_freelistnow());
    }
    if (from._has_bit(20)) {
      set_thread_steadystatelow(from.thread_steadystatelow());
    }
    if (from._has_bit(21)) {
      set_thread_steadystatehigh(from.thread_steadystatehigh());
    }
    if (from._has_bit(22)) {
      set_thread_max(from.thread_max());
    }
    if (from._has_bit(23)) {
      set_thread_totalallocs_new(from.thread_totalallocs_new());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_thread_totalallocs_free(from.thread_totalallocs_free());
    }
    if (from._has_bit(25)) {
      set_thread_totaldeallocs_free(from.thread_totaldeallocs_free());
    }
    if (from._has_bit(26)) {
      set_thread_totaldeallocs_delete(from.thread_totaldeallocs_delete());
    }
    if (from._has_bit(27)) {
      set_total_tx_count(from.total_tx_count());
    }
    if (from._has_bit(28)) {
      set_total_abort_count(from.total_abort_count());
    }
    if (from._has_bit(29)) {
      set_total_commit_count(from.total_commit_count());
    }
    if (from._has_bit(30)) {
      set_current_tx_count(from.current_tx_count());
    }
    if (from._has_bit(31)) {
      set_oldest_transid(from.oldest_transid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_oldest_transid_timestamp(from.oldest_transid_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_perf_resources_by_node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_resources_by_node::CopyFrom(const tm_perf_resources_by_node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_perf_resources_by_node::Swap(tm_perf_resources_by_node* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(node_, other->node_);
    std::swap(tx_poolthresholdeventcounter_, other->tx_poolthresholdeventcounter_);
    std::swap(tx_poolsizenow_, other->tx_poolsizenow_);
    std::swap(tx_inuselistnow_, other->tx_inuselistnow_);
    std::swap(tx_freelistnow_, other->tx_freelistnow_);
    std::swap(tx_steadystatelow_, other->tx_steadystatelow_);
    std::swap(tx_steadystatehigh_, other->tx_steadystatehigh_);
    std::swap(tx_max_, other->tx_max_);
    std::swap(tx_totalallocs_new_, other->tx_totalallocs_new_);
    std::swap(tx_totalallocs_free_, other->tx_totalallocs_free_);
    std::swap(tx_totaldeallocs_free_, other->tx_totaldeallocs_free_);
    std::swap(tx_totaldeallocs_delete_, other->tx_totaldeallocs_delete_);
    std::swap(tx_total_tx_count_, other->tx_total_tx_count_);
    std::swap(tx_total_abort_count_, other->tx_total_abort_count_);
    std::swap(tx_total_commit_count_, other->tx_total_commit_count_);
    std::swap(thread_poolthresholdeventcounter_, other->thread_poolthresholdeventcounter_);
    std::swap(thread_poolsizenow_, other->thread_poolsizenow_);
    std::swap(thread_inuselistnow_, other->thread_inuselistnow_);
    std::swap(thread_freelistnow_, other->thread_freelistnow_);
    std::swap(thread_steadystatelow_, other->thread_steadystatelow_);
    std::swap(thread_steadystatehigh_, other->thread_steadystatehigh_);
    std::swap(thread_max_, other->thread_max_);
    std::swap(thread_totalallocs_new_, other->thread_totalallocs_new_);
    std::swap(thread_totalallocs_free_, other->thread_totalallocs_free_);
    std::swap(thread_totaldeallocs_free_, other->thread_totaldeallocs_free_);
    std::swap(thread_totaldeallocs_delete_, other->thread_totaldeallocs_delete_);
    std::swap(total_tx_count_, other->total_tx_count_);
    std::swap(total_abort_count_, other->total_abort_count_);
    std::swap(total_commit_count_, other->total_commit_count_);
    std::swap(current_tx_count_, other->current_tx_count_);
    std::swap(oldest_transid_, other->oldest_transid_);
    std::swap(oldest_transid_timestamp_, other->oldest_transid_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool tm_perf_resources_by_node::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000001) != 0x00000001) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* tm_perf_resources_by_node::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* tm_perf_resources_by_node::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return tm_perf_resources_by_node_reflection_;
}

}  // namespace dtm
