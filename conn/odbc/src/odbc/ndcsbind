#!/bin/bash

function Usage {
    ndcsEcho
    ndcsEcho "Usage: $0 -n <nn> -p  { -h }"
    ndcsEcho
    ndcsEcho "-n <nn>  AS process name"    
    ndcsEcho "-p <nn>  Port number" 
    ndcsEcho "-h       Help"
    ndcsEcho
    exit $gv_error;
}

function HelpUsage {
    echo "Usage: ndcsbind -n <nn> -p  { -h }"
    echo
    echo "-n <nn>  AS process name"    
    echo "-p <nn>  Port number" 
    echo "-h       Help"
    echo
    exit $gv_warn;
}

function GetOpts {
    
    while getopts ":n:p:b:h" arg
    do
       case $arg in
          
       n) gv_asprocess=${OPTARG}
          ;;

       p) gv_asport=${OPTARG}
          ;;

       *) HelpUsage
          ;;

       esac
    done

}

function ndcsEcho {
   echo `date` " : " "$1" "$2"  >> $MY_SQROOT/sql/scripts/ndcsbind.log
}

#
# Reads the sqconfig file for the floating ip addresses that have been configured for the mxoas process
#
function GetFloatingIpAdrress {

gv_float_external_ip=`sed -n '/begin floating_ip/,/end floating_ip/p' $MY_SQROOT/sql/scripts/sqconfig | grep -v '^#' | grep -i $gv_asprocess | grep external-ip | awk 'BEGIN{FS=";"}{split($3, ary, "="); print ary[2];}'`
gv_float_external_interface=`sed -n '/begin floating_ip/,/end floating_ip/p' $MY_SQROOT/sql/scripts/sqconfig | grep -v '^#' | grep -i $gv_asprocess | grep external-ip | awk 'BEGIN{FS=";"}{split($2, ary, "="); print ary[2];}'`
gv_float_internal_ip=`sed -n '/begin floating_ip/,/end floating_ip/p' $MY_SQROOT/sql/scripts/sqconfig | grep -v '^#' | grep -i $gv_asprocess | grep internal-ip | awk 'BEGIN{FS=";"}{split($3, ary, "="); print ary[2];}'`
gv_float_internal_interface=`sed -n '/begin floating_ip/,/end floating_ip/p' $MY_SQROOT/sql/scripts/sqconfig | grep -v '^#' | grep -i $gv_asprocess | grep internal-ip | awk 'BEGIN{FS=";"}{split($2, ary, "="); print ary[2];}'`

gv_float_external_mask=`/sbin/ip addr show $gv_float_external_interface | grep "inet .*$gv_float_external_interface\$" | awk '{print $2}' | cut -d'/' -f2`
gv_float_internal_mask=`/sbin/ip addr show $gv_float_internal_interface | grep "inet .*$gv_float_internal_interface\$" | awk '{print $2}' | cut -d'/' -f2`

ndcsEcho "reading sqconfig file for floating ip configuration for $gv_asprocess "

if [ -z $gv_float_external_ip ]; then
   gv_externalip_set=0
   ndcsEcho "no floating external ip address has been set in the sqconfig file"
else
   ndcsEcho "floating external ip address is: " "$gv_float_external_ip/$gv_float_external_mask"
   ndcsEcho "floating external interface  is: " "$gv_float_external_interface"
fi

if [ -z $gv_float_internal_ip ]; then
   gv_internalip_set=0
   ndcsEcho "no floating internal ip address has been set in the sqconfig file"
else
   ndcsEcho "floating internal ip address is: " "$gv_float_internal_ip/$gv_float_internal_mask"
   ndcsEcho "floating internal interface  is: " "$gv_float_internal_interface"
fi

if  [ -z $gv_float_external_ip ] &&  [ -z $gv_float_internal_ip ] ; then
   ndcsEcho "No floating internal or external ip address is set for process $gv_asprocess"
   exit $gv_ok
fi

}

function check_node {
	 ndcsEcho "checking node $1"
    for myinterface in `pdsh -N -w $1 ip link show|awk -F': ' '/^[0-9]+:.*/ {print $2;}'`; do
		  ip_output=$(pdsh -N -w $1 ip addr show $myinterface)
		  if [ $gv_externalip_set -eq 1 -a $external_only -eq 1 ]; then
				myifport=`echo "$ip_output" | grep $gv_float_external_ip`
				status=$?
				if [ $status -eq 0 ]; then
					 tempinterface=`echo $gv_float_external_interface:$gv_asport`
					 
	            # check if another interface is bound to this virtual ip address
					 echo "$myifport" | grep "$tempinterface"  > /dev/null
					 if [ $? -eq 1 -o "$1" != "$gv_myhostname" ]; then
						  unbindip=`echo "$myifport"|awk '{print $2}'`
						  unbindlb=`echo "$myifport"|awk '{print $NF}'`
						  ndcsEcho "external ip $gv_float_external_ip is already in use on node $1 bound to interface $myinterface($unbindlb) - unbind..."
						  ndcsEcho "pdsh -S -w $1 sudo ip addr del $unbindip dev $myinterface label $unbindlb"
						  pdsh -S -w $1 sudo ip addr del $unbindip dev $myinterface label $unbindlb

						  status=$?
						  if [ $status -ne 0 ]; then
								ndcsEcho "failed - status is $status"
								exit $gv_error
						  fi
					 else
						  ndcsEcho "external ip $gv_float_external_ip is already bound to $myinterface on node $1 - skip unbind"
					 fi # endif node+name match
				fi # endif looking for external ip
		  fi #endif checking external ip is set or not
		 #check if internal ip is in use
		  if [ $gv_internalip_set -eq 1 -a $internal_only -eq 1 ]; then
				myifport=`echo "$ip_output" |  grep $gv_float_internal_ip`
				status=$?
				if [ $status -eq 0 ]; then
					 tempinterface=`echo $gv_float_internal_interface:$gv_asport`

               # check if another interface is bound to this virtual ip address
					 echo "$myifport" | grep "$tempinterface"  > /dev/null
					 if [ $? -eq 1 -o "$1" !=  "$gv_myhostname" ]; then
						  unbindip=`echo "$myifport"|awk '{print $2}'`
						  unbindlb=`echo "$myifport"|awk '{print $NF}'`
						  ndcsEcho "internal ip $gv_float_internal_ip is already in use on node $1 bound to interface $myinterface($unbindlb) - unbind..."
						  ndcsEcho "pdsh -S -w $1 sudo ip addr del $unbindip dev $myinterface label $unbindlb"
						  pdsh -S -w $1 sudo ip addr del $unbindip dev $myinterface label $unbindlb

						  status=$?
						  if [ $status -ne 0 ]; then
								ndcsEcho "failed - status is $status"
								exit $gv_error
						  fi
					 else
						  ndcsEcho "internal ip $gv_float_internal_ip is already bound to $myinterface on node $1 - skip unbind"
					 fi # endif node+name match
				fi # endif looking for external ip
		  fi #endif checking external ip is set or not
    done
}

function Check_VirtualIP_InUse_Unbind {
	 ndcsEcho "check all nodes to see if external/internal virtual ip address is in use and unbind if necessary"
	 mynode=""
	 allNodes="-a"
	 
	#check if external ip is in use
    ndcsEcho "check all nodes $allNodes"
    externalNodes=`pdsh $allNodes ip addr show | grep $gv_float_external_ip | awk -F' ' '/^.+:[[:space:]]+.*/ {print $1;}' | cut -d':' -f1 | sed '/^$/d'`
    if [ ! -z "$externalNodes" ]; then
		  ndcsEcho "find possible node `echo $externalNodes`"
		  external_only=1
		  internal_only=0
		  for mynode in $externalNodes; do
				check_node $mynode
		  done
    fi
    internalNodes=`pdsh $allNodes ip addr show | grep $gv_float_internal_ip | awk -F' ' '/^.+:[[:space:]]+.*/ {print $1;}' | cut -d':' -f1 | sed '/^$/d'`
    if [ ! -z "$internalNodes" ]; then
		  ndcsEcho "find possible node `echo $internalNodes`"
		  external_only=0
		  internal_only=1
		  for mynode in $internalNodes; do
				check_node $mynode
		  done

    fi

    ndcsEcho "checks completed"
}

function BindFloatIp {

# bind the floating external ip
if [ $gv_externalip_set -eq 1 ]; then
   ndcsEcho "Binding external ip $gv_float_external_ip on node $gv_myhostname"
   bcast=`/sbin/ip addr show $gv_float_external_interface | grep "inet .*$gv_float_external_interface\$" | awk '{print $4}'`
   mask=`/sbin/ip addr show $gv_float_external_interface | grep "inet .*$gv_float_external_interface\$" | awk '{print $2}' | cut -d'/' -f2`
	
   /sbin/ip addr show| grep 'inet [^[:space:]]\+ '| awk '{print $2}'| sed -e 's/\/.*//'|grep $gv_float_external_ip > /dev/null
   status=$?
   if [ $status -eq 0 ]; then
      ndcsEcho "external ip is already bound on node $gv_myhostname - skip bind step"
   else
      ndcsEcho "sudo /sbin/ip addr add $gv_float_external_ip/$mask broadcast $bcast dev $gv_float_external_interface label $gv_float_external_interface:$gv_asport"
      sudo ip addr add $gv_float_external_ip/$mask broadcast $bcast dev $gv_float_external_interface label $gv_float_external_interface:$gv_asport >> $MY_SQROOT/sql/scripts/ndcsbind.log
      status=$?
      if [ $status -ne 0 ]; then
       ndcsEcho "failed - status is $status"
       exit $gv_error
      fi
      ndcsEcho "sudo /sbin/arping -U -w 30 -I $gv_float_external_interface $gv_float_external_ip"
      sudo /sbin/arping -U -w 3 -c 3 -I $gv_float_external_interface $gv_float_external_ip >> $MY_SQROOT/sql/scripts/ndcsbind.log 2>&1
      if [ $status -ne 0 ]; then
       ndcsEcho "failed - status is $status"
       exit $gv_error
      fi
   fi
fi


# bind the floating internal ip
if [ $gv_internalip_set -eq 1 ]; then
   ndcsEcho "Binding internal ip $gv_float_internal_ip on node $gv_myhostname"
   bcast=`/sbin/ip addr show $gv_float_internal_interface | grep "inet .*$gv_float_internal_interface\$" | awk '{print $4}'`
   mask=`/sbin/ip addr show $gv_float_internal_interface | grep "inet .*$gv_float_internal_interface\$" | awk '{print $2}' | cut -d'/' -f2`

	/sbin/ip addr show| grep 'inet [^[:space:]]\+ '| awk '{print $2}'| sed -e 's/\/.*//'|grep $gv_float_internal_ip > /dev/null
   status=$?
   if [ $status -eq 0 ]; then
      ndcsEcho "internal ip is already bound on node $gv_myhostname - skip bind step"
   else
      ndcsEcho "sudo /sbin/ip addr add $gv_float_internal_interface/$mask broadcast $bcast dev $gv_float_internal_ip label $gv_float_internal_interface:$gv_asport"
		sudo ip addr add $gv_float_internal_ip/$mask broadcast $bcast dev $gv_float_internal_interface label $gv_float_internal_interface:$gv_asport >> $MY_SQROOT/sql/scripts/ndcsbind.log
      status=$?
      if [ $status -ne 0 ]; then
       ndcsEcho "failed - status is $status"
       exit $gv_error
      fi
   fi
fi
}

#
# Checks if we have permissions to execute the ip and arping commands
# (it needs to be set in the /etc/sudoers file)
#
CheckSudo()
{

rm $MY_SQROOT/sql/scripts/ndcsbind.tmp > /dev/null 2>&1
touch $MY_SQROOT/sql/scripts/ndcsbind.tmp
sudo -l -S 1> $MY_SQROOT/sql/scripts/ndcsbind.tmp 2>&1  < $MY_SQROOT/sql/scripts/ndcsbind.tmp

grep "/sbin/ip[[:space:]].*" $MY_SQROOT/sql/scripts/ndcsbind.tmp > /dev/null
status=$?

if [ $status -ne 0 ]; then
   ndcsEcho "ip command is not on the sudo list"
   rm $MY_SQROOT/sql/scripts/ndcsbind.tmp
   exit $gv_error
fi

grep arping $MY_SQROOT/sql/scripts/ndcsbind.tmp > /dev/null
status=$?
if [ $status -ne 0 ]; then
   ndcsEcho "arping command is not on the sudo list"
   rm $MY_SQROOT/sql/scripts/ndcsbind.tmp
   exit $gv_error
fi
rm $MY_SQROOT/sql/scripts/ndcsbind.tmp

}

#
# validate the environment and parameters 
#
ValidateParams()
{

# check if we're on a cluster
if [ -z $CLUSTERNAME ]; then
   ndcsEcho "script should only be run on clusters"
   exit $gv_warn
fi

if [[ ${gv_asprocess:0:1} != "$" ]]; then
    ndcsEcho
    ndcsEcho "Please specify a valid process name ex: '\\\$MXOAS' "
    Usage
    exit $gv_error
fi

if [ $gv_asport -eq 0 ]; then
    ndcsEcho
    ndcsEcho "Please specify port number."
    Usage
    exit $gv_error
fi


}

SaveNDCSPort()
{
   echo $gv_asport 2>/dev/null > $MY_SQROOT/sql/scripts/.ndcsport$gv_asprocess
}

#########################################################
# MAIN portion of ndcsbind begins here
#########################################################

gv_asprocess=""
gv_asport=0

gv_ok=0
gv_warn=1
gv_error=-1

gv_externalip_set=1
gv_internalip_set=1

gv_myhostname=`hostname | cut -d'.' -f1`

GetOpts $1 $2 $3 $4 $5 $6 $7 $8 $9

ndcsEcho "ndcsbind invoked with parameters -n $gv_asprocess -p $gv_asport"


ValidateParams
CheckSudo
GetFloatingIpAdrress
Check_VirtualIP_InUse_Unbind
BindFloatIp

SaveNDCSPort

exit $gv_ok
