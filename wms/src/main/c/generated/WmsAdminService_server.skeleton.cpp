// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "WmsAdminService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::trafodion::wms::thrift;

class WmsAdminServiceHandler : virtual public WmsAdminServiceIf {
 public:
  WmsAdminServiceHandler() {
    // Your initialization goes here
  }

  int64_t ping(const int64_t timestamp) {
    // Your implementation goes here
    printf("ping\n");
  }

  void addStream(const Stream& stream) {
    // Your implementation goes here
    printf("addStream\n");
  }

  void alterStream(const Stream& stream) {
    // Your implementation goes here
    printf("alterStream\n");
  }

  void deleteStream(const Stream& stream) {
    // Your implementation goes here
    printf("deleteStream\n");
  }

  void stream(StreamResponse& _return) {
    // Your implementation goes here
    printf("stream\n");
  }

  void addRule(const Rule& rule) {
    // Your implementation goes here
    printf("addRule\n");
  }

  void alterRule(const Rule& rule) {
    // Your implementation goes here
    printf("alterRule\n");
  }

  void deleteRule(const Rule& rule) {
    // Your implementation goes here
    printf("deleteRule\n");
  }

  void rule(RuleResponse& _return) {
    // Your implementation goes here
    printf("rule\n");
  }

  void workload(WorkloadResponse& _return) {
    // Your implementation goes here
    printf("workload\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<WmsAdminServiceHandler> handler(new WmsAdminServiceHandler());
  shared_ptr<TProcessor> processor(new WmsAdminServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

