/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WmsService_H
#define WmsService_H

#include <thrift/TDispatchProcessor.h>
#include "WmsService_types.h"

namespace trafodion { namespace wms { namespace thrift {

class WmsServiceIf {
 public:
  virtual ~WmsServiceIf() {}
  virtual int64_t ping(const int64_t timestamp) = 0;
  virtual void writeread(Response& _return, const Request& request) = 0;
};

class WmsServiceIfFactory {
 public:
  typedef WmsServiceIf Handler;

  virtual ~WmsServiceIfFactory() {}

  virtual WmsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WmsServiceIf* /* handler */) = 0;
};

class WmsServiceIfSingletonFactory : virtual public WmsServiceIfFactory {
 public:
  WmsServiceIfSingletonFactory(const boost::shared_ptr<WmsServiceIf>& iface) : iface_(iface) {}
  virtual ~WmsServiceIfSingletonFactory() {}

  virtual WmsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WmsServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<WmsServiceIf> iface_;
};

class WmsServiceNull : virtual public WmsServiceIf {
 public:
  virtual ~WmsServiceNull() {}
  int64_t ping(const int64_t /* timestamp */) {
    int64_t _return = 0;
    return _return;
  }
  void writeread(Response& /* _return */, const Request& /* request */) {
    return;
  }
};

typedef struct _WmsService_ping_args__isset {
  _WmsService_ping_args__isset() : timestamp(false) {}
  bool timestamp;
} _WmsService_ping_args__isset;

class WmsService_ping_args {
 public:

  WmsService_ping_args() : timestamp(0) {
  }

  virtual ~WmsService_ping_args() throw() {}

  int64_t timestamp;

  _WmsService_ping_args__isset __isset;

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  bool operator == (const WmsService_ping_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const WmsService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsService_ping_pargs {
 public:


  virtual ~WmsService_ping_pargs() throw() {}

  const int64_t* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsService_ping_result__isset {
  _WmsService_ping_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsService_ping_result__isset;

class WmsService_ping_result {
 public:

  WmsService_ping_result() : success(0) {
  }

  virtual ~WmsService_ping_result() throw() {}

  int64_t success;
  IOError io;

  _WmsService_ping_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_io(const IOError& val) {
    io = val;
  }

  bool operator == (const WmsService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const WmsService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsService_ping_presult__isset {
  _WmsService_ping_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _WmsService_ping_presult__isset;

class WmsService_ping_presult {
 public:


  virtual ~WmsService_ping_presult() throw() {}

  int64_t* success;
  IOError io;

  _WmsService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WmsService_writeread_args__isset {
  _WmsService_writeread_args__isset() : request(false) {}
  bool request;
} _WmsService_writeread_args__isset;

class WmsService_writeread_args {
 public:

  WmsService_writeread_args() {
  }

  virtual ~WmsService_writeread_args() throw() {}

  Request request;

  _WmsService_writeread_args__isset __isset;

  void __set_request(const Request& val) {
    request = val;
  }

  bool operator == (const WmsService_writeread_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const WmsService_writeread_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsService_writeread_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WmsService_writeread_pargs {
 public:


  virtual ~WmsService_writeread_pargs() throw() {}

  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsService_writeread_result__isset {
  _WmsService_writeread_result__isset() : success(false), io(false), ia(false) {}
  bool success;
  bool io;
  bool ia;
} _WmsService_writeread_result__isset;

class WmsService_writeread_result {
 public:

  WmsService_writeread_result() {
  }

  virtual ~WmsService_writeread_result() throw() {}

  Response success;
  IOError io;
  IllegalArgument ia;

  _WmsService_writeread_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  void __set_io(const IOError& val) {
    io = val;
  }

  void __set_ia(const IllegalArgument& val) {
    ia = val;
  }

  bool operator == (const WmsService_writeread_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const WmsService_writeread_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WmsService_writeread_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WmsService_writeread_presult__isset {
  _WmsService_writeread_presult__isset() : success(false), io(false), ia(false) {}
  bool success;
  bool io;
  bool ia;
} _WmsService_writeread_presult__isset;

class WmsService_writeread_presult {
 public:


  virtual ~WmsService_writeread_presult() throw() {}

  Response* success;
  IOError io;
  IllegalArgument ia;

  _WmsService_writeread_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WmsServiceClient : virtual public WmsServiceIf {
 public:
  WmsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WmsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t ping(const int64_t timestamp);
  void send_ping(const int64_t timestamp);
  int64_t recv_ping();
  void writeread(Response& _return, const Request& request);
  void send_writeread(const Request& request);
  void recv_writeread(Response& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WmsServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WmsServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WmsServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeread(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WmsServiceProcessor(boost::shared_ptr<WmsServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &WmsServiceProcessor::process_ping;
    processMap_["writeread"] = &WmsServiceProcessor::process_writeread;
  }

  virtual ~WmsServiceProcessor() {}
};

class WmsServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WmsServiceProcessorFactory(const ::boost::shared_ptr< WmsServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WmsServiceIfFactory > handlerFactory_;
};

class WmsServiceMultiface : virtual public WmsServiceIf {
 public:
  WmsServiceMultiface(std::vector<boost::shared_ptr<WmsServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WmsServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WmsServiceIf> > ifaces_;
  WmsServiceMultiface() {}
  void add(boost::shared_ptr<WmsServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t ping(const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(timestamp);
    }
    return ifaces_[i]->ping(timestamp);
  }

  void writeread(Response& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeread(_return, request);
    }
    ifaces_[i]->writeread(_return, request);
    return;
  }

};

}}} // namespace

#endif
