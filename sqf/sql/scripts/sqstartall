#!/bin/bash
#
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2009-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@
#
#
#SQ Startup all SQ subsystems.



function hms
{
  seconds=$elapsed_seconds
  hours=$((seconds / 3600))
  seconds=$((seconds % 3600))
  minutes=$((seconds / 60))
  seconds=$((seconds % 60))
  echo " $hours hour(s) $minutes minute(s) $seconds second(s)"
}




#--------------------------------------
# Desc  : Parse the sqconfig file
# Usage : GetSQcnfg
#--------------------------------------
 function GetSQcnfg {

 # Get SQ Node configuration
 TempList=`grep "^node-id=" $MY_SQROOT/sql/scripts/sqconfig | cut -d "=" -f 3 | cut -d ";" -f 1 | sort`
 i=0
 echo "Processor node names"
 for NODE in $TempList
   do
     SQNodeNames[$i]=$NODE
     echo "Node name: ${SQNodeNames[$i]} "

     ((i=i+1))

     done

 # Check that the Node names were corretly added
 NumberOfSQnodes=${#SQNodeNames[*]}
 
 # Check if floating_ip is configured or not
 FloatingIP_Config=`grep "^\s*begin floating_ip" $MY_SQROOT/sql/scripts/sqconfig | wc -l`
 if [ $FloatingIP_Config -ne 0 ] ; then
    gv_floatip=-f
    echo "Floating IP is configured." 
 else
    echo "Floating IP is not configured."
 fi

 # Get SQ connect node server
 CONN_NODE=`grep -v '^#' $MY_SQROOT/sql/scripts/sqconfig | grep -m 1 connection | sed -e "s@node-name=\(n[0-9]*\);.*@\1@" | cut -d ';' -f2`

 echo "Connect Node for startup: $CONN_NODE " 
 echo 
 sync

 }



function SeaQChecksqstart {
 ssh $CONN_NODE "$MY_SQROOT/sql/scripts/sqcheck -i 1 -d 1 > /dev/null 2>&1" 
 sq_stat=$?
 if [[ $sq_stat -eq 0 ]]; then
     echo "sqstart (seabed) environment is up."

 fi

 }






#---------------------------------
# Desc  :  Find out if SQLMX has been initialized
#         
# Usage :  SQLinitCheck
#---------------------------------
function SQLinitCheck {
 if [ -f $MY_SQROOT/export/bin$SQ_MBTYPE/sqlci ]; then 
     echo 
     sync
     rm -rf /home/$USER/SQLcheck
     unset SQLINIT
     ssh $CONN_NODE "$MY_SQROOT/export/bin$SQ_MBTYPE/sqlci -i >> SQLcheck <<EOFILE1
     SELECT count (*) from HP_SYSTEM_CATALOG.SYSTEM_DEFAULTS_SCHEMA.SYSTEM_DEFAULTS ;
     EXIT;
EOFILE1"
     
     SQLINIT=`grep "8577" /home/$USER/SQLcheck | wc -l`
     if [ $SQLINIT -ne 0 ] ; then

         echo
         echo "SQLMX has not been initialized yet" 
         echo

     else
         echo
         echo "SQLMX has been initialized" 
         echo

     fi

 fi

 }



#---------------------------------
# Desc  :  Start WMS subsystem
#         
# Usage :  StartWMS
#---------------------------------
function StartWMS {

  if [ -f $MY_SQROOT/sql/scripts/wmscheck ] ; then

         # ssh $CONN_NODE "$MY_SQROOT/sql/scripts/wmsstop" 
         echo
         ssh $CONN_NODE "$MY_SQROOT/sql/scripts/wmscheck"
         WMSstat=`echo "$?"`
         if [ $WMSstat -eq 0 ]; then
             MESSAGE="***INFO: WMS subsystem is already up"
             echo $MESSAGE
         else

             ssh $CONN_NODE "$MY_SQROOT/sql/scripts/wmsstart"
             sleep 20 
             ssh $CONN_NODE "$MY_SQROOT/sql/scripts/wmscheck"
             WMSstat=`echo "$?"`
             if [ $WMSstat -ne 0 ]; then
                 MESSAGE="***ERROR: WMS subsystem in NOT up"
                 echo $MESSAGE
                 echo "exiting.."
                 # exit 1;
             fi

         fi

        sleep 10
         
    else
         echo "ERROR *** $MY_SQROOT/sql/scripts/wmscheck NOT found. "
         echo "Cant start Workload Management Subsystem "       
         echo 
         exit 1
    fi


  }




#---------------------------------
# Desc  :  Start the MXOAS NDCS subsystem
#         
# Usage :  StartNDCS
#---------------------------------
function StartNDCS {
      
if [ -z $SQ_VIRTUAL_NODES ]; then 
       echo
       printf "Start NDCS Subsystem  (default configuration for cluster) \n"
       sync

	   if [ -e /home/dont_delete_me ]; then ## Dev Mode
		   echo "Start in Dev mode \n"
		   #
		   # get NN value from current user id
		   NN=`echo $USER | sed -e "s@[a-z]*@@"`
		   export ODBC_PORT=0
		   let ODBC_PORT=$NN*100+20000
	   else									## Customer Mode
		   echo "Start in Customer mode \n"
		   export ODBC_PORT=18650
	   fi

       echo "ODBC/JDBC Port number: $ODBC_PORT"
       echo

       echo "ssh $CONN_NODE '$MY_SQROOT/sql/scripts/ndcscheck -p' "
       ssh $CONN_NODE "$MY_SQROOT/sql/scripts/ndcscheck -p" 
       NDCSstat=`echo "$?"`
       if [ $NDCSstat -eq 0 ]; then
             MESSAGE="***INFO: NDCS subsystem is already up"
             echo $MESSAGE
       else

             echo "ssh $CONN_NODE '$MY_SQROOT/sql/scripts/ndcsstart -n '\\$MXOAS' -p $ODBC_PORT $gv_floatip' "
             ssh $CONN_NODE "$MY_SQROOT/sql/scripts/ndcsstart -n '\$MXOAS' -p $ODBC_PORT $gv_floatip" 

             sleep 30
             ssh $CONN_NODE "$MY_SQROOT/sql/scripts/ndcscheck -p"
             NDCSstat=`echo "$?"`
             if [ $NDCSstat -ne 0 ]; then
                  MESSAGE="***ERROR: NDCS subsystem in NOT up"
                  echo $MESSAGE
                  echo "exiting.."
                  exit 1;
             fi

       fi

   # else customer config - non-shared hardware
   else 
       echo
       printf "Start NDCS Subsystem (Workstation) \n"
       sync
       ODBC_PORT=18650
	  
       echo "ODBC/JDBC Port number: $ODBC_PORT"
       echo
       echo "ssh $CONN_NODE '$MY_SQROOT/sql/scripts/ndcscheck -p' "
       ssh $CONN_NODE "$MY_SQROOT/sql/scripts/ndcscheck -p" 
       NDCSstat=`echo "$?"`
       if [ $NDCSstat -eq 0 ]; then
            MESSAGE="***INFO: NDCS subsystem is already up"
            echo $MESSAGE
            
       else

            echo "ssh $CONN_NODE '$MY_SQROOT/sql/scripts/ndcsstart -n '\$MXOAS' -p $ODBC_PORT $gv_floatip'  "
            ssh $CONN_NODE "$MY_SQROOT/sql/scripts/ndcsstart -n '\$MXOAS' -p $ODBC_PORT $gv_floatip" 
            sleep 30
            ssh $CONN_NODE "$MY_SQROOT/sql/scripts/ndcscheck -p"
            NDCSstat=`echo "$?"`
            if [ $NDCSstat -ne 0 ]; then
                MESSAGE="***ERROR: NDCS subsystem in NOT up"
                echo $MESSAGE
                echo "exiting.."
                exit 1;
            fi
 
       fi

   fi


  }










#########################################################
# MAIN portion of sqstartall begins here
#########################################################

gv_floatip=

DATE=`date +%d%b%Y-%T | tr ':' '_'`
STARTtime=$(date +%s)
myworkingdir=`pwd`
cd $HOME; . .bashrc
cd $myworkingdir

if [ ! -z $MY_SQROOT ]; then
    cd $MY_SQROOT/sql/scripts
else
    echo
    echo "The MY_SQROOT environment variable does not exist."
    echo "Please ensure sqenv.sh has been sourced, and re-run sqstart."
    echo
    exit 1;
fi

if [[ -z $SQSCRIPTS_DIR ]]; then
    SQSCRIPTS_DIR=$MY_SQROOT/sql/scripts
fi

SQLOG_DIR=$MY_SQROOT/logs
StartAll_Log=$SQLOG_DIR/startall-${DATE}.log


 echo "Log file will be written to: $StartAll_Log "
 echo
 echo "Get the SQ instance configuration information"
 date
 GetSQcnfg $StartAll_Log


 echo
 echo "Starting SQ infrastructure processes"
 date
 ssh $CONN_NODE "cd $MY_SQROOT/sql/scripts ; $MY_SQROOT/sql/scripts/sqstart -r " >> $StartAll_Log

  

 echo
 echo "Checking SQ infrastructure processes"
 date
 SeaQChecksqstart >> $StartAll_Log



 echo
 echo "Check to see if SQMX subsystem has been initialized "
 date
 sync
 if [ $sq_stat -eq 0 ] ; then
     SQLinitCheck >> $StartAll_Log

 else
     MESSAGE="***ERROR: SQ environment is NOT available"
     echo $MESSAGE
     echo "exiting.."
     exit 1;
 fi


 echo
 echo "Start Workload Management Subsystem  WMS "
 date
 sync
 if [ $SQLINIT -eq 0 ] ; then

     StartWMS >> $StartAll_Log

 else
     echo "ERROR *** Make sure the SQLMX has been properly installed before continuing" >> $StartAll_Log
     echo "exiting.."
     exit 1
        
 fi



 echo
 echo "Start NDCS Subsystem   "
 date
 sync
 ssh $CONN_NODE "$MY_SQROOT/sql/scripts/wmscheck" >> $StartAll_Log
 if [ $? -ne 0 ]; then
     MESSAGE="***WARNING: WMS subsystem in NOT up"
     echo $MESSAGE
     # exit 1;

 else
  
    if [ -f $MY_SQROOT/sql/scripts/ndcscheck ] ; then

       StartNDCS >> $StartAll_Log

       sleep 10
       ssh $CONN_NODE "$MY_SQROOT/sql/scripts/ndcscheck -p"
       echo


    else
        echo "WARNING *** $MY_SQROOT/sql/scripts/ndcscheck NOT found. "
        echo "Cant start NDCS Subsystem "
        echo
    fi

 fi

echo
echo "Start BDR Subsystem   "
date
sync
$MY_SQROOT/sql/scripts/bdrstart >> $StartAll_Log
if [ $? -ne 0 ]; then
    MESSAGE="***WARNING: BDR subsystem is NOT up"
    echo $MESSAGE
fi

echo
STOPtime=$(date +%s)
elapsed_seconds=$(( $STOPtime - $STARTtime))
printf "Total startup time " | tee -a $StartAll_Log
hms  "$elapsed_seconds" | tee -a $StartAll_Log
echo



exit 

