#!/bin/bash
#
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2009-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@
#

# Install to directory specified ($MY_SQROOT/spcert).   We must have $MY_SQROOT passed here, 
# because during cluster install $MY_SQROOT is not set as part of the login on the nodes where
# this is run.   We also cannot put the certificates in $MY_SQROOT/seapilot because they will
# get overwritten when the seapilot directory is provisioned later on.
CERTDIR=$1/spcert
SERVER_PASS="sesesese"

if [[ $2 -eq 1 ]]; then 
  # Wildcarded DNS name.
  CERT_NAME=$(/sbin/ip addr show | grep "inet " | grep -v "inet 172" | grep -v "inet 127" | head -n 1 | cut -d"/" -f1 | tr -s ' ' ' ' | cut -d" " -f3 | nslookup | grep "name =" | cut -d"=" -f2 | cut -d" " -f2) # DNS name
  # If cert name not found,may be different nslookup format
  if [[ "$CERT_NAME" = "" ]]; then
  CERT_NAME=$(/sbin/ip addr show | grep "inet " | grep -v "inet 172" | grep -v "inet 127" | head -n 1 | cut -d"/" -f1 | tr -s ' ' ' ' | cut -d" " -f3 | nslookup | grep "Name:" | cut -d":" -f2) # DNS name
  fi
  # Get rid of trailing period if it exists.
  if [[ "${CERT_NAME:${#CERT_NAME}-1:${#CERT_NAME}}" = "." ]]; then
    CERT_NAME="${CERT_NAME:0:${#CERT_NAME}-1}"
  fi

  # Change CERT_NAME to wildcard
  CERT_NAME="*."$(echo $CERT_NAME | cut -d"." -f2-)
else
  CERT_NAME=$(uname -n)
fi

echo "Creating certificate named $CERT_NAME for Live Feed."

# Create the server certificate dB with a self signed certificate.
rm -fr ${CERTDIR}/*

mkdir -p $CERTDIR 2>/dev/null # May already exist.
cd $CERTDIR

# Create the server dB for EFB
mkdir efb_server_db
touch ${CERTDIR}/efb_server_db/pfile
chmod 600 ${CERTDIR}/efb_server_db/pfile
echo $SERVER_PASS > ${CERTDIR}/efb_server_db/pfile
# Create the server dB using the password file.
certutil -N -d ${CERTDIR}/efb_server_db -f ${CERTDIR}/efb_server_db/pfile >/dev/null 2>&1
if [[ $? -ne 0 ]]; then
  echo "Error.  certutil -N failed with $?."
  exit
fi

echo "y" > srv_input
echo "0" >> srv_input
echo "n" >> srv_input  

# Create self-signed certificate valid for 12 months with 2048 bits
dd bs=256 count=1 if=/dev/urandom of=noise >/dev/null 2>&1 # Create a noise file with random values.
cat srv_input | certutil -S -d efb_server_db -n "$CERT_NAME" -s "CN=$CERT_NAME,o=Hewlett-Packard Company,l=Cupertino,st=CA,c=US" -g 2048 -v 12 -t "CT,," -m 100 -x -2 -f efb_server_db/pfile -z noise >/dev/null 2>&1 
if [[ $? -ne 0 ]]; then
  echo "Error.  certutil failed with $?."
  exit
fi
rm noise srv_input

# Create public key.
certutil -L -d efb_server_db -n "$CERT_NAME" -a -o efb_server_db/server.crt -f efb_server_db/pfile >/dev/null 2>&1

echo "Finished creating certificates."
