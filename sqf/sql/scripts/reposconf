#!/usr/bin/perl
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2013-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

use POSIX;
use Net::Ping;

my $SQROOT = "";
my $instType = "";
my $nodePort = "";
my @userNodes = ();
my $sqconfig = "";
my $userinst = "";
my $GETQPIDPORTS_UTIL = "";
my $SEAPILOT_CONFIG = "";

## command line for instance type
sub getInstanceType {
    my $text = "type of instance[normal(default)|user|management]?";
    my $res = "normal";
    print $text;
    chomp($line = <STDIN>);
    while( ($line ne '') && ($line ne 'normal') && ($line ne 'user') && ($line ne 'management') ) {
        print $text;
        chomp($line = <STDIN>);
    }

    if($line eq '') {
        $res = "normal";
    } else {
        $res = $line;
    }
    $instType = $res;
}

## get user name if this instance is 'management'
sub getNodePort {
    my $text = "User Instance node port:";
    my $res = "";
    my $good = "false";
    until($good eq 'true') {
        print $text;
        chomp($line = <STDIN>);
        if( $line + 0 > 0) {
            $good = "true";
        }
        if($good eq 'false') {
            print "  $line is not a valid port number.\n";
        }
    }
    $nodePort = $line + 0;
}

## check if user hosts are valid
sub checkNodes {
    my (@nodes) = (@_);
    my $index=0;
    my $good = "";
    my $p = Net::Ping->new();
    for($index=0; $index<scalar(@nodes) && $p->ping($nodes[$index],2); $index++) {
    }
    if($index < scalar(@nodes)) {
        $good = $nodes[$index];
    }
    $good;
}

## get user hosts if this instance is 'management'
sub getUserNodes {
    my $text = "User Instance node list:";
    my $good = "1";
    my $line = "";
    while($line eq '' || $good) {
        print $text;
        chomp($line = <STDIN>);
        $_ = $line;
        s/,/ /g;
        @userNodes = split / /;
        if(scalar(@userNodes)) {
            $good = &checkNodes(@userNodes);
            if($good) {
                print "  Cannot access to this user host: $good.\n";
            }
        }
    }
}

## modify sqconfig
sub addInstanceTypeToConfig {
    chomp(my $timestamp = `date +%N`);
    my $tmpfile = "$SQROOT/sql/scripts/sqconfig.tmp.${timestamp}";
    open OLDCONF, "<$sqconfig";
    open NEWCONF, ">$tmpfile";
    my $found = '0';
    while(<OLDCONF>)
    {
        if ($found eq '1') {
            if(/^begin instance/) {
                $_ = <OLDCONF>;
                until(/^end instance/) {
                    $_ = <OLDCONF>;
                }
            } else {
                print NEWCONF $_;
            }
        } else {
            if(/^begin instance/) {
                $found = '1';
                $_ = <OLDCONF>;
                until(/^end instance/) {
                    $_ = <OLDCONF>;
                }
                print NEWCONF "begin instance\n";
                print NEWCONF "type $instType\n";
                print NEWCONF "end instance\n";
            } elsif(/^begin tmase/) {
                ## put instance section before tmase
                print NEWCONF "\nbegin instance\n";
                print NEWCONF "type $instType\n";
                print NEWCONF "end instance\n\n";
                print NEWCONF $_;
                $found = 1;
            }
            else {
                print NEWCONF $_;
            }
        }
    }
    close OLDCONF;
    close NEWCONF;
    #system "rm $sqconfig";
    system "mv $tmpfile $sqconfig";
}

## base function to get node locations for UNCs
sub getNodesForUNC {
    my $cmd = "$SEAPILOT_CONFIG --nodes=$_[0] -$_[1] -token";
    chomp(my $outdata = `$cmd 2>/dev/null`);
    if(WIFEXITED($?) && (WEXITSTATUS($?) != 0)) {
        print "The $SEAPILOT_CONFIG operation returned an error: $?.\n";
        print "Exiting..\n";
        exit 1;
    }
    my (@datafields) = split "\t", $outdata;
}

## generate event UNC
sub genEventUNC {
    my (@datafields) = &getNodesForUNC( scalar(@userNodes), "event");
    my $val = "";
    my $broker = "";
    my $output = "";
    for(my $i=0; $i < scalar(@datafields); $i+=2) {
        $_ = $datafields[$i+1];
        s/\(//;
        s/\)//;
        $val = $_;
        if ($datafields[$i] =~ /^Event Broker/) {
            $broker = $val;
        } elsif ($datafields[$i] =~ /^Associated UNC Event Brokers/ ) {
            my @associated = split /,/, $val;
            if($output) {
                $output .= ",";
            }
            $output .= $userNodes[$broker] . ":" . scalar(@associated);
        }
    }
    print USER "eventbrokeriplist=", $output, "\n";
}

## generate performance UNC
sub genPerformanceUNC {
    my (@datafields) = &getNodesForUNC( scalar(@userNodes), "performance");
    my $val = "";
    my $broker = "";
    my $output = "";
    for(my $i=0; $i < scalar(@datafields); $i+=2) {
        $_ = $datafields[$i+1];
        s/\(//;
        s/\)//;
        $val = $_;
        if ($datafields[$i] =~ /^Performance Broker/) {
            $broker = $val;
        } elsif ($datafields[$i] =~ /^Associated UNC Performance Brokers/ ) {
            my @associated = split /,/, $val;
            if($output) {
                $output .= ",";
            }
            $output .= $userNodes[$broker] . ":" . scalar(@associated);
        }
    }
    print USER "perfbrokeriplist=", $output, "\n";
}

## generate health UNC
sub genHealthUNC {
    my (@datafields) = &getNodesForUNC( scalar(@userNodes), "health");
    my $val = "";
    my $broker = "";
    my $output = "";
    for(my $i=0; $i < scalar(@datafields); $i+=2) {
        $_ = $datafields[$i+1];
        s/\(//;
        s/\)//;
        $val = $_;
        if ($datafields[$i] =~ /^Health and State Broker/) {
            $broker = $val;
        } elsif ($datafields[$i] =~ /^Associated UNC Health and State Brokers/ ) {
            my @associated = split /,/, $val;
            if($output) {
                $output .= ",";
            }
            $output .= $userNodes[$broker] . ":" . scalar(@associated);
        }
    }
    print USER "healthbrokeriplist=", $output, "\n";
}

## generate detailed config for user instance
sub genInstDetails {
    open USER, ">$userinst";
    print USER "begin instance\n";

## generate UNC list
    &genEventUNC;
    &genPerformanceUNC;
    &genHealthUNC;

## get base port
    print USER "baseqpidport:$nodePort\n";
    my $noden = scalar(@userNodes);
    print USER "nodenumber:$noden\n";
## hard code instance id as 1
    print USER "instanceid:1\n";
    print USER "end instance\n\n";
    close USER;
}

## pre-setup functions
sub preSetup {
    $SQROOT = $ENV{"MY_SQROOT"};
    $sqconfig = "$SQROOT/sql/scripts/sqconfig";
    $userinst = "$SQROOT/seapilot/export/conf/repository/userinstrepos.conf";
    $GETQPIDPORTS_UTIL = "$SQROOT/seapilot/scripts/getqpidports";
    $SEAPILOT_CONFIG = "$SQROOT/seapilot/scripts/operations/config/seapilot_config.pl";
}

## print help message
sub printHelp {
    print "Command options are: [normal | user | management]\n";
    print "For 'management' mode, need to specify: <user name> <node name>[,<node name>]\n";
    print "Or you can input dynamically without any options\n";
}

## copy these configurations to other nodes
sub spreadConfigs {
    my $PDCP = $ENV{"SQ_PDCP"};
    if( -e $PDCP) {
        $_=`grep '^node-id=' $sqconfig | grep -o 'node-name=.[^A-Za-z].[0-9]*' | cut -d "=" -f 2 | cut -d ";" -f 1 | sort -u`;
        my @nodeList = split /\n/;
        my $nodeText = $nodeList[0];
        for(my $i=1; $i<scalar(@nodeList); $i++) {
            $nodeText .= ",$nodeList[$i]";
        }
        my $cmd = "$PDCP -p -w $nodeText -x `uname -n` $sqconfig $sqconfig";
        system $cmd;
        if($instType eq 'management') {
            $cmd = "$PDCP -p -w $nodeText -x `uname -n` $userinst $userinst";
            system $cmd;
        }
    }
}

## main entry

## 1 presetup
&preSetup;

## 2 get necessary information
if($#ARGV == -1) {
    &getInstanceType;
    if($instType eq 'management') {
        &getNodePort;
        &getUserNodes;
    }
} else {
    if($ARGV[0] eq '-h') {
        &printHelp;
        exit(0);
    }
    $instType = $ARGV[0];
    if( $instType ne 'normal' && $instType ne 'user' && $instType ne 'management') {
        &printHelp;
        exit(1);
    }
    if( $instType eq 'management' ) {
        if( $#ARGV < 2) {
            print "For 'management' mode, need to specify: <port number> <node name>[,<node name>]", "\n";
            exit(1);
        }
        $nodePort = $ARGV[1] + 0;
        my $good = 'false';
        if($nodePort > 0) {
            $good = 'true';
        }
        if($good eq 'false') {
            print "  $ARGV[1] is not a valid port number. Exit.\n";
            exit(1);
        }
        my $tmp_nodes = $ARGV[2];
        for(my $i=3; $i<=$#ARGV; $i++) {
            $tmp_nodes .= " $ARGV[$i]";
        }
        chomp($_ = $tmp_nodes);
        s/,/ /g;
        @userNodes = split / /;
        $good = &checkNodes(@userNodes);
        if($good) {
            print "  Cannot access to this user host: $good. Exit.\n";
            exit(1);
        }
    }
}

## 3 modify/generate configs
&addInstanceTypeToConfig( "sqconfig");
if($instType eq 'management') {
    &genInstDetails;
}
&spreadConfigs;
