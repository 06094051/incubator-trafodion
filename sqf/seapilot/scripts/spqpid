#!/bin/sh
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2009-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

. $MY_SPROOT/scripts/sp_common_functions.sh

typeset ERROR_SEEN=0
typeset QPIDD="$QPID_INSTALL_DIR/sbin/qpidd"
typeset QPID_ROUTE="$QPID_INSTALL_DIR/qpid-0.5/python/commands/qpid-route"
typeset QPID_ARGS
typeset QPID_ROUTELIST="instance.# cluster.# se.# SQST_TM.# Lighthouse.#"
typeset HEAD=$(hostname)
typeset CLUSTER=0
typeset USE_INFINIBAND=0
typeset NODE_NAMES
typeset MYPORTS
typeset PID_DIR
typeset CHECK=0
typeset START=1
typeset STOP=0
typeset VERBOSE=0


typeset REQUIRED_VARS="QPID_INSTANCE_PORT QPID_NODE_PORT QPID_INSTALL_DIR"
for VAR in $REQUIRED_VARS; do
    check_env "$VAR"
done

if [[ $ERROR_SEEN -eq 1 ]]; then
   exit 1;
fi

# Get command line arguments
while getopts iep:cskvh arg; do
    case "$arg" in
      i)    USE_INFINIBAND=1;;
      e)    USE_INFINIBAND=0;;
      p)    PID_DIR="${OPTARG}";;
      c)    CHECK=1;STOP=0;START=0;;
      s)    STOP=1;CHECK=0;START=0;;
      v)    VERBOSE=1;;
      h)    print_usage;exit 1;;
      *)    print_usage;exit 1;;
    esac
done

if [[ -z "$PID_DIR" ]]; then
    PID_DIR=$HOME/.qpidd
fi

typeset HEADNODE=$(hostname -s)
if [[ -e /opt/hptc/bin/pdsh ]]; then
    CLUSTER=1
else
    CLUSTER=0
fi

if [[ $CLUSTER -eq 1 ]]; then
    if [[ $(which pdsh > /dev/null) -ne 0 ]]; then
	echo "Utility pdsh is not in your path"
	exit 1
    fi
    if [[ $(which shownode > /dev/null) -ne 0 ]]; then
	echo "Utility shownode is not in your path"
	exit 1
    fi
fi

if [[ $CLUSTER -eq 1 ]]; then
    if [[ $USE_INFINIBAND -eq 1 ]]; then
	NODE_NAMES=$(grep 'ic' /etc/hosts | awk '{print $2}' | sort -u)
    else
	NODE_NAMES=$(shownode all | sort -u)
    fi
fi

function print_broker_network_status {
    bold_message "qpid broker network status"
    printf "%s\t\t%s\t\t%s\n" "node" "port" "status"
    printf "%s\t\t%s\t\t%s\n" "-----" "-----" "-----"

    typeset COUNT=0
    for NODE in ${NODE_NAME[*]}; do
	typeset NODE_STATUS="OK"
	if [[ ${NODE_RETVAL[COUNT]} -ne 0 ]]; then
	    NODE_STATUS="DOWN"
	fi
	printf "%s\t\t%s\t\t%s\n" "${NODE_NAME[COUNT]}" "${NODE_PORT[COUNT]}" "$NODE_STATUS"
	COUNT=$(( COUNT + 1 ))
    done
}

function broker_network_dev {
    typeset ACTION=$1
    typeset CMD
    typeset COUNT=0
    typeset BROKER_STATUS=0
    typeset QPID_ARGS="--worker-threads 1 --no-data-dir --auth no --pid-dir=$PID_DIR --daemon"
    if [[ "$ACTION" = "check" ]]; then
	QPID_ARGS="--no-data-dir --auth no --pid-dir=$PID_DIR --check"
    elif [[ "$ACTION" = "stop" ]]; then
	QPID_ARGS="--pid-dir=$PID_DIR --quit"
    fi

    if [[ "$ACTION" = "start" ]]; then
	echo "Starting broker node on port $QPID_NODE_PORT"
    fi
    NODE_NAME[COUNT]=$HEADNODE
    NODE_PORT[COUNT]=$QPID_NODE_PORT
    CMD="$QPIDD --port=$QPID_NODE_PORT $QPID_ARGS"
    echo $CMD
    $CMD
    NODE_RETVAL[COUNT]=$?
    return ${NODE_RETVAL[COUNT]}
}

function broker_network_cluster {
    typeset ACTION=$1
    typeset CMD
    typeset COUNT=0
    typeset BROKER_STATUS=0
    typeset QPID_ARGS="--worker-threads 1 --no-data-dir --auth no --pid-dir=$PID_DIR --daemon"
    if [[ "$ACTION" = "check" ]]; then
	QPID_ARGS="--no-data-dir --auth no --pid-dir=$PID_DIR --check"
    elif [[ "$ACTION" = "stop" ]]; then
	QPID_ARGS="--pid-dir=$PID_DIR --quit"
    fi

    if [[ "$ACTION" = "start" ]]; then
	echo "Starting head node $HEADNODE on port $QPID_INSTANCE_PORT"
    fi
    NODE_PORT[COUNT]=$QPID_INSTANCE_PORT
    NODE_NAME[COUNT]=$HEADNODE
    CMD="$QPIDD --port $QPID_INSTANCE_PORT $QPID_ARGS"
    $CMD 1>/dev/null 2>/dev/null
    NODE_RETVAL[COUNT]=$?
    if [[ ${NODE_RETVAL[COUNT]} -ne 0 ]]; then
	BROKER_STATUS=${NODE_RETVAL[COUNT]}
    fi

    for NODE in $NODE_NAMES; do
	COUNT=$(( COUNT + 1 ))
	NODE_NAME[COUNT]=$NODE
	NODE_PORT[COUNT]=$QPID_NODE_PORT
	if [[ "$ACTION" = "start" ]]; then
	    echo "Starting broker node $NODE on port $QPID_NODE_PORT"
	fi
	CMD="pdsh -S -w $NODE export LD_LIBRARY_PATH=$QPID_INSTALL_DIR/lib:\\\$LD_LIBRARY_PATH;$QPIDD --port=$QPID_NODE_PORT $QPID_ARGS"
	$CMD 1>/dev/null 2>/dev/null
	NODE_RETVAL[COUNT]=$?
	if [[ ${NODE_RETVAL[COUNT]} -ne 0 ]]; then
	    BROKER_STATUS=${NODE_RETVAL[COUNT]}
	fi
	if [[ "$ACTION" = "start" ]]; then
	    for ROUTE in $QPID_ROUTELIST; do
		echo "    Setting broker node $NODE route $ROUTE"
		CMD="$QPID_ROUTE route add localhost:$QPID_INSTANCE_PORT $NODE:$QPID_NODE_PORT amqp.topic $ROUTE"
		$CMD
		if [[ ${NODE_RETVAL[COUNT]} -ne 0 ]]; then
		    BROKER_STATUS=${NODE_RETVAL[COUNT]}
		fi
	    done
	fi
    done
    return $BROKER_STATUS
}

typeset NODE_NAME
typeset NODE_RETVAL
typeset NODE_PORT
export PYTHONPATH="$QPID_INSTALL_DIR/qpid-0.5/python"

typeset broker_function
typeset STATUS
if [[ $CLUSTER -eq 1 ]]; then
    broker_function=broker_network_cluster
else
    broker_function=broker_network_dev
fi

$broker_function check
STATUS=$?

# If start was selected and no instance exists
if [[ $START -eq 1 && $STATUS -ne 0 ]]; then
    $broker_function start
    $broker_function check
    STATUS=$?
elif [[ $STOP -eq 1 && $STATUS -eq 0 ]]; then
    $broker_function stop
    $broker_function check
    STATUS=$?
fi

print_broker_network_status

exit $STATUS
