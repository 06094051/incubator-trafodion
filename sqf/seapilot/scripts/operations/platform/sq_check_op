#!/usr/bin/perl
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2011-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

BEGIN { push @INC, $ENV{'MY_SPROOT'} . "/scripts/sdk/perl-lib" }

package SQCheckOp;
use parent qw(HealthCheck::Operation);

use strict;
use warnings;
use POSIX;

use Common::Functions qw(:all);
use HealthCheck::Functions qw(:all);
use HealthCheck::HealthRecord;
use SeaQuest::Functions qw(:all);

use constant STR_LIMIT => 256;

__PACKAGE__->main(@ARGV) unless caller;


sub main {
    my $SQCheckOp = SQCheckOp->new();
    $SQCheckOp->run;
    print $SQCheckOp->format_output_string;
}

sub new {
    my $class = shift;
    my %args = @_;

    my $self = $class->SUPER::new(
                                    name    => 'sq_check_op',
                                    desc    => 'Check whether SQ processes are up',
                                    version => '1.0.0',
                                    %args,
                                  );
    return $self;
}

sub check {
    my $self = shift;
    my $rawtext = "";

    my $hr = HealthCheck::HealthRecord->new(
        logical_object_type => SPOBJECTTYPE_SERVICE, 
        logical_object_subtype => SPOBJECTSUBTYPE_NULL,
        logical_object_name => "SeaQuest", 
        logical_object_qual_1 => current_node_name(),
        physical_object_type => SPOBJECTTYPE_SERVICE, 
        physical_object_subtype => SPOBJECTSUBTYPE_NULL,
        physical_object_name => "SeaQuest"
    );
   
    unless (defined($SQROOT) && length($SQROOT)>0) {
        $rawtext = "THE ENVIRONMENT VARIABLE MY_SQROOT IS EMPTY";
        $hr->current_state(SPSTATE_UNKNOWN);
        $hr->current_state_raw($rawtext);
        $hr->current_health(SPHEALTH_UNKNOWN);
        $hr->current_health_raw($rawtext);
        $self->set_error(SPCHSERROR_FAILURE, $rawtext);
        $self->add_health_record($hr);
        return;
    }

    my $sqcheck = "$SQROOT/sql/scripts/sqcheck";
    my ($retval, @output) = run_cmd($sqcheck, 100);

    # The interested part of sqcheck output is about
    # the SQ processes like:
    #
    #Process         Configured      Actual      Down
    #-------         ----------      ------      ----
    #TSE             33 (P)          33 (P)      
    #DTM             4               4           
    #ASE             9 (P)           8 (P)       \$TLOG 
    #
      
    my $proc_flag = 0;
    for (@output) { 
        # The line "Process Configured Actual Down" is the sign of begining of 
        # the processes status section
        if (/Process\s+Configured\s+Actual\s+Down/) {
            $proc_flag = 1;
            next;
	}
	# Don't process further until the process section is reached
        next if(!$proc_flag);
        next if(/------/);
        # Quit parsing if the space line at end of the process status section is reached 
        last if (/^\s*$/);
        s/\(P\)//g; # Remove possible "(P)"s from "Configured" and "Actual" columns
        # Extract the values for "Process", "Configured", "Actual" and "Down" columns
        my ($proc, $configured, $actual, $down) = /([A-Z]+)\s+(\d+)\s+(\d+)\s+(.*)/; 
        my $hr = HealthCheck::HealthRecord->new(
            logical_object_type => SPOBJECTTYPE_SERVICE, 
            logical_object_subtype => SPOBJECTSUBTYPE_NULL,
            logical_object_name => "SeaQuest: $proc", 
            logical_object_qual_1 => "NONE",
            physical_object_type => SPOBJECTTYPE_SERVICE, 
            physical_object_subtype => SPOBJECTSUBTYPE_NULL,
            physical_object_name => "SeaQuest: $proc"
        );
        my $down_num = $configured - $actual;
        if ($down_num > 0) {
            if ($actual == 0) {
                $rawtext = "ALL $configured CONFIGURED $proc PROCESSES ARE DOWN: $down"; 
                $hr->current_state(SPSTATE_DOWN); 
                $hr->current_health(SPHEALTH_NOTREADY); 
            }  
            else {
	        $rawtext = "$down_num OUT OF $configured CONFIGURED $proc PROCESSES ARE DOWN: $down"; 
                $hr->current_state(SPSTATE_UP); 
                $hr->current_health(SPHEALTH_DEGRADED);
            }
            # Because of string length limit
            if (length($rawtext) >= STR_LIMIT) {
                $rawtext = substr($rawtext, 0 , STR_LIMIT-3);
                $rawtext .= "..."
            }
        }  
        else {
	    $rawtext = "ALL $configured CONFIGURED $proc PROCESSES ARE UP";
            $hr->current_state(SPSTATE_UP);
            $hr->current_health(SPHEALTH_READY);
        }
        $hr->current_state_raw($rawtext);
        $hr->current_health_raw($rawtext);
        $self->add_health_record($hr);
    }
    # sqcheck failed to produce SQ processes status report
    if (! $proc_flag) {
        $rawtext = "@output";
        $hr->current_state(SPSTATE_UNKNOWN);
        $hr->current_state_raw($rawtext);
        $hr->current_health(SPHEALTH_UNKNOWN);
        $hr->current_health_raw($rawtext);
        $self->set_error(SPCHSERROR_FAILURE, $rawtext);
        $self->add_health_record($hr);
    }
}

1;
