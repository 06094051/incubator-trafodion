#!/usr/bin/perl
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2011-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

BEGIN { push @INC, $ENV{'MY_SPROOT'} . "/scripts/sdk/perl-lib" }

package DNSCheckOp;
use parent qw(HealthCheck::Operation);

use strict;
use warnings;
use POSIX;

use Common::Functions qw(:all);
use HealthCheck::Functions qw(:all);
use HealthCheck::HealthRecord;

__PACKAGE__->main(@ARGV) unless caller;


sub main {
    my $DNSCheckOp = DNSCheckOp->new();
    $DNSCheckOp->run;
    print $DNSCheckOp->format_output_string;
}

sub new {
    my $class = shift;
    my %args = @_;

    my $self = $class->SUPER::new(
                                    name    => 'dns_check_op',
                                    desc    => 'Check the status of DNS service',
                                    version => '1.0.0',
                                    %args,
                                  );
    $self->add_arg("hostname=s", "-hostname=<domain name>\tspecify the domain name of the target server.", undef);

    return $self;
}


sub pre_check {
  my $self = shift;

  if ($self->{hostname}) {
    $self->set_arg('hostname', $self->{hostname});
  }
  
  # Validate the hostname value 
  my $hn = $self->get_arg('hostname'); 
  if (! is_valid_domain($hn)) {
    $self->log_error('Invalid --hostname: ' . $hn);
    return FAILURE;      
  }
  
  return SUCCESS;
}

sub check_dns {
    my $self = shift;
    my $hr_ref = shift;
    my $rawtext = "";

    my $hostname = $self->get_arg('hostname');
    my $cmd_dns = "/usr/bin/host -t A " . $hostname;    
  
    $hr_ref->current_state(SPSTATE_UP);
    $hr_ref->current_state_raw( "OK" );
    $hr_ref->current_health(SPHEALTH_READY);
    $hr_ref->current_health_raw( "OK" );
    
    my ($retval, @output) = run_cmd($cmd_dns, 30);
    my $output = join(' ', @output);

    if ($retval != 0) {

      if ($retval == 1) {
        $rawtext = ($output =~ /Host .*? not \s found/x)? "HOST $hostname NOT FOUND" :
                                                          "HOST $hostname NOT DEFINED";
        $hr_ref->current_state(SPSTATE_DOWN);
        $hr_ref->current_health(SPHEALTH_NOTREADY);
      }
      else {
        $rawtext = "@output";
        $hr_ref->current_state(SPSTATE_UNKNOWN);
        $hr_ref->current_health(SPHEALTH_UNKNOWN);
        $self->set_error(SPCHSERROR_FAILURE, $rawtext);
      }
      $hr_ref->current_state_raw($rawtext);
      $hr_ref->current_health_raw($rawtext);
    }
}

sub check {
    my $self = shift;

    my $hr = HealthCheck::HealthRecord->new(
        logical_object_type => SPOBJECTTYPE_SERVICE, 
        logical_object_subtype => SPOBJECTSUBTYPE_NULL,
        logical_object_name => "DNS", 
        logical_object_qual_1 => current_node_name(),
        physical_object_type => SPOBJECTTYPE_SERVICE, 
        physical_object_subtype => SPOBJECTSUBTYPE_NULL,
        physical_object_name => "DNS"
    );
    
    $self->check_dns($hr);
    $self->add_health_record($hr);
}
1;
