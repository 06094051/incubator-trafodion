#!/usr/bin/perl
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2011-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

BEGIN { push @INC, $ENV{'MY_SPROOT'} . "/scripts/sdk/perl-lib" }

package SPCheckOp;
use parent qw(HealthCheck::Operation);

use strict;
use warnings;
use POSIX;

use Common::Functions qw(:all);
use HealthCheck::Functions qw(:all);
use HealthCheck::HealthRecord;

__PACKAGE__->main(@ARGV) unless caller;


sub main {
    my $SPCheckOp = SPCheckOp->new();
    $SPCheckOp->run;
    print $SPCheckOp->format_output_string;
}

sub new {
    my $class = shift;
    my %args = @_;

    my $self = $class->SUPER::new(
                                    name    => 'sp_check_op',
                                    desc    => 'Check the status of Seapilot processes in the instance',
                                    version => '1.0.0',
                                    %args,
                                  );
    return $self;
}

sub check {
    my $self = shift;
    my $rawtext;

    my $hr = HealthCheck::HealthRecord->new(
        logical_object_type => SPOBJECTTYPE_SERVICE, 
        logical_object_subtype => SPOBJECTSUBTYPE_NULL,
        logical_object_name => "Seapilot", 
        logical_object_qual_1 => current_node_name(),
        physical_object_type => SPOBJECTTYPE_SERVICE, 
        physical_object_subtype => SPOBJECTSUBTYPE_NULL,
        physical_object_name => "Seapilot"
    );
    
    unless (defined($SPROOT) && length($SPROOT)>0) {
      $rawtext = "THE ENVIRONMENT VARIABLE MY_SPROOT IS EMPTY";
      $hr->current_state(SPSTATE_UNKNOWN);
      $hr->current_state_raw($rawtext);
      $hr->current_health(SPHEALTH_UNKNOWN);
      $hr->current_health_raw($rawtext);
      $self->set_error(SPCHSERROR_FAILURE, $rawtext);
      $self->add_health_record($hr);
      return;
    }
    my $spcheck = "$SPROOT/scripts/sp_check -noRepos -v";
    my ($retval, @output) = run_cmd($spcheck, 60);

    # sp_check is expected to produce the output containing status information
    # about the Seapilot processes like:
    #
    # Checking Proxy                     ($XDN  ): expecting   4 found   4 [ OK ]
    # Checking Proxy Registry Key                : expecting   1 found   1 [ OK ]
    # Checking Node Level Brokers        ($NLB  ): expecting   4 found   4 [ OK ]
    # Checking Event Brokers             ($ECB  ): expecting   1 found   1 [ OK ]
    #
     
    my ($proc_desc, $proc_name, $expecting, $found, $stat, $proc_info, $obj_name); 
    my $procinfo_found = 0;

    for (@output) { 

      # Extract the the process description, process name, expecting number, 
      # found number and status.  
      if (/Checking\s+(.+)\((.+)\):\s+expecting\s+(\d+)\s+found\s+(\d+)\s+\[ (.+) \]/) {
        ($proc_desc, $proc_name, $expecting, $found, $stat) = ($1, $2, $3, $4, $5);
        $procinfo_found = 1;
      }
      # For some lines, process name information may not be provided (e.g Proxy Registry Key)
      elsif (/Checking\s+(.+):\s+expecting\s+(\d+)\s+found\s+(\d+)\s+\[ (.+) \]/) {
        ($proc_desc, $expecting, $found, $stat) = ($1, $2, $3,$4);
        $procinfo_found = 1;
        $proc_name = '';
      }
      # Not the line containing process status information
      else {
        next;
      }

      # Remove any possible trailing spaces
      $proc_desc =~ s/\s*$//g;
      $proc_name =~ s/\s*$//g;

      if ($proc_name) {
        $obj_name = $proc_name;
	$proc_info = "$proc_desc ($proc_name)";
      }
      else {
        $obj_name = $proc_desc;
        $proc_info = $proc_desc;
      }

      my $hr = HealthCheck::HealthRecord->new(
          logical_object_type => SPOBJECTTYPE_SERVICE, 
          logical_object_subtype => SPOBJECTSUBTYPE_NULL,
          logical_object_name => "Seapilot: $obj_name", 
          logical_object_qual_1 => "NONE",
          physical_object_type => SPOBJECTTYPE_SERVICE, 
          physical_object_subtype => SPOBJECTSUBTYPE_NULL,
          physical_object_name => "Seapilot: $obj_name"
      );

      if ($stat eq "OK") {
        $rawtext = "ALL $expecting EXPECTED $proc_info PROCESSES ARE UP";
        $hr->current_state(SPSTATE_UP);
        $hr->current_health(SPHEALTH_READY);
      }
      else {
        my $down_num = $expecting - $found;
	if ($found > 0) {
          $rawtext = "$down_num OUT OF $expecting EXPECTED $proc_info PROCESSES ARE DOWN";
          $hr->current_state(SPSTATE_UP);
          $hr->current_health(SPHEALTH_DEGRADED);
        }
        else {
          $hr->current_state(SPSTATE_DOWN);
          $hr->current_health(SPHEALTH_NOTREADY);
          $rawtext = "ALL $expecting EXPECTED $proc_info PROCESSES ARE DOWN";
        }
      }  
      $hr->current_state_raw($rawtext);
      $hr->current_health_raw($rawtext);
      $self->add_health_record($hr);
   }
   # The sp_check script failed to produce the desired process status information
   if (! $procinfo_found) {
     $rawtext = "@output";
     $hr->current_state(SPSTATE_UNKNOWN);
     $hr->current_state_raw($rawtext);
     $hr->current_health(SPHEALTH_UNKNOWN);
     $hr->current_health_raw($rawtext);
     $self->set_error(SPCHSERROR_FAILURE, $rawtext);
     $self->add_health_record($hr);
   }
}

1;
