#!/usr/bin/perl
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2012-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

BEGIN {push @INC, $ENV{'MY_SPROOT'} . "/scripts/sdk/perl-lib" }

package dbCheckOp;
use parent qw(HealthCheck::Operation);

use strict;
use warnings;

use Common::Functions qw(:all);
use HealthCheck::Functions qw(:all);
use HealthCheck::HealthRecord;
use SeaQuest::Functions qw(:all);

use constant STR_LIMIT => 256;

__PACKAGE__->main(@ARGV) unless caller;


sub main {
  my $dbCheckOp = dbCheckOp->new();
  $dbCheckOp->run;
  print $dbCheckOp->format_output_string;
}

sub new {
  my $class = shift;
  my %args = @_;

  my $self = $class->SUPER::new(
    name    => 'db_check_op',
    desc    =>  'Check the status of the SeaQuest Database',
    version => '1.0.0',
    %args,
  );

  return $self;
}

sub pre_check {
  my $self = shift;

  return SUCCESS;
}

#
# This is the core subroutine of an operation
#
sub check_db
{
  my $self = shift;
  my $hr_ref = shift;
  my $rawtext;
  my $OPSDIR = $SPROOT . "/scripts/operations/platform";
  my $MY_SQL_FILE = $OPSDIR . "/db_check.sql";

  my $SQLCI = $SQROOT . '/export/bin' . $SQ_MBTYPE . '/sqlci';

  $hr_ref->current_state(SPSTATE_UP);
  $hr_ref->current_state_raw( "OK" );
  $hr_ref->current_health(SPHEALTH_READY);
  $hr_ref->current_health_raw( "OK" );


  # Check TM status, we only check the db if instance is up
  my $tmok = check_tm();
  if ($tmok != 1) {
    if ($tmok == 0 || $tmok == 2) {
      $rawtext = "INSTANCE NOT UP OR IS SHUTTING DOWN";
      $hr_ref->current_state(SPSTATE_DOWN);
      $hr_ref->current_health(SPHEALTH_NOTREADY);
    } else {
      $rawtext = "UNKNOWN ERROR WHEN CHECKING REGISTRY: " . $tmok;
      $hr_ref->{logical_object_qual_1} = current_node_name();
      $hr_ref->current_state(SPSTATE_UNKNOWN);
      $hr_ref->current_health(SPHEALTH_UNKNOWN);
      $self->set_error(SPCHSERROR_FAILURE, $rawtext);
    }
    $hr_ref->current_state_raw($rawtext);
    $hr_ref->current_health_raw($rawtext);
    return;
  }

  if (! -r $MY_SQL_FILE) {
    $rawtext = "$MY_SQL_FILE NOT READABLE";
    $hr_ref->{logical_object_qual_1} = current_node_name();
    $hr_ref->current_state(SPSTATE_UNKNOWN);
    $hr_ref->current_state_raw($rawtext);
    $hr_ref->current_health(SPHEALTH_UNKNOWN);
    $hr_ref->current_health_raw($rawtext);
    $self->set_error(SPCHSERROR_FAILURE, $rawtext);
    return;
  }

  my $cmd_sqlci = $SQLCI . " -i $MY_SQL_FILE";
  my ($retval, @output) = run_cmd($cmd_sqlci, 30);

  if ($retval != 0) {
    $rawtext = "@output";
    $hr_ref->{logical_object_qual_1} = current_node_name();
    $hr_ref->current_state(SPSTATE_UNKNOWN);
    $hr_ref->current_state_raw($rawtext);
    $hr_ref->current_health(SPHEALTH_UNKNOWN);
    $hr_ref->current_health_raw($rawtext);
    $self->set_error(SPCHSERROR_FAILURE, $rawtext);
  } else {
    if (! grep /1 row\(s\) selected/, @output) {
      $rawtext = "";
      my $output = join('', @output);
      $output =~ s/\n+/\n/g;
      $rawtext .= " $1" if ($output =~ /(ERROR\[\d+\] .+)>>exit/s);
      chomp $rawtext;
      if ($rawtext) {
        # Because of string length limit
        if (length($rawtext) >= STR_LIMIT) {
          $rawtext = substr($rawtext, 0 , STR_LIMIT-3);
          $rawtext .= "..."
        }
      }
      else {
        $rawtext = "SQLCI NO ROW SELECTED";
      }
      if ($rawtext =~ /syntax error/) {
        $hr_ref->{logical_object_qual_1} = current_node_name();
        $hr_ref->current_state(SPSTATE_UNKNOWN);
        $hr_ref->current_state_raw($rawtext);
        $hr_ref->current_health(SPHEALTH_UNKNOWN);
        $hr_ref->current_health_raw($rawtext);
        $self->set_error(SPCHSERROR_FAILURE, $rawtext);
      } else {
        $hr_ref->current_state(SPSTATE_DOWN);
        $hr_ref->current_state_raw($rawtext);
        $hr_ref->current_health(SPHEALTH_NOTREADY);
        $hr_ref->current_health_raw($rawtext);
      }
    }
  }
}

sub check {
  my $self = shift;

  my $hr = HealthCheck::HealthRecord->new(
    logical_object_type => SPOBJECTTYPE_SERVICE,
    logical_object_subtype => SPOBJECTSUBTYPE_NULL,
    logical_object_name => "Database",
    logical_object_qual_1 => "NONE",
    physical_object_type => SPOBJECTTYPE_SERVICE,
    physical_object_subtype => SPOBJECTSUBTYPE_NULL,
    physical_object_name => "Database"
  );

  $self->check_db($hr);
  $self->add_health_record($hr);
}
1;

