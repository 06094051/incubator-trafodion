#!/usr/bin/perl
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2012-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

BEGIN {push @INC, $ENV{'MY_SPROOT'} . "/scripts/sdk/perl-lib" }

package BondingCheckOp;
use parent qw(HealthCheck::Operation);

use strict;
use warnings;

use Common::Functions qw(:all);
use HealthCheck::Functions qw(:all);
use HealthCheck::HealthRecord;

__PACKAGE__->main(@ARGV) unless caller;

sub main {
   my $BondingCheckOp = BondingCheckOp->new();
   $BondingCheckOp->run;
   print $BondingCheckOp->format_output_string;
}

sub new {
   my $class = shift;
   my %args = @_;

   my $self = $class->SUPER::new(
      name => 'bonding_check',
      desc => 'Checks status of linux bonding interface',
      version => '1.0.0',
      %args,
   );


   return $self; 
}


#
# look into /etc/sysconfig/network-scripts to find bonding interface(s)
#
sub get_bonds {
   my $self = shift;
   
   my $prefix = "/etc/sysconfig/network-scripts/ifcfg-";
   my @bonds = glob "${prefix}bond*";

   # remove the prefix, leaving bond* only
   s/$prefix// for (@bonds);
   return @bonds;
}


sub find_bonding {
   my $self = shift;
   my $hr_ref = shift;

   my $sysdir       = '/sys/class/net';
   my @bonds        = $self->get_bonds();
   my %bonding      = ();

   if (scalar(@bonds) == 0) {
      my $rawtext = "NO IFCFG-BOND FILES FOUND IN /etc/sysconfig/network-scripts";
      $hr_ref->current_state(SPSTATE_UNKNOWN);
      $hr_ref->current_state_raw($rawtext);
      $hr_ref->current_health(SPHEALTH_UNKNOWN);
      $hr_ref->current_health_raw($rawtext);
      $self->set_error(SPCHSERROR_FAILURE, $rawtext);        
      return undef;
   }

   foreach my $bond (@bonds) {
      # get bond state
      if (open(my $BSTATE, '<', "$sysdir/$bond/operstate")) {
         chop($bonding{$bond}{status} = <$BSTATE>);
         close $BSTATE;
      } else {
         my $rawtext = "FAILED TO OPEN: $sysdir/$bond/operstate: $!";
         $hr_ref->current_state(SPSTATE_UNKNOWN);
         $hr_ref->current_state_raw($rawtext);
         $hr_ref->current_health(SPHEALTH_UNKNOWN);
         $hr_ref->current_health_raw($rawtext);
         $self->set_error(SPCHSERROR_FAILURE, $rawtext); 
         return undef;      
      }

      # get slaves
      if (open(my $SLAVES, '<', "$sysdir/$bond/bonding/slaves")) {
         my @slaves = ();
         @slaves = split m/\s+/xms, <$SLAVES>;
         close $SLAVES;      

         # get slave status
         foreach my $slave (@slaves) {
            if (open(my $STATE, '<', "$sysdir/$bond/slave_$slave/operstate")) {
               chop($bonding{$bond}{slave}{$slave} = <$STATE>);
               close $STATE;
            } else {
               my $rawtext = "FAILED TO OPEN: $sysdir/$bond/slave_$slave/operstate: $!";
               $hr_ref->current_state(SPSTATE_UNKNOWN);
               $hr_ref->current_state_raw($rawtext);
               $hr_ref->current_health(SPHEALTH_UNKNOWN);
               $hr_ref->current_health_raw($rawtext);
               $self->set_error(SPCHSERROR_FAILURE, $rawtext);
               return undef;         
            }
         }
      } else {
         my $rawtext = "FAILED TO OPEN: $sysdir/$bond/bonding/slaves: $!";
         $hr_ref->current_state(SPSTATE_UNKNOWN);
         $hr_ref->current_state_raw($rawtext);
         $hr_ref->current_health(SPHEALTH_UNKNOWN);
         $hr_ref->current_health_raw($rawtext);
         $self->set_error(SPCHSERROR_FAILURE, $rawtext);
         return undef;         
      }
   }
   return \%bonding;
}

sub check {
    my $self = shift;
    my $down_slaves;
    my $rawtext = "";
   
# Running on a workstation, bonding not an issue, return OK.
    if (is_cluster() == 0) {
        my $hr = HealthCheck::HealthRecord->new(
            logical_object_type     => SPOBJECTTYPE_SERVICE,
            logical_object_subtype  => SPOBJECTSUBTYPE_NULL,
            logical_object_name     => "Bonding", 
            logical_object_qual_1   => current_node_name(),
            physical_object_type    => SPOBJECTTYPE_SERVICE, 
            physical_object_subtype => SPOBJECTSUBTYPE_NULL,
            physical_object_name    => "Bonding"
        );
        $hr->current_state(SPSTATE_UP);
        $hr->current_state_raw( "OK - WORKSTATION" );
        $hr->current_health(SPHEALTH_READY);
        $hr->current_health_raw( "OK - WORKSTATION" );
        
        $self->add_health_record($hr);
        return;
    }

    my $hr_findbonding = HealthCheck::HealthRecord->new(
        logical_object_type     => SPOBJECTTYPE_SERVICE,
        logical_object_subtype  => SPOBJECTSUBTYPE_NULL,
        logical_object_name     => "Bonding", 
        logical_object_qual_1   => current_node_name(),
        physical_object_type    => SPOBJECTTYPE_SERVICE, 
        physical_object_subtype => SPOBJECTSUBTYPE_NULL,
        physical_object_name    => "Bonding"
    );
        
    my $bonding_ref = $self->find_bonding($hr_findbonding);
    if (!defined($bonding_ref)) {        
        $self->add_health_record($hr_findbonding);
        return;
    };

    foreach my $b (sort keys %{$bonding_ref}) {
        my $degraded_flag = 0;
        my $hr = HealthCheck::HealthRecord->new(
            logical_object_type     => SPOBJECTTYPE_SERVICE,
            logical_object_subtype  => SPOBJECTSUBTYPE_NULL,
            logical_object_name     => "Bonding: $b", 
            logical_object_qual_1   => current_node_name(),
            physical_object_type    => SPOBJECTTYPE_SERVICE, 
            physical_object_subtype => SPOBJECTSUBTYPE_NULL,
            physical_object_name    => "Bonding: $b"
        ); 
        
        $hr->current_state(SPSTATE_UP);
        $hr->current_state_raw( "OK" );
        $hr->current_health(SPHEALTH_READY);
        $hr->current_health_raw( "OK" );
    
        $down_slaves = "";
    
        if ($bonding_ref->{$b}->{status} ne 'up') {
            $rawtext = qq|BOND "$b" IS NOT UP.|;
            
            $hr->current_state(SPSTATE_DOWN);
            $hr->current_state_raw($rawtext);
            $hr->current_health(SPHEALTH_NOTREADY);
            $hr->current_health_raw($rawtext);
            
            $self->add_health_record($hr);
            next;
        }

        my %slave = map { $_ => q{} } keys %{ $bonding_ref->{$b}->{slave} };
        if (scalar keys %slave == 0) {
            $rawtext = qq|BOND "$b" HAS NO SLAVES.|;
            
            $hr->current_state(SPSTATE_DOWN);
            $hr->current_state_raw($rawtext);
            $hr->current_health(SPHEALTH_NOTREADY);
            $hr->current_health_raw($rawtext);
            
            $self->add_health_record($hr);
            next;            
        } elsif (scalar keys %slave == 1) {
            $rawtext = qq|BOND "$b" HAS ONLY ONE SLAVE.|;
            
            $hr->current_state(SPSTATE_UP);
            $hr->current_state_raw("OK");
            $hr->current_health(SPHEALTH_DEGRADED);
            $hr->current_health_raw($rawtext);
            
            $self->add_health_record($hr);
            next;     
        }

        foreach my $i (sort keys %{ $bonding_ref->{$b}->{slave} }) {
            if ($bonding_ref->{$b}->{slave}->{$i} ne 'up') {
                $degraded_flag++;
                $down_slaves .= " $i";            
            }
        }
        
        if ($degraded_flag > 0) {
            $rawtext = "IN BOND $b, THESE SLAVES ARE NOT UP:".$down_slaves.". ";
            if ($degraded_flag == 2) {
                $hr->current_state(SPSTATE_DOWN);
                $hr->current_state_raw($rawtext);
                $hr->current_health(SPHEALTH_NOTREADY);
                $hr->current_health_raw($rawtext);
            } else {
                $hr->current_health(SPHEALTH_DEGRADED);
                $hr->current_health_raw($rawtext);
            }
        }
        
        $self->add_health_record($hr);
    }
   
}

1;


