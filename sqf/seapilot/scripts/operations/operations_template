#! /usr/bin/perl -w -I /opt/hp/nv/lib/perl
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2011-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

use strict;
use 5.008000;
use warnings;
use POSIX;

# The PERL5LIB env variable isn't available to us, so we dynamically add
# $MY_SQROOT/export/lib to @INC here.
my $SQROOTLIB;
BEGIN { $SQROOTLIB = $ENV{'MY_SQROOT'} . "/export/lib"; }

use lib $SQROOTLIB;

# use library to access Vili functions
use Vili::Functions ':all';

# use library to access Vili helper routines
use Vili::Helper ':all';

# define the variables that will be passed in to the constructor
# ****CHANGE ALL XXX references to your operation name****
# ****CHANGE THE VERSION TO REFLECT THE VERSION OF YOUR SCRIPT, ELSE START AT 1.0.0****
# ****CHANGE ALL HELP TEXT TO REFLECT HOW YOUR OPERATION WORKS****
my $op = "";
my $XXX_version = "1.0.0";
my $XXX_help_text = "XXX_check is an operation that will *****CHANGE AND FILL IN VALID ARGS***

The following arguments are required:
	****Insert the information for the arguments required for this operation*****
	-YYY=??? - provides the ???

The following arguments are optional:
	****Insert the information for the optional arguments for this operation*****
	-ZZZ=??? - provides the ???
	****The following are standard arguments for every operation*****
	-verbose - gives debug information (optional)
	-list - indicates that output should be provided in human readable format; this is the default value (optional)
	-token - indicates that output should be provided in an easily parsible format (optional)
	-version - returns the version information of the operation (optional)
	-help - returns the long usage information for the operation (optional)
	-long_help - returns the man page for the operation (optional)
	";
my $XXX_long_help_text = "XXX_check

Usage: XXX_check **fill in your operation arguments*** -verbose -list -token -version -help -long_help

This operation is used to XXXXX
If there is a problem executing the check then the operation will return the value unknown(3).
If the operation succeeds and all offsets are within thresholds then the operation will return ok(0).

The following arguments are required:
	****Insert the information for the arguments required for this operation*****
	-YYY=??? - provides the ???

The following arguments are optional:
	****Insert the information for the optional arguments for this operation*****
	-ZZZ=??? - provides the ???
	****The following are standard arguments for every operation*****
	-verbose - gives debug information (optional)
	-list - indicates that output should be provided in human readable format; this is the default value (optional)
	-token - indicates that output should be provided in an easily parsible format (optional)
	-version - returns the version information of the operation (optional)
	-help - returns the long usage information for the operation (optional)
	-long_help - returns the man page for the operation (optional)
	";

# ****CHANGE TO REFLECT THE PATHS TO EXECUTABLES USED FOR YOUR OPERATION ****
my $XXX_SCRIPT = "/yadda/yadda/XXX";

#
# This sub parses the output received from $XXX_SCRIPT
# and provides it in the requested output format
# ****CHANGE THE SUBROUTINE TO FORMAT YOUR OPERATIONS DATA****
# ****CHANGE THE DATA FIELDS AND THE FORMATTING TO REFLECT HOW YOUR OPERATION WORKS****
#
sub format_output
{
my($xxxoutput) =  @_;
my $formatoutput =  "";

my %data_fields = (
	AAA => "",
	BBB => "",
	CCC => "",
);

my @printorder = qw/AAA BBB CCC/;

# ****CHANGE THE CODE BELOW TO FORMAT YOUR OPERATIONS DATA****
	# If BBB is not in our output, then treat this as error info
	if ($xxxoutput !~ /BBB/) {
		(my @errorinfo) = split (" ", $xxxoutput);
		$data_fields{BBB} = $errorinfo[0];
		$data_fields{CCC} = "UNDEFINED";
	} else {

		my @splitarray = split (';', $offset);
		$data_fields{CCC} = $splitarray[0];
	}
# ****CHANGE THE CODE ABOVE TO FORMAT YOUR OPERATIONS DATA****
		 
	# now, based on output mode, let's generate our output
	foreach my $key (@printorder) {
		if ($op->{list}) {
			$formatoutput .= "$key: $data_fields{$key}\n";
		} else {
			$formatoutput .= "$key\t$data_fields{$key}\t";
		}
			
	}

	# make sure that the token output ends with a new line terminator.
	if ($op->{token}) {
		$formatoutput .= "\n";
	}
	
	return($formatoutput);

}

############################    MAIN SCRIPT  ##########################################
# ***********
# ****CHANGE TO REFLECT YOUR OPERATION INFORMATION****
# ***********
# create new Vili instance
$op = Vili::Functions->new( 
	opname => "XXX_check",
        help_text => $XXX_help_text,
        long_help_text => $XXX_long_help_text,
	op_version => $XXX_version,

	 );


# Standard args processed by all operations and workflows
# are -verbose, -list, -token and -version
# Any additional arguments must be added
# ***********
# ****CHANGE TO REFLECT THE ARGUMENT REQUIRED BY YOUR OPERATION****
# ***********
# ****NOTE: The value for you new argument is stored in your instance****
# ****	data structure, e.g. $op->{aaa}****
# ***********
# add the aaa argument 
# but do not specify any default.  Require that it
# be passed in by the user
$op->add_args(
	arginfo => 'aaa=s',
	);

# add the bbb argument with a default
$op->add_args(
	arginfo => 'bbb=s',
	default => "1",
	);

# call the getopts function to process all of the
# arguments that were received.  If arguments are
# missing an error message will be generated
# This function will also process "help", "long_help"
# and "version" right away.
# ****NOTE: The value for your arguments are stored in your instance****
# ****	data structure, e.g. $op->{verbose}****
# ***********
$op->getopts;

# ***********
# ****CHANGE TO VALIDATE THE ADDITIONAL ARGUMENTS REQUIRED BY YOUR OPERATION****
# ****	BECAUSE LIBRARY DOESN'T KNOW WHAT YOUR DATA SHOULD LOOK LIKE****
# ***********
# At this point, all required arguments have been received
# now validate, as needed, your additional arguments
# validate the aaa provided
# ****NOTE: There are validation routines in Helper.pm to help validate****
# ****	your arguments, e.g. isvalid_IP, isvalid_integer****
# ****	Add more to this Perl module as your scripts need new routines ****
# ***********
if (! isvalid_IP($op->{aaa})) {
	my $errormsg = "Invalid aaa specified: $op->{aaa} \n";
       	$op->op_die(
		output => $errormsg,
	);
}

# validate the warning value
if (! isvalid_integer($op->{bbb})) {
	my $errormsg = "Invalid bbb value specified: $op->{bbb} \n";
       	$op->op_die(
		output => $errormsg,
	);
}

# if we want some verbose output - lets report
# all of our variable values
if ($op->{verbose}) {
	print "Opname is $op->{opname}\n";
	print "list is $op->{list}\n";
	print "token is $op->{token}\n";
	print "version is $op->{version}\n";
	print "aaa is $op->{aaa}\n";
	print "bbb is $op->{bbb}\n";
}

# ***********
# ****USE THE LOG FUNCTION, AS NECESSARY, TO PLACE INFORMATION IN THE LOG FILE****
# ****WHEN ENTERING LOG INFO, THE SEVERITY VALUES ARE DEFINED AS CONSTANTS****
# ****INFO, WARNING, ERROR****
# ***********
#$op->log(
#	severity => Vili::Functions::INFO,
#	message => "I think that this log function works.",
#	);

# let's initialize the return code variable
my $return_code = "";

# ***********
# ****CHANGE TO CALL ANY EXECUTABLE REQUIRED BY YOUR OPERATION****
# ***********
# Now perform the work of the operation
chomp(my $xxxoutput = `$xxx_SCRIPT -H $op->{aaa} -w $op->{bbb} `);

# Check for bad exit status
my $posixval = WEXITSTATUS($?);
if ($posixval != 0) {

	if ($posixval == Vili::Functions::WARNING) {
		$return_code = Vili::Functions::WARNING;
	} elsif ($posixval == Vili::Functions::CRITICAL) {
		$return_code = Vili::Functions::CRITICAL;
	} elsif ($posixval == Vili::Functions::UNKNOWN) {
		$return_code = Vili::Functions::UNKNOWN;
	} else {

		# If it is not one of the expected values, then log an error, generate an error message and exit
       		my $errormsg = "Unable to execute $xxx_SCRIPT: " . $posixval;
		$op->log(
			severity => Vili::Functions::ERROR,
			message => $errormsg,
		);
       		$op->op_exit(
			retcode => Vili::Functions::FAILURE,
			output => $errormsg,
		);
	} 
} else {
	$return_code = Vili::Functions::OK;
}

# now go format the output to be returned to the caller
my $name = $op->{opname};
my $formattedoutput = format_output($name,$xxxoutput);

$op->op_exit ( 
	retcode => $return_code,
	output => $formattedoutput,
	);

