#! /usr/bin/perl -w -I /opt/hp/nv/lib/perl
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2011-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

use strict;
use 5.008000;
use warnings;
use POSIX;

# The PERL5LIB env variable wasn't available to us, so we dynamically add
# $MY_SQROOT/export/lib to @INC here.
my $SQROOTLIB;
BEGIN { $SQROOTLIB = $ENV{'MY_SQROOT'} . "/export/lib"; }

use lib $SQROOTLIB;

# use library to access Vili functions
use Vili::Functions ':all';

# use library to access Vili helper routines
use Vili::Helper ':all';

# let's define our routing key, in case we send a publication
# and the base name of the script we use to send the publication
# ****CHANGE YOUR ROUTING KEY AS APPROPRIATE****
my $ROUTING_KEY = "os.instance.public.xxx_check";

# here is the program to call to send the publication
my $TPA_PUBLISH = "/seapilot/scripts/TPA_Publish";

# here is the base name of the program to call
# to massage the timestamps the way we need them for SeaPilot
my $SSP_TIMESTAMP = "/seapilot/scripts/ssp_providerTimestamp";

# here is the base name of the operation to call
# the running workflow must prepend the correct path
# ****CHANGE YOUR PROGRAM NAME AS APPROPRIATE****
my $xxx_OP = "/seapilot/scripts/operations/platform/xxx_peer_check";

# here are the standard values that will always be true when we run
# this xxx check, e.g. the object type is always SERVICE, etc.
# ****CHANGE THESE FIELDS AS APPROPRIATE FOR YOUR WORKFLOW ****
my %standard_values = (
	"logical_object_type" 	 	=> "210",	# SPOBJECTTYPE_SERVICE = 210
	"logical_object_subtype" 	=> "0",		# SPOBJECTSUBTYPE_NULL = 0
	"logical_object_name" 	 	=> "xxx",	
	"logical_object_qual_1" 	=> "NONE",	
	"logical_object_qual_2" 	=> "NONE",	
	"logical_object_path" 	 	=> "NONE",	
	"physical_object_type" 	 	=> "210",	# SPOBJECTTYPE_SERVICE = 210	
	"physical_object_subtype" 	=> "0",		# SPOBJECTTYPE_NULL
	"physical_object_name" 	 	=> "xxx",	
);

# labels for fields when printing list or token
# ****CHANGE THESE FIELDS AS APPROPRIATE FOR YOUR WORKFLOW ****
my @labels = qw/ info_header publication_type check_interval_sec error error_text repeated logical_object_type logical_object_subtype logical_object_name logical_object_qual_1 logical_object_qual_2 logical_object_path physical_object_type physical_object_subtype physical_object_name current_state current_state_raw previous_state previous_state_raw state_change_ts_lct state_change_ts_utc current_health current_health_raw previous_health previous_health_raw health_change_ts_lct health_change_ts_utc /;

# definitions for type of health/state publication
my $BASELINE = 0;
my $INCREMENTAL = 1;
my $MANUAL = 2;

# here are some definitions that we need from the spstate.h file
my $SPSTATE_UNKNOWN = 1;
my $SPSTATE_UP = 3;

# here are some definitions that we need from the sphealth.h file
my $SPHEALTH_UNKNOWN = 1;
my $SPHEALTH_READY = 2;
my $SPHEALTH_NOTREADY = 3;
my $SPHEALTH_ABOVEWARNING = 6;
my $SPHEALTH_ABOVEERROR = 8;

my $xxx_help_text = "xxx_peer_flow is a workflow that will *****CHANGE AND FILL IN VALID ARGS***

The following arguments are required:
	****Insert the information for the arguments required for this workflow*****
	-YYY=??? - provides the ???

The following arguments are optional:
	****Insert the information for the optional arguments for this workflow*****
	-ZZZ=??? - provides the ???
	****The following are standard arguments for every workflow*****
	-verbose - gives debug information (optional)
	-mode {interval | baseline} - defines how the workflow reports health/state information; interval indicates that only changes since the last run should be reported and baseline indicates that the health/state should always be reported; baseline is the default (optional)
	-list - indicates that output should be provided in human readable format; this is the default value (optional)
	-token - indicates that output should be provided in an easily parsible format (optional)
	-publication - indicates that the output should be provided in a publication; if neither list, token or publication is reported then the default of list is used (optional)
	-frequency=VALUE - provides the value of how often the workflow is run; if not specified a default value of 0 is used indicating that it was run manually (optional)
	-context=FILE - provides the fully qualified path of the file where the workflow should place its context file.  If the context argument is omitted, then /home/{squserid}/context/{nodeid}/{workflow}/automatic is used as the default value. (optional)
	-version - returns the version information of the operation (optional)
	-help - returns the long usage information for the operation (optional)
	-long_help - returns the man page for the operation (optional) 
	";

my $xxx_long_help_text = "xxx_peer_flow

Usage: xxx_peer_flow **fill in your operation arguments***  -verbose -mode {interval | baseline} -list -token - publication -frequency=VALUE -context=FILE -version -help -long_help

This workflow is used to determine the current state of the xxx peers on the current node.
The workflow will return the results of the check if baseline mode has been selected or if interval mode has been selected and a change in state has been determined.
If there is a problem executing the workflow then it will return a non-zero value. If the workflow succeeds then the workflow will return a successful exit(0).

The following arguments are required:
	****Insert the information for the arguments required for this workflow*****
	-YYY=??? - provides the ???

The following arguments are optional:
	****Insert the information for the optional arguments for this workflow*****
	-ZZZ=??? - provides the ???
	****The following are standard arguments for every workflow*****
	-verbose - gives debug information (optional)
	-mode {interval | baseline} - defines how the workflow reports health/state information; interval indicates that only changes since the last run should be reported and baseline indicates that the health/state should always be reported; baseline is the default (optional)
	-publication - indicates that the output should be provided in a publication; if neither list, token or publication is reported then the default of list is used (optional)
	-frequency=VALUE - provides the value of how often the workflow is run; if not specified a default value of 0 is used indicating that it was run manually (optional)
	-context=FILE - provides the fully qualified path of the file where the workflow should place its context file.  If the context argument is omitted, then /home/{squserid}/context/{nodeid}/{workflow}/automatic is used as the default value. (optional)
	-version - returns the version information of the operation (optional)
	-help - returns the long usage information for the operation (optional)
	-long_help - returns the man page for the operation (optional)
	";


###############Subroutines######################
#
# This sub parses the output received from $xxx_SCRIPT
# and puts the data in the context hash
# ****CHANGE THE SUBROUTINE TO FORMAT YOUR WORKFLOWS DATA****
# ****CHANGE THE DATA FIELDS AND THE FORMATTING TO REFLECT HOW YOUR WORKFLOW WORKS****
#
# Input: hash reference containing context info, output received from xxx operation
#
# Output: none
#
sub get_context
{
my($hashref, $xxxoutput) =  @_;

    # get rid of newline... so it is just data
    chomp($xxxoutput);

    # get rid of the token separators here, we don't
    # need them
    $xxxoutput =~ s/://g;

    # first split data by tab delimeter since
    # that is how token output is delivered
    (my @output_fields) = split ("\t", $xxxoutput);

    # put data in context hash
    my $index;
    for ($index = 0; $index < scalar(@output_fields); $index += 2) { 
	
	# and add them to the context hash
	# e.g. $hashref->{State} = "OK"
	$hashref->{$output_fields[$index]} = $output_fields[$index+1];
    }

}

#
# This sub is called to take all of the context info
# that is in the context hash and write it out to
# the context file
# ****YOU MAY NOT NEED TO CHANGE THIS SUBROUTINE AT ALL ****
#
# Input: hash reference containing context info, context file name, 
#			mode used for workflow
#
# Output: severity of problem if problem found, return code value for problem, if found, and 
#		the actual error message itself
#
sub write_context
{
my($hashref, $contextname, $mode) =  @_;
my $ret = "";  
my $severity = ();  
my $retcode = ();  
my $errormsg = ();  

    # now any pre-existing context file has been saved 
    # so lets go create one or open existing and truncate 
    # and see if there are any differences
    $ret = open (CONTEXT,">", "$contextname");
    if (!$ret) { 
	$errormsg = "Unable to open $contextname: $!";
        $severity = Vili::Functions::ERROR;
        $retcode = Vili::Functions::FAILURE;

    	return($errormsg, $severity, $retcode);
    }

    # write the data from the context file
    # we use the token as our key in our 
    # context hash 
    foreach my $key (sort keys %$hashref ) {
	
	# write output to context file
	# e.g. State: OK
	printf(CONTEXT "%s: %s\n", $key, (defined $hashref->{$key} ? $hashref->{$key} : "\t"));
    }

    $ret = close(CONTEXT);
    if (!$ret) { 
	$errormsg = "Problems closing $contextname: $!";
        $severity = Vili::Functions::ERROR;
        $retcode = Vili::Functions::FAILURE;
    }

    return($errormsg, $severity, $retcode);

}

#
# This sub obtains the information that was 
# set from our last run, which is in our 
# backup copy. An then deletes the backup copy.
# ****YOU MAY NOT NEED TO CHANGE THIS SUBROUTINE AT ALL ****
#
# Input: reference to hash structure to hold info, backup context file name
#
# Output: severity of problem if problem found, return code value for problem, if found, and 
#		the actual error message itself
#
sub get_prev_context
{
my($hash_ref, $copy_name) =  @_;

    my $ret = ();
    my $errormsg = ();
    my $severity = ();
    my $retcode = ();

    # if there is no backup context file then we have no
    # data to get -- so leave the hash in its intialized
    # state
    if (!-e $copy_name) {
    	return($errormsg, $severity, $retcode);
    }

    $ret = open(BAKCONTEXT, "<", $copy_name);
    # open returns 1 on success, 0 on failure
    if (!$ret ) {
        $errormsg = "Unable to open $copy_name: $!";
        $severity = Vili::Functions::ERROR;
        $retcode = Vili::Functions::FAILURE;

    	return($errormsg, $severity, $retcode);
    }

    # read the file contents into arrays so
    my @oldlines;

    while (<BAKCONTEXT>) {
        push(@oldlines, $_);
    }

    # now let's pull out the info from the backup 
    # context file so we can use it
    for (my $index = 0; $index < scalar(@oldlines); $index++) {
	my($token, $value) = split (":", $oldlines[$index]);
	
	# remove any trailing spaces
	chomp($token, $value);

	# remove the preceding spaces
	$value =~ s/^\s+//;

	$hash_ref->{$token} = $value;
    }

    $ret = close(BAKCONTEXT);
    if (!$ret) { 
	$errormsg = "Problems closing $copy_name: $!";
        $severity = Vili::Functions::ERROR;
        $retcode = Vili::Functions::FAILURE;
    }
    $ret = unlink $copy_name;
    if (!$ret) { 
	$errormsg = "Problems closing $copy_name: $!";
        $severity = Vili::Functions::ERROR;
        $retcode = Vili::Functions::FAILURE;
    }

    return($errormsg, $severity, $retcode);

}

#
# This sub compares the "AAA" value in the previous
# context file to the "AAA" value in the current
# context.  If they differ, then we have a state change.
# ****CHANGE THE SUBROUTINE TO COMPARE YOUR WORKFLOW CONTEXT****
# ****CHANGE THE DATA FIELDS AS NECESSARY****
# ****MAKE THIS WORK FOR YOUR WORKFLOW AND CONTEXT****
#
# Input: previous contents of context file, current contents of context file
#
# Output: a flag indicating whether a state change has occurred
#
sub compare_xxx_context
{
my($prev_hash_ref, $hash_ref) =  @_;

    my $errormsg = ();
    my $severity = ();
    my $retcode = ();

    my $has_changed = 0;

    # compare the two different param1 to see if any thing has changed
    # but first, to be safe, double check that they are both defined.
    if ( defined $hash_ref->{param1} && defined $prev_hash_ref->{param1}) {
	if ($prev_hash_ref->{param1} ne $hash_ref->{param1} ){
                $has_changed = 1;
    	}	
    } else {	
	$errormsg = "Problems accessing workflow state value in context hash";
        $severity = Vili::Functions::ERROR;
        $retcode = Vili::Functions::FAILURE;
    }	

    return($has_changed, $errormsg, $severity, $retcode);

}


#
# This sub formats the health header information
# The publication fiels are tab separated.
#
# Input: previous contents of context file, current contents of context file, 
#		the current mode, and the current frequency
#
# Output: string of data that is ready to be passed to TPA
#
sub FormatHdr
{
my($mode, $freq) =  @_;

my $publication_type;
my $output =  "";

    # using the value of mode and frequency, determine 
    # what the publication type is
    if ($mode eq "interval" ) {
    	$publication_type = $INCREMENTAL;
    } elsif (($mode eq "baseline") && ($freq == 0)) {
    	$publication_type = $MANUAL;
    } else {
    	$publication_type = $BASELINE;
    } 
    
    # based on the definition of the protobuf fields enter the data
    # add health header information
    $output .= $publication_type . "\t";
    $output .= $freq . "\t";
    # add spchs error info
    my $errorno = 0;
    $output .= $errorno . "\t";
    # NOTE: don't put on trailing tab because we
    # will do that when we assemble the publication
    my $errortext = "";
    $output .= $errortext ;   

    return($output);

}


#
# This sub formats our context data, previous context
# data and some standard values into a publication
# The publication fiels are tab separated.
# ****YOU MAY NOT NEED TO CHANGE THIS SUBROUTINE IF YOU HAVE****
# ****YOUR DATA IN THE HASH REFERENCES****
# ****CHANGE THE STANDARD_VALUES AS NECESSARY****
#
# Input: previous contents of context file, current contents of context file, 
#		the current mode, and the current frequency
#
# Output: string of data that is ready to be passed to TPA
#
sub FormatData
{
my($prev_hash_ref, $hash_ref) =  @_;

my $output =  "";

    # add standard os.xxx_check.proto information for this workflow
    $output .= (defined($standard_values{logical_object_type}) ? $standard_values{logical_object_type} : "") . "\t";
    $output .= (defined($standard_values{logical_object_subtype}) ? $standard_values{logical_object_subtype} : "") . "\t";
    $output .= (defined($standard_values{logical_object_name}) ? $standard_values{logical_object_name} : "") . "\t";
    $output .= (defined($standard_values{logical_object_qual_1}) ? $standard_values{logical_object_qual_1} : "") . "\t";
    $output .= (defined($standard_values{logical_object_qual_2}) ? $standard_values{logical_object_qual_2} : "") . "\t";
    $output .= (defined($standard_values{logical_object_path}) ? $standard_values{logical_object_path} : "") . "\t";
    $output .= (defined($standard_values{physical_object_type}) ? $standard_values{physical_object_type} : "") . "\t";
    $output .= (defined($standard_values{physical_object_subtype}) ? $standard_values{physical_object_subtype} : "") . "\t";
    $output .= (defined($standard_values{physical_object_name}) ? $standard_values{physical_object_name} : "") . "\t";

    # now add in the specifics from this run and the past run
    $output .= (defined($hash_ref->{current_state}) ? $hash_ref->{current_state} : "") . "\t";
    $output .= (defined($hash_ref->{current_state_raw}) ? $hash_ref->{current_state_raw} : "") . "\t";
    $output .= (defined($prev_hash_ref->{current_state}) ? $prev_hash_ref->{current_state} : "") . "\t";
    $output .= (defined($prev_hash_ref->{current_state_raw}) ? $prev_hash_ref->{current_state_raw} : "") . "\t";
    $output .= (defined($hash_ref->{state_change_ts_lct}) ? $hash_ref->{state_change_ts_lct} : "") . "\t";
    $output .= (defined($hash_ref->{state_change_ts_utc}) ? $hash_ref->{state_change_ts_utc} : "") . "\t";
    $output .= (defined($hash_ref->{current_health}) ? $hash_ref->{current_health} : "") . "\t";
    $output .= (defined($hash_ref->{current_health_raw}) ? $hash_ref->{current_health_raw} : "") . "\t";
    $output .= (defined($prev_hash_ref->{current_health}) ? $prev_hash_ref->{current_health} : "") . "\t";
    $output .= (defined($prev_hash_ref->{current_health_raw}) ? $prev_hash_ref->{current_health_raw} : "") . "\t";
    # use state_changexxx for health_changexxx
    $output .= (defined($hash_ref->{state_change_ts_lct}) ? $hash_ref->{state_change_ts_lct} : "") . "\t";
    $output .= (defined($hash_ref->{state_change_ts_utc}) ? $hash_ref->{state_change_ts_utc} : "") . "\t";

    return($output);

}

#
# This sub is called to print the fomatted data in
# a token value output format
#
# Input: formatted data
#
# Output: none
#
sub print_token
{
my($pub_data) =  @_;

    (my @output_fields) = split ("\t", $pub_data);

    my $index = 0;
    foreach my $label (@labels) {
        printf("%s\t%s\t", $label, (defined($output_fields[$index]) ? $output_fields[$index] : " "));

        $index++;
    }
    printf("\n");
}


#
# This sub is called to print the fomatted data in
# a list output format
#
# Input: formatted data
#
# Output: none
#
sub print_list
{
my($pub_data) =  @_;

    $pub_data = $pub_data . "\t";
    (my @output_fields) = split ("\t", $pub_data);

    my $index = 0;
    foreach my $label (@labels) {
        printf("%s: %s\n", $label, (defined($output_fields[$index]) ? $output_fields[$index] : " "));

        $index++;
    }
    printf("\n");
}


############################    MAIN SCRIPT  ##########################################
# initialize the variable to hold my instance and other variables used by workflow
my $wf= ""; 
my $errormsg = "";
my ($newerrormsg, $severity, $retcode);
my $has_changed = 0;

# obtain our instance path and verify that it is correct 
# before moving forward
my $SQROOT = $ENV{'MY_SQROOT'};
die ("The environment MY_SQROOT is empty\n") unless (defined($SQROOT) && length($SQROOT)>0);

# obtain operations/programs to call
# by combining our instance path with our base name
$xxx_OP = $SQROOT . $xxx_OP;
$TPA_PUBLISH = $SQROOT . $TPA_PUBLISH;
$SSP_TIMESTAMP = $SQROOT . $SSP_TIMESTAMP;

# ***********
# ****CHANGE TO REFLECT THE CONTEXT INFORMATION REQUIRED BY YOUR WORKFLOW****
# ***********
# here are the values from this current context
my %context_values = (
	"param1" 		=>	"xxx",
	"param2" 		=>	undef,
	"ccc" 			=>	undef,
	"workflow_error" 	=> 	undef,
	"workflow_ts_lct" 	=> 	undef,
	"workflow_ts_utc" 	=> 	undef,
	"current_state" 	=> 	undef,
	"current_state_raw" 	=> 	undef,
	"state_change_ts_lct" 	=> 	undef,
	"state_change_ts_utc" 	=> 	undef,
	"current_health" 	=> 	undef,
	"current_health_raw" 	=> 	undef,
);

# ***********
# ****CHANGE TO REFLECT THE CONTEXT INFORMATION REQUIRED BY YOUR WORKFLOW****
# ***********
# hash for previous context values
my %prev_context_values = (
	"param1" 		=>	"xxx",
	"param2" 		=>	undef,
	"ccc" 			=>	undef,
	"workflow_error" 	=> 	undef,
	"workflow_ts_lct" 	=> 	undef,
	"workflow_ts_utc" 	=> 	undef,
	"current_state" 	=> 	undef,
	"current_state_raw" 	=> 	undef,
	"state_change_ts_lct" 	=> 	undef,
	"state_change_ts_utc" 	=> 	undef,
	"current_health" 	=> 	undef,
	"current_health_raw" 	=> 	undef,
);

# ***********
# ****CHANGE TO REFLECT YOUR WORKFLOW INFORMATION****
# ***********
# create new Vili instance
$wf = Vili::Functions->new( 
	opname => "xxx_peer_flow",
        help_text => $xxx_help_text,
        long_help_text => $xxx_long_help_text,
	op_version => "1.0.0",
	 );

# Standard args processed by all operations and workflows
# are -verbose, -list, -token and -version
# Any additional arguments must be added
# ***********
# ****CHANGE TO REFLECT THE ARGUMENT REQUIRED BY YOUR WORKFLOW****
# ***********
# ****NOTE: The value for you new argument is stored in your instance****
# ****  data structure, e.g. $op->{param1}****
# ***********
# add the param1 argument 
# but do not specify any default.  Require that it
# be passed in by the user
$wf->add_args(
	arginfo => 'param1=s',
	);

# add the param2 argument with a default
$wf->add_args(
	arginfo => 'param2=s',
	default => "1",
	);

# call the getopts function to process all of the
# arguments that were received.  If arguments are
# missing an error message will be generated
# This function will also process "help", "long_help"
# and "version" right away.
# ****NOTE: The value for your arguments are stored in your instance****
# ****  data structure, e.g. $wf->{verbose}****
# ***********
# now that we know what to look for, go process
# the arguments that were passed in
$wf->getopts;

# ***********
# ****CHANGE TO VALIDATE THE ADDITIONAL ARGUMENTS REQUIRED BY YOUR WORKFLOW****
# ****  BECAUSE LIBRARY DOESN'T KNOW WHAT YOUR DATA SHOULD LOOK LIKE****
# ***********
# At this point, all required arguments have been received
# now validate, as needed, your additional arguments
# validate the param1 provided
# ****NOTE: There are validation routines in Helper.pm to help validate****
# ****  your arguments, e.g. isvalid_IP, isvalid_integer****
# ****  Add more to this Perl module as your scripts need new routines ****
# ***********
# now validate, as needed, your additional arguments
# validate the param1 provided
if (! isvalid_IP($wf->{param1})) {
	$errormsg = "Invalid param1 specified: $wf->{param1} \n";
       	$wf->op_die(
		output => $errormsg,
	);
}

# validate the param2 value
if (! isvalid_integer($wf->{param2})) {
	$errormsg = "Invalid param2 value specified: $wf->{param2} \n";
       	$wf->op_die(
		output => $errormsg,
	);
}

# if we want some verbose output - lets report
# all of our variable values
if ($wf->{verbose}) {
	print "Opname is $wf->{opname}\n";
	print "list is $wf->{list}\n";
	print "token is $wf->{token}\n";
	print "publication is $wf->{publication}\n";
	print "mode is $wf->{mode}\n";
	print "frequency is $wf->{frequency}\n";
	print "context is $wf->{context}\n";
	print "version is $wf->{version}\n";
	print "param1 is $wf->{param1}\n";
	print "param2 is $wf->{param2}\n";
}

# ***********
# ****USE THE LOG FUNCTION, AS NECESSARY, TO PLACE INFORMATION IN THE LOG FILE****
# ****WHEN ENTERING LOG INFO, THE SEVERITY VALUES ARE DEFINED AS CONSTANTS****
# ****INFO, WARNING, ERROR****
# ***********
#$wf->log(
#	severity => Vili::Functions::INFO,
#	message => "I think that this log function works.",
#	);

# let's be sure to initialize our return code variable
my $return_code = "";

##################################
# Now that we have our arguments worked out
# lets go perform the work of the workflow

# ***********
# ****CHANGE TO CALL ANY EXECUTABLE REQUIRED BY YOUR WORKFLOW****
# ***********
# assemble the command line with all arguments
# that are defined
# NOTE: we do not pass in verbose, version, or the helps
#    since that output is not used when we run
#    a workflow.. for that output the operation
#    should be run directly
# first, add in all of the required arguments to
# the operation
# NOTE2: we always call operation with the 'token' output
#     option so that I can always parse the output the same
# NOTE3: we always call operation with the 'vili' argument
#     and value so that any log calls from the operation will
#     refer to the vili, and how they were called, in the log 
#     file and we can track how the operation was called
my $cmd = "$xxx_OP -param1=$wf->{param1} -param2=$wf->{param2} -token -vili=$wf->{vili}";

chomp(my $xxxoutput = `$cmd`);

# Check for bad exit status
# and set our current states given the return status
my $posixval = WEXITSTATUS($?);
if ($posixval != 0) {

	if ($posixval == Vili::Functions::WARNING) {
		$context_values{current_state} = $SPSTATE_UP; 
		$context_values{current_state_raw} = $wf->get_enum_text(
			constvalue => Vili::Functions::WARNING,
		);

		$context_values{current_health} = $SPHEALTH_ABOVEWARNING;
		$context_values{current_health_raw} = $wf->get_enum_text(
			constvalue => Vili::Functions::WARNING,
		);

	} elsif ($posixval == Vili::Functions::CRITICAL) {
		$context_values{current_state} = $SPSTATE_UP; 
		$context_values{current_state_raw} = $wf->get_enum_text(
			constvalue => Vili::Functions::CRITICAL,
		);

		$context_values{current_health} = $SPHEALTH_ABOVEERROR;
		$context_values{current_health_raw} = $wf->get_enum_text(
			constvalue => Vili::Functions::CRITICAL,
		);

	} elsif ($posixval == Vili::Functions::UNKNOWN) {
		$context_values{current_state} = $SPSTATE_UNKNOWN; 
		$context_values{current_state_raw} = $wf->get_enum_text(
			constvalue => Vili::Functions::UNKNOWN,
		);

		$context_values{current_health} = $SPHEALTH_UNKNOWN;
		$context_values{current_health_raw} = $wf->get_enum_text(
			constvalue => Vili::Functions::UNKNOWN,
		);

	} else {
		# If it is not one of the expected values, then generate an error message and exit
                $errormsg = "Error when executing $xxx_OP: " . $posixval;
                $wf->log(
                        severity => Vili::Functions::ERROR,
                        message => $errormsg,
                );
                $wf->op_exit(
                        retcode => Vili::Functions::FAILURE,
                        output => $errormsg,
                );
	} 
} else {
	$context_values{current_state} = $SPSTATE_UP; 
	$context_values{current_state_raw} = $wf->get_enum_text(
		constvalue => Vili::Functions::OK,
	);
	$context_values{current_health} = $SPHEALTH_READY;
	$context_values{current_health_raw} = $wf->get_enum_text(
		constvalue => Vili::Functions::OK,
	);
}

# ***********
# ****CHANGE TO PERFORM ANY ADDITIONAL PROCESSING WITH THE OUTPUT OF THE
# ****OPERATION OR TO CALL AN ADDITIONAL OPERATION, ETC., AS NECESSARY****
# ***********

# now go get the time that we got this result
# Get current time, seconds since 1970-01-01 00:00:00 UTC
my $time_utc = time();

# put it in the SeaPilot format that we want it to be in
chomp(my $time_out = `$SSP_TIMESTAMP $time_utc 2> /dev/null`);

# check for errors when running this program
if ((WIFEXITED($?) && (WEXITSTATUS($?) != 0))) {
        $errormsg = "Error when executing $SSP_TIMESTAMP: " . $?;
        $wf->log(
		severity => Vili::Functions::ERROR,
                message => $errormsg,
        );
        $wf->op_exit(
                retcode => Vili::Functions::FAILURE,
                output => $errormsg,
        );
}

# save the time of this workflow in case this is the time of our state change.
($context_values{workflow_ts_lct}, $context_values{workflow_ts_utc}) = split(/\s+/, $time_out);

# now go and create/truncate the context file
# and save the old one, if it existed
# then return a flag to indicate that we had to
# create the context file which means that we
# have a state change
$has_changed = $wf->create_context();
if ($has_changed) {

	# now that we know we have a state change, then let's save the 
	# timestamp in the state change fields
	$context_values{state_change_ts_lct} = $context_values{workflow_ts_lct};
	$context_values{state_change_ts_utc} = $context_values{workflow_ts_utc};
}

# get name of backup context file
my $copy_name = $wf->get_backup_context();

# now let's go get the previous context info, if any
# and put it in a hash to hold the previous context values
($newerrormsg, $severity, $retcode) = get_prev_context(\%prev_context_values, $copy_name);

# if we had an error message returned, that means that
# there was a problem with our get_prev_context call.  
# Most likely, this has to do with the file handling of the backup context file
# So report it and exit
if (defined $newerrormsg && length($newerrormsg)) {
	$wf->log(
                severity => $severity,
                message => $newerrormsg,
        );
        $wf->op_exit(
                 retcode => $retcode,
                 output => $newerrormsg,
        );
}

# ***********
# ****CHANGE TO REFLECT ANY CHANGES REQUIRED FOR YOUR WORKFLOW****
# ***********
# go put the data in the context hash
get_context(\%context_values, $xxxoutput);

# if we haven't already determined that we have a state change
# and if we are doing mode interval, then we need to see
# if something has changed in our output compared to 
# last time before we determine that we need to send a publication. 
if (!$has_changed && $wf->{mode} eq "interval") {
# ***********
# ****CHANGE TO REFLECT HOW YOU DETECT STATE CHANGES IN YOUR WORKFLOW****
# ***********
	($has_changed, $errormsg, $severity, $retcode)  = compare_xxx_context(\%prev_context_values, \%context_values);

	# did we have a problem getting the param1 value?  
	# if so then something is really wrong
	if (defined $newerrormsg && length($newerrormsg)) {
		$wf->log(
                	severity => $severity,
                	message => $newerrormsg,
        	);
        	$wf->op_exit(
                 	retcode => $retcode,
                 	output => $newerrormsg,
        	);
	}

	if ($has_changed) {

		# now that we know we have a state change, then let's save the 
		# timestamp in the state change fields
		$context_values{state_change_ts_lct} = $context_values{workflow_ts_lct};
		$context_values{state_change_ts_utc} = $context_values{workflow_ts_utc};
	}
}

# TODO: handle flapping?  How, hold it in context file
# but be sure not to compare that line??
# We should maintain outcomes for the past 5 times, and if we are
# switching in and out of OK, then set flapping and don't publish
# We need to take these values out of backup context, remove oldest
# put in our recent outcome as 5th, evaluate the outcomes and set flapping
# also save our flapping state in context..

# if we are running in interval mode then we should
# write out our context file, now that we have changed
# all fields that we plan to
if ($wf->{mode} eq "interval") {
    ($newerrormsg, $severity, $retcode) = write_context(\%context_values, $wf->{context}, $wf->{mode});

# if we had an error message returned, that means that
# there was a problem with our write_context call.  
# So report it and exit
    if (defined $newerrormsg && length($newerrormsg)) {
	$wf->log(
                severity => $severity,
                message => $newerrormsg,
        );
        $wf->op_exit(
                 retcode => $retcode,
                 output => $newerrormsg,
        );
    }
}

# if we need to send any output
# then go format the output found in the context file
if (($wf->{mode} eq "baseline") || $has_changed) {

	# format the information for the health header
	my $mode = $wf->{mode};
	my $freq = $wf->{frequency};
	my $hdr_data = FormatHdr($mode, $freq);

	# now go get the data for the publication
	my $pub_data = FormatData(\%prev_context_values, \%context_values);

	my $num_repeats = 1;
	$pub_data = "<info_header>\t" . $hdr_data. "\t" . $num_repeats . "\t" . $pub_data;

	if ($wf->{publication}) {
		system($TPA_PUBLISH, $wf->{opname}, $ROUTING_KEY, $context_values{workflow_ts_utc}, $context_values{workflow_ts_lct}, $pub_data);

		if (WIFEXITED($?) && (WEXITSTATUS($?) != 0)) {
        		$errormsg = "Error when executing $TPA_PUBLISH: " . $?;
        		$wf->log(
				severity => Vili::Functions::ERROR,
                		message => $errormsg,
        		);
        		$wf->op_exit(
                		retcode => Vili::Functions::FAILURE,
                		output => $errormsg,
        		);
		}
	}

        if ($wf->{token}) {
                print_token($pub_data);
        }

        if ($wf->{list}) {
                print_list($pub_data);
        }
}

# there is no output for our workflow
# since we have already handled it
my $formattedoutput = "";

$wf->op_exit ( 
        retcode => Vili::Functions::OK,
	output => $formattedoutput,
	);

