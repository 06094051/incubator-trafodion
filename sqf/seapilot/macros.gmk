# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2006-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

# Global macros for Seapilot make

COMPONENT := $(notdir $(PWD))

ifeq ($(MY_SPROOT),)
  $(error MY_SPROOT must be set to build.)
endif

# Setup log file
ifeq ($(strip $(MAKE_LOGDIR)),)
  LOGFILE := build.log
else
  LOGFILE := $(MAKE_LOGDIR)/build.log
endif

_dummy := $(shell [ -r $(LOGFILE) ] && mv $(LOGFILE) $(LOGFILE).old; touch $(LOGFILE))

# Define what the final target type is; list the source directory name

LIGHTHOUSE2_DLLS :=	message_queue \
			link_list \
			functions_memory \
			semaphore_lock \
			shared_memory \
			library_management \
			plugin_library_handler \
			plugin_amqp_handler \
			plugin_event_handler \
			plugin_cpu_metrics \
			plugin_memory_metrics \
			plugin_network_metrics \
			plugin_process_metrics \
			plugin_filesystem_metrics

DUMMY_DLLS :=	$(LIGHTHOUSE2_DLLS) \
		publications \
		sqqpidcommon \
                wrapper \
                wrapper_mon \
                wrapper_sq \
                consumer_wrapper \
                protobuf_serialization \
                protobuf_serialization_sq \
		chameleon\
		problem_management_dll \
	        problem_management_common

DUMMY_LIBS :=	mal \
		dynodbc \
		dynsql

DUMMY_EXES := dynconsumer \
                xmlgateway \
                lighthouse \
                cpu_metrics \
                filesystem_metrics \
                memory_metrics \
                network_metrics \
                process_metrics \
                PTPA \
                text_protocol_adapter \
                universal_consumer \
                universal_consumer_odbc \
                hello \
                eventload \
                perfload \
                healthload \
                amqpload \
                amqpsink \
                testtext \
                chatest\
                testdtm \
                event_tokenizer \
                event_send \
                test_consumer_producer \
                timer_pop_generator \
                unc_configuration_generator \
                problem_management \
                node_status_agent  \
                querystatsload \
                tpaload \
                snmppa \
                lx_loadavg_metrics\
                lx_diskinfo_metrics\
                lx_physnode_metrics\
                uaa \
                una \
                ebcm \
                se_metrics_aaa_delta \
                loadavg_metrics_sh \
                core_metrics_sh \
                network_metrics_sh \
                disk_metrics_sh \
                filesystem_metrics_sh \
                memory_metrics_sh \
                virtualmem_metrics_sh


DUMMY_CATS := event_templates

DUMMY_JARS := problem_management_spjs

# Build type variables
BUILD_PLAT := ${shell uname -s}-${shell uname -m}
ifeq ($(SQ_BUILD_TYPE), release)
    OUTDIR	:= $(BUILD_PLAT)/$(SQ_MTYPE)/rls
    DBG_FLAGS	?=
    COVER_FLGS   =
    LNK_FLAGS    =
    OPTIM_FLGS	?= -O2
else
    OUTDIR	:= $(BUILD_PLAT)/$(SQ_MTYPE)/dbg
    DBG_FLAGS	?= -g
    OPTIM_FLGS	?=
    COVER_FLGS  =
    LNK_FLAGS   =
    ifeq ($(SQ_COVERAGE),1)
      COVER_FLGS   = --coverage
      DBG_FLAGS    += $(COVER_FLGS)
      LNK_FLAGS    += $(COVER_FLGS)
    endif
endif

M_FLAG              ?= -m$(SQ_MTYPE)

W_FLAGS         ?= -Wall -Werror
ARFLAGS         ?= -rs

  GCC_TOOL_ROOT   := /usr
SCOPEFLAGS       = $(CLOSED_SOURCE_GPP_OPTS)
CC              := $(GCC_TOOL_ROOT)/bin/gcc $(M_FLAG) $(SCOPEFLAGS)
CXX             := $(GCC_TOOL_ROOT)/bin/g++ $(M_FLAG) $(SCOPEFLAGS)
EXE_LINKER      := $(GCC_TOOL_ROOT)/bin/g++ $(M_FLAG) $(SCOPEFLAGS)
CAT_CREATOR      := gencat

ifeq ($(filter-out $(DUMMY_DLLS), $(COMPONENT)),)
    DLLS_CXXFLAGS := -fPIC
endif

CXXFLAGS        ?= $(DBG_FLAGS) $(OPTIM_FLGS) $(DLLS_CXXFLAGS)
ALL_CXXFLAGS    = $(CXXFLAGS) $(W_FLAGS)
ALL_LDFLAGS     = $(LDFLAGS) $(LNK_FLAGS)

# Variables used to define export files
SP_EXPORT		:= $(MY_SPROOT)/export
#SP_EXPORT_LIB		:= $(SP_EXPORT)/lib$(SQ_MBTYPE)
#SP_EXPORT_BIN		:= $(SP_EXPORT)/bin$(SQ_MBTYPE)
SP_EXPORT_CONF		:= $(SP_EXPORT)/conf
SP_EXPORT_INC		:= $(SP_EXPORT)/include
SP_EXPORT_COMMON_INC	:= $(SP_EXPORT_INC)/common

# PROTOBUFS & PROTOBUFS_LIB must be defined in environment

PROTOBUFS_BIN := $(PROTOBUFS)/bin
PROTOBUFS_INC := $(PROTOBUFS)/include


ALL_LDFLGS = "$(ALL_LDFLAGS)"

# Compile echo rules
COMPILE_ECHO_RULE = @echo "Compiling $(<)";
LINK_DLL_ECHO_RULE = @echo "Linking DLL library $@";
LINK_LIB_ECHO_RULE = @echo "Linking library $@";
LINK_EXE_ECHO_RULE = @echo "Linking executable $@";
CREATE_CAT_ECHO_RULE = @echo "Creating catalog $@";
CREATE_JAR_ECHO_RULE = @echo "Creating Jar $@";
DEP_FILE = $(OUTDIR)/depend/d_$(basename $(notdir $(<))).dep

# Java location definitions
#
# We make use of the SQ standard env variable $JAVA_HOME,
# which comes from sqenv.sh.
JAVA=$(JAVA_HOME)/bin/java
JAVAC=$(JAVA_HOME)/bin/javac
JAR=$(JAVA_HOME)/bin/jar

# Shell functions to define output. Need multi-threading support here.
define starting_logfile
	OUTFILE=/tmp/tmp_$(@F)_$$$$.txt; \
	printf '%b' "### Starting : $${HEADING}\n" > $$OUTFILE; \
	cat $$OUTFILE >> $(LOGFILE);
endef

define capture_output
	OUTFILE=/tmp/tmp_$(@F)_$$$$.txt; \
	printf '%b' "===============================================================\n" > $$OUTFILE; \
	printf '%b' "Component: $(COMPONENT)\n" >> $$OUTFILE; \
	printf '%b' "$${HEADING}\n" >> $$OUTFILE; \
	printf '%b' "===============================================================\n" >> $$OUTFILE; \
	printf '%b' "$${CMD}\n" >> $$OUTFILE; \
	eval $$CMD >> $$OUTFILE 2>&1; \
	CMD_RETURN=$$?; \
	if [[ -n "${VERBOSE}" || $$CMD_RETURN -ne 0 ]]; then \
	    cat $$OUTFILE; \
	fi; \
	cat $$OUTFILE >> $(LOGFILE); \
	rm -f $$OUTFILE; \
	exit $$CMD_RETURN;
endef

# Build rules for c, cpp, lib, dll, exe, proto, cat, and java

compile_cpp_rule = $(CXX) -Wp,-MD,$(DEP_FILE) -Wp,-MT,$@ $(ALL_CXXFLAGS) $(DEFINES) $(INCLUDES) -c $< -o $@
compile_c_rule = $(CC) -Wp,-MD,$(DEP_FILE) -Wp,-MT,$@ $(ALL_CXXFLAGS) $(DEFINES) $(INCLUDES) -c $< -o $@

build_cpp_rule = $(COMPILE_ECHO_RULE) \
		HEADING="Compiling $(<) --> $(@)"; $(starting_logfile) \
		CMD='$(compile_cpp_rule)'; $(capture_output)

build_c_rule = $(COMPILE_ECHO_RULE) \
		HEADING="Compiling $(<) --> $(@)"; $(starting_logfile) \
		CMD='$(compile_c_rule)'; $(capture_output)

link_exe = $(EXE_LINKER) $(ALL_LDFLAGS) $(DEFINES) $(LIBS) $(OBJ_PATHS) $(EXTERN_OBJS) -o $@

link_exe_rule = $(LINK_EXE_ECHO_RULE) \
		HEADING="Linking executable $(@)"; $(starting_logfile) \
		CMD='$(link_exe)'; $(capture_output)

compile_dll_rule = $(CXX) -shared $(COVER_FLGS) $(DEFINES) $(LIBS) $(OBJ_PATHS) $(EXTERN_OBJS) -o $@

build_dll_rule = $(LINK_DLL_ECHO_RULE) \
		HEADING="Compiling $(<) --> $(@)"; $(starting_logfile) \
		CMD='$(compile_dll_rule)'; $(capture_output)

compile_lib_rule = $(AR) $(ARFLAGS) $@ $(OBJ_PATHS)

build_lib_rule = $(LINK_LIB_ECHO_RULE) \
		HEADING="Compiling $(<) --> $(@)"; $(starting_logfile) \
		CMD='$(compile_lib_rule)'; $(capture_output)

compile_proto_rule =	$(PROTOBUFS_BIN)/protoc $(patsubst %, -I=%, $(dir $(<))) --cpp_out=$(OUTDIR) $<

compile_java_rule = $(JAVAC) -d $(OUTDIR) $<

build_proto_rule = $(COMPILE_ECHO_RULE) \
		HEADING="Compiling $(<) --> $(@)"; $(starting_logfile) \
		CMD='$(compile_proto_rule)'; $(capture_output)

build_java_rule = $(COMPILE_ECHO_RULE) \
        HEADING="Compiling $(<)"; $(starting_logfile) \
        CMD='$(compile_java_rule)'; $(capture_output)

create_cat = $(CAT_CREATOR) $@ $(GENCATSRC)

create_cat_rule = $(CREATE_CAT_ECHO_RULE) \
		HEADING="Creating catalog $(@)"; $(starting_logfile) \
		CMD='$(create_cat)'; $(capture_output)

create_jar = $(JAR) cvf$(if $(JAR_ENTRYPOINT),e,)$(if $(JAR_MANIFEST),m,) $@ $(if $(JAR_ENTRYPOINT),$(JAR_ENTRYPOINT),) $(if $(JAR_MANIFEST),$(JAR_MANIFEST),) $(foreach class_file,$(shell cd $(OUTDIR) > /dev/null 2>&1; find . -name '*.class'),-C $(OUTDIR) $(class_file))

create_jar_rule = $(CREATE_JAR_ECHO_RULE) \
        HEADING="Creating Jar $(@)"; $(starting_logfile) \
        CMD='$(create_jar)'; $(capture_output)

# Rules to build proto files
PROTO_OBJ = $(OUTDIR)/$(basename $(notdir $(1))).pb.o
PROTO_CC = $(OUTDIR)/$(basename $(notdir $(1))).pb.cc
PROTO_H = $(OUTDIR)/$(basename $(notdir $(1))).pb.h
define PROTO_BUILD_template
$(PROTO_CC): $(1)
	$$(build_proto_rule)
	mkdir -pv $(SP_EXPORT_COMMON_INC)
	cp -vpf $(PROTO_H) $(SP_EXPORT_COMMON_INC)
$(PROTO_OBJ): $(PROTO_CC) $(1)
	$$(build_cpp_rule)
$(PROTO_CC)  : PROTO_CC:=$(PROTO_CC)
$(PROTO_OBJ) : PROTO_CC:=$(PROTO_CC)
$(PROTO_OBJ) : PROTO_OBJ:=$(PROTO_OBJ)
endef

# Rules to build java files
JAVA_OBJ = $(OUTDIR)/$(basename $(notdir $(1))).class
define JAVA_BUILD_template
$(JAVA_OBJ): $(1)
	$$(build_java_rule)
$(JAVA_OBJ): JAVA_OBJ:=$(JAVA_OBJ)
endef

# Rules to build cpp files
CPP_OBJ = $(OUTDIR)/$(basename $(notdir $(1))).o
define CPP_BUILD_template
$(CPP_OBJ): $(1)
	$$(build_cpp_rule)
$(CPP_OBJ) : CPP_OBJ:=$(CPP_OBJ)
endef

# Rules to build c files
C_OBJ = $(OUTDIR)/$(basename $(notdir $(1))).o
define C_BUILD_template
$(C_OBJ): $(1)
	$$(build_c_rule)
$(C_OBJ) : C_OBJ:=$(C_OBJ)
endef

OBJ_PATHS :=
