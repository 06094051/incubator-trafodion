#ifndef OUTPUT_FILE_TEXT_SERIALIZER_H
#define OUTPUT_FILE_TEXT_SERIALIZER_H

// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2010-2014 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@

#include "TextSerializer.h"

//! This class is for writing message files in the Protobuf Serialization Library text format.
class OutputFileTextSerializer : public TextSerializer
{
    public:

        //! \brief Constructor.
        //!
        //! \param[in] errorStack - error stack to collect errors generated by the methods in this class
        //! \param[in] messagesFileName - name of file where messages will be written
        OutputFileTextSerializer(MalTrinityErrorStack & errorStack, const string & messagesFileName);

        //! \brief Destructor.
        ~OutputFileTextSerializer();

        //! \brief Opens the messages file. Errors (if any) will be placed on the
        //! error stack provided in the constructor.
        //!
        //! \param[in] truncateMessagesFile - specifies whether the messages
        //! file should be opened in append mode (default) or in truncate mode
        //!
        //! \return false if error was encountered, true otherwise
        bool openMessagesFile(bool truncateMessagesFile = false);

        //! \brief Closes the messages file. Errors (if any) will be placed on the
        //! error stack provided in the constructor.
        //!
        //! \return false if error was encountered, true otherwise
        bool closeMessagesFile();

        //! \brief Writes the given message entry to the messages file. Errors (if any)
        //! will be placed on the error stack provided in the constructor.
        //!
        //! \param[in] routingKey - the routing key associated with the message entry
        //! \param[in] message - the protobuf message object to be written
        //! \param[in] comments - optinal comments describing the message entry; can
        //! contain any characters, including newlines, except lines equal to "/*" or "*/"
        //!
        //! \return false if error was encountered, true otherwise
        bool writeNextMessage(const AMQPRoutingKey & routingKey, const google::protobuf::Message & message, const string & comments = "");

    private:

        string messagesFileName_;
        ofstream messagesFile_;

        google::protobuf::TextFormat::Printer textFormatPrinter_;
};

#endif // OUTPUT_FILE_TEXT_SERIALIZER_H
