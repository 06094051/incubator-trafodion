#ifndef INPUT_FILE_TEXT_SERIALIZER_H
#define INPUT_FILE_TEXT_SERIALIZER_H

// @@@ START COPYRIGHT @@@
//
// (C) Copyright 2010-2014 Hewlett-Packard Development Company, L.P.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// @@@ END COPYRIGHT @@@

#include "TextSerializer.h"
#include "ProtobufSerializationTextFormatParserErrorCollector.h"

//! This class is for reading message files in the Protobuf Serialization Library text format.
class InputFileTextSerializer : public TextSerializer
{
    public:

        //! \brief Constructor.
        //!
        //! \param[in] errorStack - error stack to collect errors generated by the methods in this class
        //! \param[in] importer - google protobuf importer object; may contain an existing cache of loaded proto files
        //! \param[in] messagesFileName - name of file from which messages will be read
        InputFileTextSerializer(MalTrinityErrorStack & errorStack, google::protobuf::compiler::Importer & importer, const string & messagesFileName);

        //! \brief Destructor.
        ~InputFileTextSerializer();

        //! \brief Opens the messages file. Errors (if any) will be placed on the
        //! error stack provided in the constructor.
        //!
        //! \param[in] startPosition - specifies the desired position in the messages file,
        //! from which to start reading message entries
        //!
        //! \return false if error was encountered, true otherwise
        bool openMessagesFile(const streampos & startPosition = 0);

        //! \brief Closes the messages file. Errors (if any) will be placed on the
        //! error stack provided in the constructor.
        //!
        //! \return false if error was encountered, true otherwise
        bool closeMessagesFile();

        //! \brief Reads the next message entry in the messages file.
        //! Errors (if any) will be placed on the error stack provided in the constructor.
        //! Note that any proto import errors will be collected by the caller's
        //! google::protobuf::compiler::MultiFileErrorCollector adaptor object, since this class
        //! doesn't own the Importer object; this method will detect such errors and return false.
        //! If an error is encountered, the routingKey and message pointers will be set to NULL;
        //! also, in this case, the reachedEOF and currentPosition output values should not be
        //! trusted; consider these undefined. In other words, the caller must check the method
        //! return code for error before using any of the variables passed in as output parameters!
        //!
        //! \param[out] reachedEOF - indicates whether EOF has been reached in the messages file;
        //! will be set to true if there are no more message entries to read in the messages file,
        //! in which case, the routingKey & message output parameters will be set to NULL and
        //! the currentPosition output parameter will be set to -1
        //! \param[out] currentPosition - indicates position in the messages file after completion
        //! of the message entry read operation; will be set to -1 if EOF has been reached in
        //! the messages file
        //! \param[out] routingKey - a reference to an AMQPRoutingKey pointer; upon completion of
        //! this method, the AMQPRoutingKey pointer will either point to NULL or a newly created
        //! AMQPRoutingKey object, representing the routing key of the message entry; it is
        //! the caller's responsibity to delete this object when it's no longer needed!
        //! \param[out] message - a reference to a Message pointer; upon completion of
        //! this method, the Message pointer will either point to NULL or a newly created
        //! Message object, representing the protobuf message of the message entry; it is
        //! the caller's responsibity to delete this object when it's no longer needed!
        //!
        //! \return false if error was encountered, true otherwise
        bool readNextMessage(bool & reachedEOF, streampos & currentPosition, AMQPRoutingKey * & routingKey, google::protobuf::Message * & message);

    private:

        string messagesFileName_;
        ifstream messagesFile_;

        google::protobuf::compiler::Importer & importer_;
        google::protobuf::DynamicMessageFactory messageFactory_;
        google::protobuf::TextFormat::Parser textFormatParser_;

        ProtobufSerializationTextFormatParserErrorCollector protobufSerializationTextFormatParserErrorCollector_;

        //! \brief Helper method for parsing the messages file. Reads the next message entry.
        //! Errors (if any) will be placed on the error stack provided in the constructor.
        //! If an error is encountered, the reachedEOF, currentPosition, routingKeyText, and
        //! messageText output values should not be trusted; consider these undefined. In
        //! other words, the caller must check the method return code for error before using
        //! any of the variables passed in as output parameters!
        //!
        //! \param[out] reachedEOF - indicates whether EOF has been reached in the messages file;
        //! will be set to true if there are no more message entries to read in the messages file,
        //! in which case, the routingKeyText and messageText output parameters will not be set
        //! \param[out] currentPosition - indicates position in the messages file after completion
        //! of the message entry read operation
        //! \param[out] routingKeyText - the routing key text of the message entry
        //! \param[out] messageText - the protobuf message text of the message entry
        //!
        //! \return false if error was encountered, true otherwise
        bool readNextMessageText(bool & reachedEOF, streampos & currentPosition, string & routingKeyText, string & messageText);
};

#endif // INPUT_FILE_TEXT_SERIALIZER_H
