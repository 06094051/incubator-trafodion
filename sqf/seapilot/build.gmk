# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2010-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

-include $(OUTDIR)/depend/d_*

_dummy := $(if $(wildcard $(OUTDIR)/depend),,$(shell mkdir -p $(OUTDIR)/depend))
_dummy := $(if $(wildcard $(OUTDIR)),,$(shell mkdir -p $(OUTDIR)))

PROTO_OBJS := $(patsubst %.proto, $(OUTDIR)/%.pb.o, $(notdir $(PROTOSRC)))
PROTO_INCS := $(patsubst %.proto, $(SP_EXPORT_COMMON_INC)/%.pb.h, $(notdir $(PROTOSRC)))
JAVA_OBJS := $(patsubst %.java, $(OUTDIR)/%.class, $(notdir $(JAVASRC)))
CPP_OBJS := $(patsubst %.cpp, $(OUTDIR)/%.o, $(notdir $(CPPSRC)))
C_OBJS := $(patsubst %.c, $(OUTDIR)/%.o, $(notdir $(CSRC)))

# add Hadoop libraries (variables are defined in sqenvcom.sh)
LIBS += -L $(LOC_JVMLIBS) -L $(HADOOP_LIB_DIR) -lhdfs -ljvm

ifdef PROTOSRC
  OBJ_PATHS += $(PROTO_OBJS)
  $(foreach srcfile,$(PROTOSRC),$(eval $(call PROTO_BUILD_template,$(srcfile))))
endif

ifdef JAVASRC
  OBJ_PATHS += $(JAVA_OBJS)
  $(foreach srcfile,$(JAVASRC),$(eval $(call JAVA_BUILD_template,$(srcfile))))
endif

ifdef CPPSRC
ifdef PROTOSRC
$(CPP_OBJS): $(PROTO_OBJS)
endif
  OBJ_PATHS += $(CPP_OBJS)
  $(foreach srcfile,$(CPPSRC),$(eval $(call CPP_BUILD_template,$(srcfile))))
endif

ifdef CSRC
ifdef PROTOSRC
$(C_OBJS): $(PROTO_OBJS)
endif
  OBJ_PATHS += $(C_OBJS)
  $(foreach srcfile,$(CSRC),$(eval $(call C_BUILD_template,$(srcfile))))
endif

ifeq ($(filter-out $(DUMMY_EXES), $(COMPONENT)),)
FINAL_EXES += $(FINALOBJ)
$(FINALOBJ): $(OBJ_PATHS)
	$(link_exe_rule)
endif

ifeq ($(filter-out $(DUMMY_LIBS), $(COMPONENT)),)
FINAL_LIBS += $(FINALOBJ)
$(FINALOBJ): $(OBJ_PATHS)
	$(build_lib_rule)
endif

ifeq ($(filter-out $(DUMMY_DLLS), $(COMPONENT)),)
FINAL_DLLS += $(FINALOBJ)
$(FINALOBJ): $(OBJ_PATHS)
	$(build_dll_rule)
endif

ifeq ($(filter-out $(DUMMY_CATS), $(COMPONENT)),)
FINAL_CATS += $(FINALOBJ)
$(FINALOBJ): $(GENCATSRC)
	$(create_cat_rule)
endif

ifeq ($(filter-out $(DUMMY_JARS), $(COMPONENT)),)
FINAL_JARS += $(FINALOBJ)
$(FINALOBJ): $(OBJ_PATHS)
	$(create_jar_rule)
endif

.DEFAULT_GOAL := all
ALL_TARGETS := $(FINAL_LIBS) $(FINAL_DLLS) $(FINAL_EXES) $(FINAL_CATS) $(FINAL_JARS)
ALL_TARGET_DIRS := $(sort $(dir $(ALL_TARGETS)))
_dummymkdir := $(foreach target,$(ALL_TARGET_DIRS),$(if $(wildcard $(target)),,$(shell mkdir -p $(target))))

# Create any target dirs if they dont exist

all: $(ALL_TARGETS)

#$(ALL_TARGETS): $(ALL_TARGET_DIRS)

#$(ALL_TARGET_DIRS):
#	mkdir -p $@

clean:
	@echo "Removing $(BUILD_PLAT) directory"
	@rm -rf $(BUILD_PLAT)
	@echo "Removing exported proto headers"
	@rm -rf $(PROTO_INCS)
	@echo "Removing final object $(FINALOBJ)"
	@rm -f $(FINALOBJ)
	@echo "Removing build.log and build.log.old"
	@rm -f build.log build.log.old 2>&1 > /dev/null
