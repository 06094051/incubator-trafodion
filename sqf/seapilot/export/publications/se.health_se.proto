import "common.health_header.proto";

package se;

//!!BLOCK:HEADER=BEGIN
//!!BLOCK:PUBLICATION DESCRIPTION=BEGIN
//
// Filename: se.health_se.proto
//
// This file defines the health/state publication for SeaQuest storage engines. 
//
// The publication is designed to be useful for all forms of SEs, for example,
// table storage engines (TSEs) and audit storage engines (ASEs).
//
// This publication makes use of repeated groups. Any publication can contain
// one to n publications depending on how many SEs are being checked and 
// what data is relevant for the specific use of the se_check workflow.
//
// Note: This definition also serves as the definition for both .human and
//       -machine outputs from the se_check workflow. idun is used to generate
//       the template for such usage.
//
//
//!!BLOCK:PUBLICATION DESCRIPTION=END
//!!BLOCK:ROUTINGKEY CATEGORY = health_state
//!!BLOCK:SQL:TABLENAME=manageability.instance_repository.health_se
//!!BLOCK:HEADER=END

message health_se
{
  message health_se_data_struct
  {
    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // An enumeration of the object type as represented in the SeaQuest software. The enumeration 
    // is defined in the spobjecttype.h file and in the dimension.dimension_objecttype_table table.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
    //!!SQL: PRIMARY KEY
    //!!SQL: NULLABLE=NO
    //!!LIST: COLUMN NAME = logical object type
    required int32  logical_object_type =  1;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // An enumeration of the object subtype as represented in the SeaQuest software. The 
    // enumeration is defined in the spobjectsubtype.h file and in the 
    // dimension.dimension_objectsubtype_table table.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!BLOCK: FIELD RANGE = (null, 0, 1, 2, ...)
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = logical object subtype
    optional int32 logical_object_subtype =  2;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The logical name of the object for which we're reporting information. Logical means the 
    // name as represented in the SeaQuest software.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: PRIMARY KEY
    //!!SQL: NULLABLE=NO
    //!!SQL: TYPE = char(32) character set ucs2 casespecific
    //!!LIST: COLUMN NAME = logical object name
    required string logical_object_name =  3;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // Further qualifier of logical name of the object for which we're reporting information. 
    // Logical means the name as represented in the SeaQuest software.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: TYPE = varchar(128) character set ucs2 casespecific
    //!!LIST: COLUMN NAME = logical object qualifier
    optional string logical_object_qual_1  =  4; 

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // Further qualifier of logical name of the object for which we're reporting information. 
    // Logical means the name as represented in the SeaQuest software.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: TYPE = varchar(128) character set ucs2 casespecific
    //!!LIST: COLUMN NAME = logical object qualifier
    optional string logical_object_qual_2 =  5; 

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // Path qualifier of logical name of the object for which we're reporting information. 
    // Logical means the name as represented in the SeaQuest software.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: PRIMARY KEY
    //!!SQL: TYPE = char(4) character set ucs2 casespecific
    //!!BLOCK: FIELD RANGE = (null, "NONE", "ALL", "P", "B", "M", "MB")
    //!!LIST: COLUMN NAME = logical object path 
    required string logical_object_path = 6;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // An enumeration of the object type as represented at the Linux level. The enumeration is 
    // defined in the spobjecttype.h file and in the dimension.dimension_objecttype_table table.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = physical object type
    optional int32 physical_object_type = 7;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // An enumeration of the object subtype as represented at the Linux level. The enumeration 
    // is defined in the spobjecttype.h file and in the dimension.dimension_objecttype_table table.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = physical object subtype
    optional int32 physical_object_subtype = 8;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The physical name of the object for which we're reporting information. Physical means the 
    // name as represented at the Linux level.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: NULLABLE = YES
    //!!SQL: TYPE = varchar(128) character set ucs2 casespecific
    //!!LIST: COLUMN NAME = physical object name
    optional string physical_object_name = 9;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // An enumeration of the current state of the object. The enumeration is defined in the 
    // spstate.h file and in the dimension.dimension_state_table table.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = current state
    optional int32 current_state =  10;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The current state as reported before normalization. 
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE = varchar(256) character set ucs2 casespecific
    //!!LIST: COLUMN NAME = current state original
    optional string current_state_raw = 11;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // An enumeration of the previous state of the object. The enumeration is defined in the 
    // spstate.h file and in the dimension.dimension_state_table table.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = previous state
    optional int32 previous_state =  12;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The previous state as reported before normalization. 
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE = varchar(256) character set ucs2 casespecific
    //!!LIST: COLUMN NAME = previous state original
    optional string previous_state_raw = 13;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The time a state change was detected in LCT format. 
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = time when state changed (LCT)
    optional int64 state_change_ts_lct = 14;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The time a state change was detected in UTC format. 
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = time when state changed (UTC)
    optional int64 state_change_ts_utc  =  15; 

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // An enumeration of the current health of the object. The enumeration is defined in the 
    // sphealth.h file and in the dimension.dimension_health_table table.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = current health
    optional int32 current_health =  16;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The current health as reported before normalization. 
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE = varchar(256) character set ucs2 casespecific
    //!!LIST: COLUMN NAME = current health original
    optional string current_health_raw = 17;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // An enumeration of the previous health of the object. The enumeration is defined in the 
    // sphealth.h file and in the dimension.dimension_health_table table.
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!BLOCK: FIELD RANGE = (0, 1, 2, ...)
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = previous health
    optional int32 previous_health  = 18;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The previous health as reported before normalization. 
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE = varchar(256) character set ucs2 casespecific
    //!!LIST: COLUMN NAME = previous health original
    optional string previous_health_raw = 19;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The time a health change was detected in LCT format. 
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = time when health changed (LCT)
    optional int64 health_change_ts_lct = 20; 

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION = BEGIN
    //
    // The time a health change was detected in UTC format. 
    //
    //!!BLOCK: FIELD DESCRIPTION = END
    //!!SQL: NULLABLE=YES
    //!!LIST: COLUMN NAME = time when health changed (UTC)
    optional int64 health_change_ts_utc = 21; 

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // SCSI information from syslog if any. 
    //   Example: SD, SCSI
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=varchar(32) character set ucs2 casespecific
    optional string device = 22;


    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // SCSI address to the device, if any
    //   Example: 0:0:019
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=varchar(32) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=device address
    optional string device_address = 23;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // Node from which information about the SCSI device was obtained.
    //   Example: n001, n002, ...
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=char(4) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=device node
    optional string device_node = 24;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // Logfile from which log messages where read.
    //   Example: /var/log/messages
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=varchar(64) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=device log
    optional string device_log = 25;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // Log entries related to SCSI devices. The last 5 log messages (in reverse
    // order may be included as space allows, separated by new-line.
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=varchar(512) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=device messages
    optional string device_messages = 26;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // Node from which lunmgr information was obtained.
    //
    // Only included if state changes from UP to something else.
    //   Example: n001, n002, ...
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=char(4) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=LUN manager node
    optional string lunmgr_node = 27;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // Logfile from which lunmgr messages where read.
    //   Example: /var/log/messages
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=varchar(64) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=LUN manager log
    optional string lunmgr_log = 28;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // Lunmgr log messages related to the SE. The last 5 log messages (in reverse
    // order may be included as space allows, separated by new-line.
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=varchar(512) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=LUN manager messages
    optional string lunmgr_messages = 29;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // Logfile from which lunmgr syslog messages where read.
    //   Example: /var/log/messages
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=varchar(64) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=LUN manager syslog
    optional string lunmgr_syslog = 30;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // Lunmgr syslog messages in case there are generic lunmgr issues that
    // are relevant. The last 5 log messages (in reverse order may be included,
    // separated by new-line.
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=varchar(512) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=LUN manager syslog messages
    optional string lunmgr_syslog_messages = 31;

    //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
    //!!BLOCK: FIELD DESCRIPTION=BEGIN
    //
    // SE messages from its internal log. The last 5 log messages (in reverse 
    // order may be included as space allows, separated by new-line.
    //
    // Only included if state changes from UP to something else.
    //
    //!!BLOCK: FIELD DESCRIPTION=END
    //!!SQL: NULLABLE=YES
    //!!SQL: TYPE=varchar(512) character set ucs2 casespecific
    //!!LIST: COLUMN NAME=Internal SE messages
    optional string se_internal_log_messages = 32;

  } // of repeated field


  //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
  //!!BLOCK: FIELD DESCRIPTION=BEGIN
  //
  // Import of the common header; documentation is contained in the proto file
  // we're importing.
  //!!BLOCK: FIELD DESCRIPTION=END
  required common.health_header header = 1;

  //!!SQL: INCLUDE; XML-MIB: INCLUDE; DOC: INCLUDE; LIST: INCLUDE; TPA: INCLUDE; TOKEN: INCLUDE
  repeated health_se_data_struct data = 2;

}
