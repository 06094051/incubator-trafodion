import "common.info_header.proto";

package wms;

message wms_stats
{
	required common.info_header header		= 1;  // Common header for all Qpid messages
	optional int32    wms_node_id 			= 2;  // Number of the logical node (for example, 01).
	optional string   wms_node_name 		= 3;  // Name of the logical node (for example, n001).
	optional string   wms_node_list 		= 4;  // List of the logical nodes in the instance (for example, 0,1,2,3).
	optional int64 	  total_queries 		= 5;  // Cumulative number of queries for a time interval of five minutes.
	optional int64 	  total_exec			= 6;  // Cumulative number of queries that were in the executing state for a time interval of five minutes.
	optional int64 	  total_wait			= 7;  // Cumulative number of queries that were in the waiting state for a time interval of five minutes.
	optional int64 	  total_hold			= 8;  // Cumulative number of queries that were in the holding state for a time interval of five minutes.
	optional int64 	  total_suspend			= 9;  // Cumulative number of queries that were in the suspended state for a time interval of five minutes.
	optional int64 	  total_reject			= 10; // Cumulative number of queries that were rejected for a time interval of five minutes.
	optional int64 	  total_cancel			= 11; // Cumulative number of queries that were canceled for a time interval of five minutes.
	optional int64 	  total_complete		= 12; // Cumulative number of queries that completed for a time interval of five minutes.
	optional int32 	  avg_exec_secs			= 13; // Average execution time in seconds for a time interval of five minutes.
	optional int32 	  avg_wait_secs			= 14; // Average waiting time in seconds for a time interval of five minutes.
	optional int32 	  avg_hold_secs			= 15; // Average holding time in seconds for a time interval of five minutes.
	optional int32 	  avg_suspend_secs		= 16; // Average suspended time in seconds for a time interval of five minutes.
	optional int32    conn_rule_triggered	= 17; // Cumulative number of connection rules that were triggered for a time interval of five minutes.
	optional int32    comp_rule_triggered	= 18; // Cumulative number of compilation rules that were triggered for a time interval of five minutes.
	optional int32    exec_rule_triggered	= 19; // Cumulative number of execution rules that were triggered for a time interval of five minutes.
	required int64 	  begin_ts_lct			= 20; // Timestamp in Local Civil Time indicating the start of the time interval when the statistics were gathered. The display format is <yyyy>-<mm>-<dd> (for year, month, and day) and <hh>:<mm>:<ss>.<ssssss> (for hours, minutes, seconds, and microseconds).
	required int64 	  begin_ts_utc			= 21; // Timestamp in Coordinated Universal Time indicating the start of the time interval when the statistics were gathered. The display format is <yyyy>-<mm>-<dd> (for year, month, and day) and <hh>:<mm>:<ss>.<ssssss> (for hours, minutes, seconds, and microseconds).
	required int64 	  end_ts_lct			= 22; // Timestamp in Local Civil Time indicating the end of the time interval when the statistics were gathered. The display format is <yyyy>-<mm>-<dd> (for year, month, and day) and <hh>:<mm>:<ss>.<ssssss> (for hours, minutes, seconds, and microseconds).
	required int64 	  end_ts_utc			= 23; // Timestamp in Coordinated Universal Time indicating the end of the time interval when the statistics were gathered. The display format is <yyyy>-<mm>-<dd> (for year, month, and day) and <hh>:<mm>:<ss>.<ssssss> (for hours, minutes, seconds, and microseconds).
	optional int32    cur_esps			= 24; // Current esp number on the node.
}
