#!/bin/sh
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2012-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

user=$(whoami)
basePort=$QPID_NODE_PORT
numBrokers=9

which pdsh >/dev/null 2>&1
workstation=$? # Set to 0 if cluster, or 1 if workstation.

padSpaces() {
  width=$1
  format="%-${width}.${width}s"
  printf $format
}

getIPAddr()
{
  # The argument is the node name.  If it is of form "sqws21.caclab. ..." then it's a workstation
  if [[ $(expr "$1" : ".*\..*") -ne 0 ]]; then # Workstation
    printf $(/sbin/ifconfig | grep "inet addr:16" | cut -d":" -f2 | cut -d" " -f1)
  else
    printf $(pdsh -w $1 /sbin/ifconfig | grep "inet addr:16" | cut -d":" -f2 | cut -d" " -f1)
  fi
}

getNodeName()
{
  # The argument is the IP address or possibly the node name - convert to node name
  if [[ $(expr "$1" : "16\..*") -ne 0 ]] || [[ $(expr "$1" : "172\..*") -ne 0 ]]; then    # of form 16.*.*.*
    printf $(/usr/bin/nslookup $1 | grep "name = " | cut -d"=" -f2- | cut -d"." -f1)
  else
    printf $(echo $1 | cut -d"." -f1)
  fi
}


getPortFromBroker()
{
  i=0
  while [[ $i -lt $numBrokers ]]; do
    if [[ ${brokers[$i]} = $1 ]]; then
      let port=$basePort+$i
      printf $port
    fi
    let i=$i+1
  done
}

# Create array of broker names.
brokers[0]="NLB"
brokers[1]="EFB"
brokers[2]="EB"
brokers[3]="PB"
brokers[4]="HB"
brokers[5]="SB"
brokers[6]="CEB"
brokers[7]="CPB"
brokers[8]="CHB"
numBrokers=9

# Check for EFB SSL
ssl=$(ps -ef | grep qpidd | grep "$user " | grep -v grep | grep "qpidd\.cfg")
if [[ $ssl != "" ]]; then
  brokers[1]="EFBSSL"
  brokers[9]="EFB"
  numBrokers=10
fi

let lastPort=$basePort+$numBrokers
# Create list of active instance ports
port=$basePort;
i=0
while [[ $i -lt $numBrokers ]]; do
  let port=$basePort+$i;
  if [[ ${brokers[$i]} != "EFBSSL" ]]; then
    ports="$ports $port";
  fi
  let i=$i+1;
done

if [[ $1 != "" ]]; then
  physNodes=$(echo $1 | cut -d":" -f1)
  ports=$(echo $1 | cut -d":" -f2)
  if [[ $physNodes = "" && $ports = "" ]]; then
    echo "Usage: $0 [<node>:<port or broker abbreviation>]"
    exit -1
  fi
  if [[ $ports != "" ]]; then
    if [[ $ports != [0-9]* ]]; then
       ports=$(getPortFromBroker $ports)
    fi
  fi
else
  # Get all logical nodes - is there a better way to do this?
  physNodes=$(echo "node" | sqshell -a | grep Node | cut -d"=" -f2 | cut -d"," -f1)
  node1=$(echo $physNodes | cut -d" " -f1)
  node2=$(echo $physNodes | cut -d" " -f2)
  if [[ $node1 = $node2 ]]; then physNodes=$node1; fi
fi
if [[ $physNodes = "" ]]; then physNodes="localhost"; fi  # workstation

# Find active qpidd ports
i=0;
for node in $physNodes; do
  if [[ $workstation -eq 1 ]]; then
    qpidPorts[$i]=$(ps -f -U $user | grep "\-\-port=" | sed s/..*--port/--port/ | cut -d" " -f1 | cut -d"=" -f2)
  else
    qpidPorts[$i]=$(pdsh -w $node ps -f -U $user | grep "\-\-port=" | sed s/..*--port/--port/ | cut -d" " -f1 | cut -d"=" -f2)
  fi
  #echo ${qpidPorts[$i]}
  let i=$i+1
done

# Get all routing info
j=0
for node in $physNodes; do
  #echo "Node=$node, ports=$ports"
  #echo ${qpidPorts[$j]}
  for port in $ports; do
    let i=$port-$basePort
    if [[ $(expr "${qpidPorts[$j]}" : ".*${port}") -eq 0 ]]; then continue; fi # No qpidd at this port.
    qpid-route route list $node:$port | cut -d" " -f2,4 | sed s/:/\ / > "/tmp/${user}${node}${brokers[$i]}out" &
    #echo "for i=$i: found $port"
  done
  let j=$j+1
done

wait

# Display routes.
i=0
for node in $physNodes; do
  if [[ $node = "localhost" ]]; then displaynode=""
  else                               displaynode=$(getNodeName $node)":"; fi
  for port in $ports; do
    let i=$port-$basePort
    if [[ ! -a /tmp/${user}${node}${brokers[$i]}out ]]; then continue; fi # There is no broker at this port.

    let len=${#displaynode}+${#brokers[i]}
    spaces=$(padSpaces $len)

    echo "${displaynode}${brokers[i]} :"
    while read routeLine; do
      sourceBrokerNode=${routeLine%% *} # Get first word (delimited by space)
      route=${routeLine##* } # Get last word (delimited by space)
      firstWords=${routeLine% *} # Get first two words
      sourceBrokerPort=${firstWords##* } # Get 2nd word (port)
      let sourceBrokerIndex=$sourceBrokerPort-$basePort

      route1=${route%%\.*} # Get first part of route
      route2=${route#*\.} # Get 2nd to last word
      route2=${route2#*\.} # Get 2nd to last word
      route2=${route2#*\.} # Get 2nd to last word
      route2=${route2#*\.} # Get 2nd to last word
      route2=${route2#*\.} # Get 2nd to last word
      if [[ ${#route2} -ne 1 ]]; then route="$route1...$route2"; fi
      sourceBrokerNode=$(getNodeName $sourceBrokerNode)
      echo "${spaces} + ${sourceBrokerNode}:${brokers[$sourceBrokerIndex]} $route"
    done < "/tmp/${user}${node}${brokers[$i]}out"
    let i=$i+1
  done
done

#rm /tmp/${user}* 2>/dev/null
