#!/bin/sh
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2012-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@
#
# This script examines the Qpid broker network on a cluster or development workstation.  The script is hardcoded to
# expect the different brokers (NLB, EB, EFB, ...) at certain port numbers relative to $QPID_NODE_PORT.  The discovery
# of brokers relies on this idea.  After discovering the set of brokers and logical nodes for the instance, the
# script finds all routes between brokers and displays these.   The second part of the script determines if there are
# any routes missing.  It uses the predefined connections necessary for the network and then if any are missing, prints
# these to the screen and attempts to recreate them.

user=$(whoami)
basePort=$QPID_NODE_PORT
numBrokers=9

which pdsh >/dev/null 2>&1
workstation=$? # Set to 0 if cluster, or 1 if workstation.

usage() {
  cat <<EOF

Usage: $0 [ -n ] [ -v ] [ -v ] [ <node>:<port or broker abbreviation> ]

Display and fix routes between SeaPilot brokers.

Arguments:
   -n       Do not fix, simply report the missing routes.
   -v       Verbose: display more info
   -v -v    Extra verbose: even more info

    <node>  node name or ip address

    <port or broker abbreviation>
            Port number or broker designation of the broker to inspect.

    If <node>:<port or broker abbreviation> is not specified, the default
    is to inspect all brokers on all nodes.

Broker Abbreviations:
    NLB     node local broker
    EFB     external facing broker
    EB      event broker
    HB      health broker
    PB      performance broker
    SB      security broker
    CEB     consolodating event broker
    CHB     consolodating health broker
    CPB     consolodating performance broker
EOF
}

padSpaces() {
  width=$1
  format="%-${width}.${width}s"
  printf $format
}

getIPAddr()
{
  # The argument is the node name.  If it is of form "sqws21.caclab. ..." then it's a workstation
  if [[ $(expr "$1" : ".*\..*") -ne 0 ]]; then # Workstation
    printf $(/sbin/ifconfig | grep "inet addr:16" | cut -d":" -f2 | cut -d" " -f1)
  else
    printf $(pdsh -w $1 /sbin/ifconfig | grep "inet addr:16" | cut -d":" -f2 | cut -d" " -f1)
  fi
}

getNodeName()
{
  # The argument is the IP address or possibly the node name - convert to shortened node name
  if [[ $(expr "$1" : "16\..*") -ne 0 ]] || [[ $(expr "$1" : "172\..*") -ne 0 ]]; then    # of form 16.*.*.*
    printf $(/usr/bin/nslookup $1 | grep "name = " | cut -d"=" -f2- | cut -d"." -f1)
  else
    printf $(echo $1 | cut -d"." -f1)
  fi
}

getNodeNameFromLogicalNum()
{
  # The argument is the logical node number
  gnnCnt=0
  for gnnNode in $physNodes; do
     if [[ $gnnCnt = $1 ]]; then break; fi
  done
  printf $gnnNode
}

getPortFromBroker()
{
  # Argument is broker abbreviation - e.g. "EFB"
  i=0
  while [[ $i -lt $numBrokers ]]; do
    if [[ ${brokers[$i]} = $1 ]]; then
      let port=$basePort+$i
      printf $port
    fi
    let i=$i+1
  done
}

getLogicalNodeNum()
{
  # Argument is name of node - e.g. n001.
  lncnt=0
  for $lnnode in $physNodes; do
    if [[ $1 = $lnnode ]]; then break; fi
    let lncnt=$lncnt+1
  done
  printf $lncnt
}

checkRoutes()
{
  crSrcNode=$1
  crSrcBrk=$2
  crDestBrk=$3
  crRoute=$4
  crDestNode=$5
  crrqdRoute="$crDestBrk $crSrcNode:$crSrcBrk $crRoute"
  crCnt=0
  if [[ $crDestNode = "" ]]; then
    # No dest broker node specified.  Could be any.
    while [[ $crCnt -lt $outcnt ]]; do
       crallRoute=${allRoutes[$crCnt]#*:} # Remove leading dest node name.
       if [[ $crallRoute = $crrqdRoute ]]; then break; fi # if the route exists, stop looking.
       let crCnt=$crCnt+1
    done
  else
    # Dest broker node specified.  Must exist.
    [[ $verbose -ge 1 ]] && echo " Looking for route $crrqdRoute $crDestNode"
    while [[ $crCnt -lt $outcnt ]]; do
       crallRoute=${allRoutes[$crCnt]}
       [[ $verbose -ge 2 ]] && echo "  Checking route $crallRoute"
       if [[ $crallRoute = "$crDestNode:$crrqdRoute" ]]; then break; fi # if the route exists, stop looking.
       let crCnt=$crCnt+1
    done
  fi

  if [[ $crCnt -eq $outcnt ]]; then
    # Route not found. Create.   First get port for this broker.

    crport=$(getPortFromBroker $crDestBrk)
    if [[ $crDestNode = "" ]]; then
      # Find node with dest broker.
      # Find a node using port #.
      crnodecnt=0
      for crnode in $physNodes; do
        if [[ $(expr "${qpidPorts[$crnodecnt]}" : ".*${crport}") -ne 0 ]]; then break; fi # Broker found.
        let crnodecnt=$crnodecnt+1
      done
      crDestNode=$(getNodeNameFromLogicalNum $crnodecnt)
      [[ $verbose -ge 1  ]] && echo " Found node with $crDestBrk: $crDestNode"
    fi
    echo "Missing route $crDestNode:$crDestBrk $crSrcNode:$crSrcBrk $crRoute"

    # Create route
    if [[ $validate_only -ne 1 ]]; then
      qpid-route route add $crDestNode:$(getPortFromBroker $crDestBrk) $crSrcNode:$(getPortFromBroker $crSrcBrk) "amq.topic" $crRoute &
      echo "Creating route."
      [[ $verbose -ge 1  ]] && echo " qpid-route route add $crDestNode:$(getPortFromBroker $crDestBrk) $crSrcNode:$(getPortFromBroker $crSrcBrk) "amq.topic" $crRoute &"
    fi # not validate_only
  fi
}

# Create array of broker names.
brokers[0]="NLB"
brokers[1]="EFB"
brokers[2]="EB"
brokers[3]="PB"
brokers[4]="HB"
brokers[5]="SB"
brokers[6]="CEB"
brokers[7]="CPB"
brokers[8]="CHB"
numBrokers=9

# Check for EFB SSL
ssl=$(ps -ef | grep qpidd | grep "$user " | grep -v grep | grep "qpidd\.cfg")
if [[ $ssl != "" ]]; then
  brokers[1]="EFBSSL"
  brokers[9]="EFB"
  numBrokers=10
fi

let lastPort=$basePort+$numBrokers
# Create list of active instance ports
port=$basePort;
i=0
while [[ $i -lt $numBrokers ]]; do
  let port=$basePort+$i;
  if [[ ${brokers[$i]} != "EFBSSL" ]]; then
    ports="$ports $port";
  fi
  let i=$i+1;
done

# Look for optional switches
validate_only=0 # find & display missing routes=1, fix them too=0
verbose=0      # spew=2, moderate verbage=1, normal=0

for i in $* ; do
  case $i in
    -n) validate_only=1                 ; shift ;;
    -v) verbose=$(expr $verbose + 1) ; shift ;;
    -*) usage                      ; exit -1 ;; # unrecognized flag
     *) break ;; # leave the rest of the args for the following
  esac
done

# Get set of nodes to display dest brokers for.
if [[ $1 != "" ]]; then
  physNodes=$(echo $1 | cut -d":" -f1)
  ports=$(echo $1 | cut -d":" -f2)
  if [[ $physNodes = "" && $ports = "" ]]; then
    usage
    exit -1
  fi
  if [[ $ports != "" ]]; then
    if [[ $ports != [0-9]* ]]; then
       ports=$(getPortFromBroker $ports)
    fi
  fi
else
  # Get all logical nodes - is there a better way to do this?
  physNodes=$(echo "node" | sqshell -a | grep Node | cut -d"=" -f2 | cut -d"," -f1)
fi
if [[ $physNodes = "" ]]; then physNodes="localhost"; fi  # workstation
if [[ $workstation -eq 1 ]]; then physNodes=$(echo $physNodes | cut -d" " -f1 | cut -d"." -f1); fi

# Find active qpidd ports
i=0;
for node in $physNodes; do
  if [[ $workstation -eq 1 ]]; then
    qpidPorts[$i]=$(ps -f -U $user | grep "\-\-port=" | sed s/..*--port/--port/ | cut -d" " -f1 | cut -d"=" -f2)
  else
    qpidPorts[$i]=$(pdsh -w $node ps -f -U $user | grep "\-\-port=" | sed s/..*--port/--port/ | cut -d" " -f1 | cut -d"=" -f2)
  fi
  #echo ${qpidPorts[$i]}
  let i=$i+1
done

# Get all routing info
j=0
for node in $physNodes; do
  #echo "Node=$node, ports=$ports"
  #echo ${qpidPorts[$j]}
  for port in $ports; do
    let i=$port-$basePort
    if [[ $(expr "${qpidPorts[$j]}" : ".*${port}") -eq 0 ]]; then continue; fi # No qpidd at this port.
    qpid-route route list $node:$port | cut -d" " -f2,4 | sed s/:/\ / > "/tmp/${user}${node}${brokers[$i]}out" &
    #echo "for i=$i: found $port"
  done
  let j=$j+1
done

wait

# Display routes.
i=0
outcnt=0
for node in $physNodes; do
  if [[ $node = "localhost" ]]; then displaynode=""
  else                               displaynode=$(getNodeName $node)":"; fi
  for port in $ports; do
    let i=$port-$basePort
    if [[ ! -a /tmp/${user}${node}${brokers[$i]}out ]]; then continue; fi # There is no broker at this port.

    let len=${#displaynode}+${#brokers[i]}
    spaces=$(padSpaces $len)

    echo "${displaynode}${brokers[i]} : (port=$(getPortFromBroker ${brokers[i]}))"
    while read routeLine; do
      sourceBrokerNode=${routeLine%% *} # Get first word (delimited by space)
      origroute=${routeLine##* } # Get last word (delimited by space)
      firstWords=${routeLine% *} # Get first two words
      sourceBrokerPort=${firstWords##* } # Get 2nd word (port)
      let sourceBrokerIndex=$sourceBrokerPort-$basePort
      if [[ $sourceBrokerIndex -lt 0 ]] || [[ $sourceBrokerIndex -gt $numBrokers ]]; then continue; fi # skip this route

      route=$origroute
      route1=${origroute%%\.*} # Get first part of route
      route2=${origroute#*\.} # Get 2nd to last word
      route2=${route2#*\.} # Get 2nd to last word
      route2=${route2#*\.} # Get 2nd to last word
      route2=${route2#*\.} # Get 2nd to last word
      route2=${route2#*\.} # Get 2nd to last word .. oh brother, but it's still faster than 'cut'.
      if [[ ${#route2} -ne 1 ]]; then route="$route1...$route2"; fi
      sourceBrokerNode=$(getNodeName $sourceBrokerNode)
      echo "${spaces} + ${sourceBrokerNode}:${brokers[$sourceBrokerIndex]} $route"

      allRoutes[$outcnt]="${displaynode}${brokers[i]} ${sourceBrokerNode}:${brokers[$sourceBrokerIndex]} $origroute"
      let outcnt=$outcnt+1

    done < "/tmp/${user}${node}${brokers[$i]}out"
    let i=$i+1
  done
done

# Check all routes.
for longnode in $physNodes; do
  node=$(getNodeName $longnode)
  for port in $ports; do
    let i=$port-$basePort
    if [[ ! -a /tmp/${user}${longnode}${brokers[$i]}out ]]; then continue; fi # There is no broker at this port.

    let len=${#displaynode}+${#brokers[i]}
    spaces=$(padSpaces $len)

    broker=${brokers[$i]}
    if [[ $broker = "NLB" ]]; then
      # Check routes to EB, PB, HB, SB
      checkRoutes $node NLB EB event.#
      checkRoutes $node NLB PB performance_stat.#
      checkRoutes $node NLB HB health_state.#
      checkRoutes $node NLB SB security.#
    elif [[ $broker = "EB" ]]; then
      # Check routes to CEB
      checkRoutes $node EB CEB event.#
    elif [[ $broker = "PB" ]]; then
      # Check routes to CPB
      checkRoutes $node PB CPB performance_stat.#
    elif [[ $broker = "HB" ]]; then
      # Check routes to CHB
      checkRoutes $node HB CHB health_state.#
    fi
  done
done

wait # wait for all qpid-route route adds to complete

rm /tmp/${user}* 2>/dev/null
