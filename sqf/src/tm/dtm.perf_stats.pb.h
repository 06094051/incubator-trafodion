// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_dtm_2eperf_5fstats_2eproto__INCLUDED
#define PROTOBUF_dtm_2eperf_5fstats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.qpid_header.pb.h"

namespace dtm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();
void protobuf_AssignDesc_dtm_2eperf_5fstats_2eproto();
void protobuf_ShutdownFile_dtm_2eperf_5fstats_2eproto();

class tm_perf_stats;
class tm_perf_tx_begin;
class tm_perf_audit_write;
class tm_perf_abort_count;
class tm_perf_commit_count;
class tm_perf_resources_by_node;

// ===================================================================

class tm_perf_stats : public ::google::protobuf::Message {
 public:
  tm_perf_stats();
  virtual ~tm_perf_stats();
  
  tm_perf_stats(const tm_perf_stats& from);
  
  inline tm_perf_stats& operator=(const tm_perf_stats& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_perf_stats& default_instance();
  void Swap(tm_perf_stats* other);
  
  // implements Message ----------------------------------------------
  
  tm_perf_stats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_perf_stats& from);
  void MergeFrom(const tm_perf_stats& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .common.qpid_header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::qpid_header& header() const;
  inline ::common::qpid_header* mutable_header();
  
  // required int64 tx_count = 2;
  inline bool has_tx_count() const;
  inline void clear_tx_count();
  static const int kTxCountFieldNumber = 2;
  inline ::google::protobuf::int64 tx_count() const;
  inline void set_tx_count(::google::protobuf::int64 value);
  
  // required int64 abort_count = 3;
  inline bool has_abort_count() const;
  inline void clear_abort_count();
  static const int kAbortCountFieldNumber = 3;
  inline ::google::protobuf::int64 abort_count() const;
  inline void set_abort_count(::google::protobuf::int64 value);
  
  // required int64 commit_count = 4;
  inline bool has_commit_count() const;
  inline void clear_commit_count();
  static const int kCommitCountFieldNumber = 4;
  inline ::google::protobuf::int64 commit_count() const;
  inline void set_commit_count(::google::protobuf::int64 value);
  
  // required int64 tm_initiated_aborts = 5;
  inline bool has_tm_initiated_aborts() const;
  inline void clear_tm_initiated_aborts();
  static const int kTmInitiatedAbortsFieldNumber = 5;
  inline ::google::protobuf::int64 tm_initiated_aborts() const;
  inline void set_tm_initiated_aborts(::google::protobuf::int64 value);
  
  // required string tm_state = 6;
  inline bool has_tm_state() const;
  inline void clear_tm_state();
  static const int kTmStateFieldNumber = 6;
  inline const ::std::string& tm_state() const;
  inline void set_tm_state(const ::std::string& value);
  inline void set_tm_state(const char* value);
  inline void set_tm_state(const char* value, size_t size);
  inline ::std::string* mutable_tm_state();
  
  // required string tx_state = 7;
  inline bool has_tx_state() const;
  inline void clear_tx_state();
  static const int kTxStateFieldNumber = 7;
  inline const ::std::string& tx_state() const;
  inline void set_tx_state(const ::std::string& value);
  inline void set_tx_state(const char* value);
  inline void set_tx_state(const char* value, size_t size);
  inline ::std::string* mutable_tx_state();
  
  // required int32 hung_tx_count = 8;
  inline bool has_hung_tx_count() const;
  inline void clear_hung_tx_count();
  static const int kHungTxCountFieldNumber = 8;
  inline ::google::protobuf::int32 hung_tx_count() const;
  inline void set_hung_tx_count(::google::protobuf::int32 value);
  
  // required int32 outstanding_tx_count = 9;
  inline bool has_outstanding_tx_count() const;
  inline void clear_outstanding_tx_count();
  static const int kOutstandingTxCountFieldNumber = 9;
  inline ::google::protobuf::int32 outstanding_tx_count() const;
  inline void set_outstanding_tx_count(::google::protobuf::int32 value);
  
  // required bytes oldest_transid = 10;
  inline bool has_oldest_transid() const;
  inline void clear_oldest_transid();
  static const int kOldestTransidFieldNumber = 10;
  inline const ::std::string& oldest_transid() const;
  inline void set_oldest_transid(const ::std::string& value);
  inline void set_oldest_transid(const char* value);
  inline void set_oldest_transid(const void* value, size_t size);
  inline ::std::string* mutable_oldest_transid();
  
  // required int64 oldest_transid_timestamp = 11;
  inline bool has_oldest_transid_timestamp() const;
  inline void clear_oldest_transid_timestamp();
  static const int kOldestTransidTimestampFieldNumber = 11;
  inline ::google::protobuf::int64 oldest_transid_timestamp() const;
  inline void set_oldest_transid_timestamp(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::common::qpid_header* header_;
  ::google::protobuf::int64 tx_count_;
  ::google::protobuf::int64 abort_count_;
  ::google::protobuf::int64 commit_count_;
  ::google::protobuf::int64 tm_initiated_aborts_;
  ::std::string* tm_state_;
  static const ::std::string _default_tm_state_;
  ::std::string* tx_state_;
  static const ::std::string _default_tx_state_;
  ::google::protobuf::int32 hung_tx_count_;
  ::google::protobuf::int32 outstanding_tx_count_;
  ::std::string* oldest_transid_;
  static const ::std::string _default_oldest_transid_;
  ::google::protobuf::int64 oldest_transid_timestamp_;
  friend void  protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_AssignDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_ShutdownFile_dtm_2eperf_5fstats_2eproto();
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static tm_perf_stats* default_instance_;
};
// -------------------------------------------------------------------

class tm_perf_tx_begin : public ::google::protobuf::Message {
 public:
  tm_perf_tx_begin();
  virtual ~tm_perf_tx_begin();
  
  tm_perf_tx_begin(const tm_perf_tx_begin& from);
  
  inline tm_perf_tx_begin& operator=(const tm_perf_tx_begin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_perf_tx_begin& default_instance();
  void Swap(tm_perf_tx_begin* other);
  
  // implements Message ----------------------------------------------
  
  tm_perf_tx_begin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_perf_tx_begin& from);
  void MergeFrom(const tm_perf_tx_begin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .common.qpid_header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::qpid_header& header() const;
  inline ::common::qpid_header* mutable_header();
  
  // required int64 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int64 count() const;
  inline void set_count(::google::protobuf::int64 value);
  
  // required int64 nid = 3;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNidFieldNumber = 3;
  inline ::google::protobuf::int64 nid() const;
  inline void set_nid(::google::protobuf::int64 value);
  
  // optional int64 pid = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 4;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);
  
  // required bytes oldest_transid = 5;
  inline bool has_oldest_transid() const;
  inline void clear_oldest_transid();
  static const int kOldestTransidFieldNumber = 5;
  inline const ::std::string& oldest_transid() const;
  inline void set_oldest_transid(const ::std::string& value);
  inline void set_oldest_transid(const char* value);
  inline void set_oldest_transid(const void* value, size_t size);
  inline ::std::string* mutable_oldest_transid();
  
  // required int64 oldest_transid_timestamp = 6;
  inline bool has_oldest_transid_timestamp() const;
  inline void clear_oldest_transid_timestamp();
  static const int kOldestTransidTimestampFieldNumber = 6;
  inline ::google::protobuf::int64 oldest_transid_timestamp() const;
  inline void set_oldest_transid_timestamp(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::common::qpid_header* header_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::int64 nid_;
  ::google::protobuf::int64 pid_;
  ::std::string* oldest_transid_;
  static const ::std::string _default_oldest_transid_;
  ::google::protobuf::int64 oldest_transid_timestamp_;
  friend void  protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_AssignDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_ShutdownFile_dtm_2eperf_5fstats_2eproto();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static tm_perf_tx_begin* default_instance_;
};
// -------------------------------------------------------------------

class tm_perf_audit_write : public ::google::protobuf::Message {
 public:
  tm_perf_audit_write();
  virtual ~tm_perf_audit_write();
  
  tm_perf_audit_write(const tm_perf_audit_write& from);
  
  inline tm_perf_audit_write& operator=(const tm_perf_audit_write& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_perf_audit_write& default_instance();
  void Swap(tm_perf_audit_write* other);
  
  // implements Message ----------------------------------------------
  
  tm_perf_audit_write* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_perf_audit_write& from);
  void MergeFrom(const tm_perf_audit_write& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .common.qpid_header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::qpid_header& header() const;
  inline ::common::qpid_header* mutable_header();
  
  // required int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required int64 nid = 3;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNidFieldNumber = 3;
  inline ::google::protobuf::int64 nid() const;
  inline void set_nid(::google::protobuf::int64 value);
  
  // required int64 pid = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 4;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);
  
  // required int64 transid_1 = 5;
  inline bool has_transid_1() const;
  inline void clear_transid_1();
  static const int kTransid1FieldNumber = 5;
  inline ::google::protobuf::int64 transid_1() const;
  inline void set_transid_1(::google::protobuf::int64 value);
  
  // required int64 transid_2 = 6;
  inline bool has_transid_2() const;
  inline void clear_transid_2();
  static const int kTransid2FieldNumber = 6;
  inline ::google::protobuf::int64 transid_2() const;
  inline void set_transid_2(::google::protobuf::int64 value);
  
  // required int64 transid_3 = 7;
  inline bool has_transid_3() const;
  inline void clear_transid_3();
  static const int kTransid3FieldNumber = 7;
  inline ::google::protobuf::int64 transid_3() const;
  inline void set_transid_3(::google::protobuf::int64 value);
  
  // required int64 transid_4 = 8;
  inline bool has_transid_4() const;
  inline void clear_transid_4();
  static const int kTransid4FieldNumber = 8;
  inline ::google::protobuf::int64 transid_4() const;
  inline void set_transid_4(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::common::qpid_header* header_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 nid_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int64 transid_1_;
  ::google::protobuf::int64 transid_2_;
  ::google::protobuf::int64 transid_3_;
  ::google::protobuf::int64 transid_4_;
  friend void  protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_AssignDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_ShutdownFile_dtm_2eperf_5fstats_2eproto();
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static tm_perf_audit_write* default_instance_;
};
// -------------------------------------------------------------------

class tm_perf_abort_count : public ::google::protobuf::Message {
 public:
  tm_perf_abort_count();
  virtual ~tm_perf_abort_count();
  
  tm_perf_abort_count(const tm_perf_abort_count& from);
  
  inline tm_perf_abort_count& operator=(const tm_perf_abort_count& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_perf_abort_count& default_instance();
  void Swap(tm_perf_abort_count* other);
  
  // implements Message ----------------------------------------------
  
  tm_perf_abort_count* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_perf_abort_count& from);
  void MergeFrom(const tm_perf_abort_count& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .common.qpid_header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::qpid_header& header() const;
  inline ::common::qpid_header* mutable_header();
  
  // required int64 abort = 2;
  inline bool has_abort() const;
  inline void clear_abort();
  static const int kAbortFieldNumber = 2;
  inline ::google::protobuf::int64 abort() const;
  inline void set_abort(::google::protobuf::int64 value);
  
  // required int64 nid = 3;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNidFieldNumber = 3;
  inline ::google::protobuf::int64 nid() const;
  inline void set_nid(::google::protobuf::int64 value);
  
  // required int64 pid = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 4;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);
  
  // required bytes oldest_transid = 5;
  inline bool has_oldest_transid() const;
  inline void clear_oldest_transid();
  static const int kOldestTransidFieldNumber = 5;
  inline const ::std::string& oldest_transid() const;
  inline void set_oldest_transid(const ::std::string& value);
  inline void set_oldest_transid(const char* value);
  inline void set_oldest_transid(const void* value, size_t size);
  inline ::std::string* mutable_oldest_transid();
  
  // required int64 oldest_transid_timestamp = 6;
  inline bool has_oldest_transid_timestamp() const;
  inline void clear_oldest_transid_timestamp();
  static const int kOldestTransidTimestampFieldNumber = 6;
  inline ::google::protobuf::int64 oldest_transid_timestamp() const;
  inline void set_oldest_transid_timestamp(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::common::qpid_header* header_;
  ::google::protobuf::int64 abort_;
  ::google::protobuf::int64 nid_;
  ::google::protobuf::int64 pid_;
  ::std::string* oldest_transid_;
  static const ::std::string _default_oldest_transid_;
  ::google::protobuf::int64 oldest_transid_timestamp_;
  friend void  protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_AssignDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_ShutdownFile_dtm_2eperf_5fstats_2eproto();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static tm_perf_abort_count* default_instance_;
};
// -------------------------------------------------------------------

class tm_perf_commit_count : public ::google::protobuf::Message {
 public:
  tm_perf_commit_count();
  virtual ~tm_perf_commit_count();
  
  tm_perf_commit_count(const tm_perf_commit_count& from);
  
  inline tm_perf_commit_count& operator=(const tm_perf_commit_count& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_perf_commit_count& default_instance();
  void Swap(tm_perf_commit_count* other);
  
  // implements Message ----------------------------------------------
  
  tm_perf_commit_count* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_perf_commit_count& from);
  void MergeFrom(const tm_perf_commit_count& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .common.qpid_header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::qpid_header& header() const;
  inline ::common::qpid_header* mutable_header();
  
  // required int64 commit = 2;
  inline bool has_commit() const;
  inline void clear_commit();
  static const int kCommitFieldNumber = 2;
  inline ::google::protobuf::int64 commit() const;
  inline void set_commit(::google::protobuf::int64 value);
  
  // required int64 nid = 3;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNidFieldNumber = 3;
  inline ::google::protobuf::int64 nid() const;
  inline void set_nid(::google::protobuf::int64 value);
  
  // required int64 pid = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 4;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);
  
  // required bytes oldest_transid = 5;
  inline bool has_oldest_transid() const;
  inline void clear_oldest_transid();
  static const int kOldestTransidFieldNumber = 5;
  inline const ::std::string& oldest_transid() const;
  inline void set_oldest_transid(const ::std::string& value);
  inline void set_oldest_transid(const char* value);
  inline void set_oldest_transid(const void* value, size_t size);
  inline ::std::string* mutable_oldest_transid();
  
  // required int64 oldest_transid_timestamp = 6;
  inline bool has_oldest_transid_timestamp() const;
  inline void clear_oldest_transid_timestamp();
  static const int kOldestTransidTimestampFieldNumber = 6;
  inline ::google::protobuf::int64 oldest_transid_timestamp() const;
  inline void set_oldest_transid_timestamp(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::common::qpid_header* header_;
  ::google::protobuf::int64 commit_;
  ::google::protobuf::int64 nid_;
  ::google::protobuf::int64 pid_;
  ::std::string* oldest_transid_;
  static const ::std::string _default_oldest_transid_;
  ::google::protobuf::int64 oldest_transid_timestamp_;
  friend void  protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_AssignDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_ShutdownFile_dtm_2eperf_5fstats_2eproto();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static tm_perf_commit_count* default_instance_;
};
// -------------------------------------------------------------------

class tm_perf_resources_by_node : public ::google::protobuf::Message {
 public:
  tm_perf_resources_by_node();
  virtual ~tm_perf_resources_by_node();
  
  tm_perf_resources_by_node(const tm_perf_resources_by_node& from);
  
  inline tm_perf_resources_by_node& operator=(const tm_perf_resources_by_node& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_perf_resources_by_node& default_instance();
  void Swap(tm_perf_resources_by_node* other);
  
  // implements Message ----------------------------------------------
  
  tm_perf_resources_by_node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_perf_resources_by_node& from);
  void MergeFrom(const tm_perf_resources_by_node& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .common.qpid_header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::common::qpid_header& header() const;
  inline ::common::qpid_header* mutable_header();
  
  // required int64 node = 2;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 2;
  inline ::google::protobuf::int64 node() const;
  inline void set_node(::google::protobuf::int64 value);
  
  // required int32 tx_poolThresholdEventCounter = 3;
  inline bool has_tx_poolthresholdeventcounter() const;
  inline void clear_tx_poolthresholdeventcounter();
  static const int kTxPoolThresholdEventCounterFieldNumber = 3;
  inline ::google::protobuf::int32 tx_poolthresholdeventcounter() const;
  inline void set_tx_poolthresholdeventcounter(::google::protobuf::int32 value);
  
  // required int32 tx_poolSizeNow = 4;
  inline bool has_tx_poolsizenow() const;
  inline void clear_tx_poolsizenow();
  static const int kTxPoolSizeNowFieldNumber = 4;
  inline ::google::protobuf::int32 tx_poolsizenow() const;
  inline void set_tx_poolsizenow(::google::protobuf::int32 value);
  
  // required int32 tx_inUseListNow = 5;
  inline bool has_tx_inuselistnow() const;
  inline void clear_tx_inuselistnow();
  static const int kTxInUseListNowFieldNumber = 5;
  inline ::google::protobuf::int32 tx_inuselistnow() const;
  inline void set_tx_inuselistnow(::google::protobuf::int32 value);
  
  // required int32 tx_freeListNow = 6;
  inline bool has_tx_freelistnow() const;
  inline void clear_tx_freelistnow();
  static const int kTxFreeListNowFieldNumber = 6;
  inline ::google::protobuf::int32 tx_freelistnow() const;
  inline void set_tx_freelistnow(::google::protobuf::int32 value);
  
  // required int32 tx_steadyStateLow = 7;
  inline bool has_tx_steadystatelow() const;
  inline void clear_tx_steadystatelow();
  static const int kTxSteadyStateLowFieldNumber = 7;
  inline ::google::protobuf::int32 tx_steadystatelow() const;
  inline void set_tx_steadystatelow(::google::protobuf::int32 value);
  
  // required int32 tx_steadyStateHigh = 8;
  inline bool has_tx_steadystatehigh() const;
  inline void clear_tx_steadystatehigh();
  static const int kTxSteadyStateHighFieldNumber = 8;
  inline ::google::protobuf::int32 tx_steadystatehigh() const;
  inline void set_tx_steadystatehigh(::google::protobuf::int32 value);
  
  // required int32 tx_max = 9;
  inline bool has_tx_max() const;
  inline void clear_tx_max();
  static const int kTxMaxFieldNumber = 9;
  inline ::google::protobuf::int32 tx_max() const;
  inline void set_tx_max(::google::protobuf::int32 value);
  
  // required int32 tx_totalAllocs_new = 10;
  inline bool has_tx_totalallocs_new() const;
  inline void clear_tx_totalallocs_new();
  static const int kTxTotalAllocsNewFieldNumber = 10;
  inline ::google::protobuf::int32 tx_totalallocs_new() const;
  inline void set_tx_totalallocs_new(::google::protobuf::int32 value);
  
  // required int32 tx_totalAllocs_free = 11;
  inline bool has_tx_totalallocs_free() const;
  inline void clear_tx_totalallocs_free();
  static const int kTxTotalAllocsFreeFieldNumber = 11;
  inline ::google::protobuf::int32 tx_totalallocs_free() const;
  inline void set_tx_totalallocs_free(::google::protobuf::int32 value);
  
  // required int32 tx_totalDeallocs_free = 12;
  inline bool has_tx_totaldeallocs_free() const;
  inline void clear_tx_totaldeallocs_free();
  static const int kTxTotalDeallocsFreeFieldNumber = 12;
  inline ::google::protobuf::int32 tx_totaldeallocs_free() const;
  inline void set_tx_totaldeallocs_free(::google::protobuf::int32 value);
  
  // required int32 tx_totalDeallocs_delete = 13;
  inline bool has_tx_totaldeallocs_delete() const;
  inline void clear_tx_totaldeallocs_delete();
  static const int kTxTotalDeallocsDeleteFieldNumber = 13;
  inline ::google::protobuf::int32 tx_totaldeallocs_delete() const;
  inline void set_tx_totaldeallocs_delete(::google::protobuf::int32 value);
  
  // required int64 tx_total_tx_count = 14;
  inline bool has_tx_total_tx_count() const;
  inline void clear_tx_total_tx_count();
  static const int kTxTotalTxCountFieldNumber = 14;
  inline ::google::protobuf::int64 tx_total_tx_count() const;
  inline void set_tx_total_tx_count(::google::protobuf::int64 value);
  
  // required int64 tx_total_abort_count = 15;
  inline bool has_tx_total_abort_count() const;
  inline void clear_tx_total_abort_count();
  static const int kTxTotalAbortCountFieldNumber = 15;
  inline ::google::protobuf::int64 tx_total_abort_count() const;
  inline void set_tx_total_abort_count(::google::protobuf::int64 value);
  
  // required int64 tx_total_commit_count = 16;
  inline bool has_tx_total_commit_count() const;
  inline void clear_tx_total_commit_count();
  static const int kTxTotalCommitCountFieldNumber = 16;
  inline ::google::protobuf::int64 tx_total_commit_count() const;
  inline void set_tx_total_commit_count(::google::protobuf::int64 value);
  
  // required int32 thread_poolThresholdEventCounter = 17;
  inline bool has_thread_poolthresholdeventcounter() const;
  inline void clear_thread_poolthresholdeventcounter();
  static const int kThreadPoolThresholdEventCounterFieldNumber = 17;
  inline ::google::protobuf::int32 thread_poolthresholdeventcounter() const;
  inline void set_thread_poolthresholdeventcounter(::google::protobuf::int32 value);
  
  // required int32 thread_poolSizeNow = 18;
  inline bool has_thread_poolsizenow() const;
  inline void clear_thread_poolsizenow();
  static const int kThreadPoolSizeNowFieldNumber = 18;
  inline ::google::protobuf::int32 thread_poolsizenow() const;
  inline void set_thread_poolsizenow(::google::protobuf::int32 value);
  
  // required int32 thread_inUseListNow = 19;
  inline bool has_thread_inuselistnow() const;
  inline void clear_thread_inuselistnow();
  static const int kThreadInUseListNowFieldNumber = 19;
  inline ::google::protobuf::int32 thread_inuselistnow() const;
  inline void set_thread_inuselistnow(::google::protobuf::int32 value);
  
  // required int32 thread_freeListNow = 20;
  inline bool has_thread_freelistnow() const;
  inline void clear_thread_freelistnow();
  static const int kThreadFreeListNowFieldNumber = 20;
  inline ::google::protobuf::int32 thread_freelistnow() const;
  inline void set_thread_freelistnow(::google::protobuf::int32 value);
  
  // required int32 thread_steadyStateLow = 21;
  inline bool has_thread_steadystatelow() const;
  inline void clear_thread_steadystatelow();
  static const int kThreadSteadyStateLowFieldNumber = 21;
  inline ::google::protobuf::int32 thread_steadystatelow() const;
  inline void set_thread_steadystatelow(::google::protobuf::int32 value);
  
  // required int32 thread_steadyStateHigh = 22;
  inline bool has_thread_steadystatehigh() const;
  inline void clear_thread_steadystatehigh();
  static const int kThreadSteadyStateHighFieldNumber = 22;
  inline ::google::protobuf::int32 thread_steadystatehigh() const;
  inline void set_thread_steadystatehigh(::google::protobuf::int32 value);
  
  // required int32 thread_max = 23;
  inline bool has_thread_max() const;
  inline void clear_thread_max();
  static const int kThreadMaxFieldNumber = 23;
  inline ::google::protobuf::int32 thread_max() const;
  inline void set_thread_max(::google::protobuf::int32 value);
  
  // required int32 thread_totalAllocs_new = 24;
  inline bool has_thread_totalallocs_new() const;
  inline void clear_thread_totalallocs_new();
  static const int kThreadTotalAllocsNewFieldNumber = 24;
  inline ::google::protobuf::int32 thread_totalallocs_new() const;
  inline void set_thread_totalallocs_new(::google::protobuf::int32 value);
  
  // required int32 thread_totalAllocs_free = 25;
  inline bool has_thread_totalallocs_free() const;
  inline void clear_thread_totalallocs_free();
  static const int kThreadTotalAllocsFreeFieldNumber = 25;
  inline ::google::protobuf::int32 thread_totalallocs_free() const;
  inline void set_thread_totalallocs_free(::google::protobuf::int32 value);
  
  // required int32 thread_totalDeallocs_free = 26;
  inline bool has_thread_totaldeallocs_free() const;
  inline void clear_thread_totaldeallocs_free();
  static const int kThreadTotalDeallocsFreeFieldNumber = 26;
  inline ::google::protobuf::int32 thread_totaldeallocs_free() const;
  inline void set_thread_totaldeallocs_free(::google::protobuf::int32 value);
  
  // required int32 thread_totalDeallocs_delete = 27;
  inline bool has_thread_totaldeallocs_delete() const;
  inline void clear_thread_totaldeallocs_delete();
  static const int kThreadTotalDeallocsDeleteFieldNumber = 27;
  inline ::google::protobuf::int32 thread_totaldeallocs_delete() const;
  inline void set_thread_totaldeallocs_delete(::google::protobuf::int32 value);
  
  // required int64 total_tx_count = 28;
  inline bool has_total_tx_count() const;
  inline void clear_total_tx_count();
  static const int kTotalTxCountFieldNumber = 28;
  inline ::google::protobuf::int64 total_tx_count() const;
  inline void set_total_tx_count(::google::protobuf::int64 value);
  
  // required int64 total_abort_count = 29;
  inline bool has_total_abort_count() const;
  inline void clear_total_abort_count();
  static const int kTotalAbortCountFieldNumber = 29;
  inline ::google::protobuf::int64 total_abort_count() const;
  inline void set_total_abort_count(::google::protobuf::int64 value);
  
  // required int64 total_commit_count = 30;
  inline bool has_total_commit_count() const;
  inline void clear_total_commit_count();
  static const int kTotalCommitCountFieldNumber = 30;
  inline ::google::protobuf::int64 total_commit_count() const;
  inline void set_total_commit_count(::google::protobuf::int64 value);
  
  // required int64 current_tx_count = 31;
  inline bool has_current_tx_count() const;
  inline void clear_current_tx_count();
  static const int kCurrentTxCountFieldNumber = 31;
  inline ::google::protobuf::int64 current_tx_count() const;
  inline void set_current_tx_count(::google::protobuf::int64 value);
  
  // required bytes oldest_transid = 32;
  inline bool has_oldest_transid() const;
  inline void clear_oldest_transid();
  static const int kOldestTransidFieldNumber = 32;
  inline const ::std::string& oldest_transid() const;
  inline void set_oldest_transid(const ::std::string& value);
  inline void set_oldest_transid(const char* value);
  inline void set_oldest_transid(const void* value, size_t size);
  inline ::std::string* mutable_oldest_transid();
  
  // required int64 oldest_transid_timestamp = 33;
  inline bool has_oldest_transid_timestamp() const;
  inline void clear_oldest_transid_timestamp();
  static const int kOldestTransidTimestampFieldNumber = 33;
  inline ::google::protobuf::int64 oldest_transid_timestamp() const;
  inline void set_oldest_transid_timestamp(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::common::qpid_header* header_;
  ::google::protobuf::int64 node_;
  ::google::protobuf::int32 tx_poolthresholdeventcounter_;
  ::google::protobuf::int32 tx_poolsizenow_;
  ::google::protobuf::int32 tx_inuselistnow_;
  ::google::protobuf::int32 tx_freelistnow_;
  ::google::protobuf::int32 tx_steadystatelow_;
  ::google::protobuf::int32 tx_steadystatehigh_;
  ::google::protobuf::int32 tx_max_;
  ::google::protobuf::int32 tx_totalallocs_new_;
  ::google::protobuf::int32 tx_totalallocs_free_;
  ::google::protobuf::int32 tx_totaldeallocs_free_;
  ::google::protobuf::int32 tx_totaldeallocs_delete_;
  ::google::protobuf::int64 tx_total_tx_count_;
  ::google::protobuf::int64 tx_total_abort_count_;
  ::google::protobuf::int64 tx_total_commit_count_;
  ::google::protobuf::int32 thread_poolthresholdeventcounter_;
  ::google::protobuf::int32 thread_poolsizenow_;
  ::google::protobuf::int32 thread_inuselistnow_;
  ::google::protobuf::int32 thread_freelistnow_;
  ::google::protobuf::int32 thread_steadystatelow_;
  ::google::protobuf::int32 thread_steadystatehigh_;
  ::google::protobuf::int32 thread_max_;
  ::google::protobuf::int32 thread_totalallocs_new_;
  ::google::protobuf::int32 thread_totalallocs_free_;
  ::google::protobuf::int32 thread_totaldeallocs_free_;
  ::google::protobuf::int32 thread_totaldeallocs_delete_;
  ::google::protobuf::int64 total_tx_count_;
  ::google::protobuf::int64 total_abort_count_;
  ::google::protobuf::int64 total_commit_count_;
  ::google::protobuf::int64 current_tx_count_;
  ::std::string* oldest_transid_;
  static const ::std::string _default_oldest_transid_;
  ::google::protobuf::int64 oldest_transid_timestamp_;
  friend void  protobuf_AddDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_AssignDesc_dtm_2eperf_5fstats_2eproto();
  friend void protobuf_ShutdownFile_dtm_2eperf_5fstats_2eproto();
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static tm_perf_resources_by_node* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// tm_perf_stats

// required .common.qpid_header header = 1;
inline bool tm_perf_stats::has_header() const {
  return _has_bit(0);
}
inline void tm_perf_stats::clear_header() {
  if (header_ != NULL) header_->::common::qpid_header::Clear();
  _clear_bit(0);
}
inline const ::common::qpid_header& tm_perf_stats::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::qpid_header* tm_perf_stats::mutable_header() {
  _set_bit(0);
  if (header_ == NULL) header_ = new ::common::qpid_header;
  return header_;
}

// required int64 tx_count = 2;
inline bool tm_perf_stats::has_tx_count() const {
  return _has_bit(1);
}
inline void tm_perf_stats::clear_tx_count() {
  tx_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 tm_perf_stats::tx_count() const {
  return tx_count_;
}
inline void tm_perf_stats::set_tx_count(::google::protobuf::int64 value) {
  _set_bit(1);
  tx_count_ = value;
}

// required int64 abort_count = 3;
inline bool tm_perf_stats::has_abort_count() const {
  return _has_bit(2);
}
inline void tm_perf_stats::clear_abort_count() {
  abort_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 tm_perf_stats::abort_count() const {
  return abort_count_;
}
inline void tm_perf_stats::set_abort_count(::google::protobuf::int64 value) {
  _set_bit(2);
  abort_count_ = value;
}

// required int64 commit_count = 4;
inline bool tm_perf_stats::has_commit_count() const {
  return _has_bit(3);
}
inline void tm_perf_stats::clear_commit_count() {
  commit_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 tm_perf_stats::commit_count() const {
  return commit_count_;
}
inline void tm_perf_stats::set_commit_count(::google::protobuf::int64 value) {
  _set_bit(3);
  commit_count_ = value;
}

// required int64 tm_initiated_aborts = 5;
inline bool tm_perf_stats::has_tm_initiated_aborts() const {
  return _has_bit(4);
}
inline void tm_perf_stats::clear_tm_initiated_aborts() {
  tm_initiated_aborts_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 tm_perf_stats::tm_initiated_aborts() const {
  return tm_initiated_aborts_;
}
inline void tm_perf_stats::set_tm_initiated_aborts(::google::protobuf::int64 value) {
  _set_bit(4);
  tm_initiated_aborts_ = value;
}

// required string tm_state = 6;
inline bool tm_perf_stats::has_tm_state() const {
  return _has_bit(5);
}
inline void tm_perf_stats::clear_tm_state() {
  if (tm_state_ != &_default_tm_state_) {
    tm_state_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& tm_perf_stats::tm_state() const {
  return *tm_state_;
}
inline void tm_perf_stats::set_tm_state(const ::std::string& value) {
  _set_bit(5);
  if (tm_state_ == &_default_tm_state_) {
    tm_state_ = new ::std::string;
  }
  tm_state_->assign(value);
}
inline void tm_perf_stats::set_tm_state(const char* value) {
  _set_bit(5);
  if (tm_state_ == &_default_tm_state_) {
    tm_state_ = new ::std::string;
  }
  tm_state_->assign(value);
}
inline void tm_perf_stats::set_tm_state(const char* value, size_t size) {
  _set_bit(5);
  if (tm_state_ == &_default_tm_state_) {
    tm_state_ = new ::std::string;
  }
  tm_state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_perf_stats::mutable_tm_state() {
  _set_bit(5);
  if (tm_state_ == &_default_tm_state_) {
    tm_state_ = new ::std::string;
  }
  return tm_state_;
}

// required string tx_state = 7;
inline bool tm_perf_stats::has_tx_state() const {
  return _has_bit(6);
}
inline void tm_perf_stats::clear_tx_state() {
  if (tx_state_ != &_default_tx_state_) {
    tx_state_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& tm_perf_stats::tx_state() const {
  return *tx_state_;
}
inline void tm_perf_stats::set_tx_state(const ::std::string& value) {
  _set_bit(6);
  if (tx_state_ == &_default_tx_state_) {
    tx_state_ = new ::std::string;
  }
  tx_state_->assign(value);
}
inline void tm_perf_stats::set_tx_state(const char* value) {
  _set_bit(6);
  if (tx_state_ == &_default_tx_state_) {
    tx_state_ = new ::std::string;
  }
  tx_state_->assign(value);
}
inline void tm_perf_stats::set_tx_state(const char* value, size_t size) {
  _set_bit(6);
  if (tx_state_ == &_default_tx_state_) {
    tx_state_ = new ::std::string;
  }
  tx_state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_perf_stats::mutable_tx_state() {
  _set_bit(6);
  if (tx_state_ == &_default_tx_state_) {
    tx_state_ = new ::std::string;
  }
  return tx_state_;
}

// required int32 hung_tx_count = 8;
inline bool tm_perf_stats::has_hung_tx_count() const {
  return _has_bit(7);
}
inline void tm_perf_stats::clear_hung_tx_count() {
  hung_tx_count_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 tm_perf_stats::hung_tx_count() const {
  return hung_tx_count_;
}
inline void tm_perf_stats::set_hung_tx_count(::google::protobuf::int32 value) {
  _set_bit(7);
  hung_tx_count_ = value;
}

// required int32 outstanding_tx_count = 9;
inline bool tm_perf_stats::has_outstanding_tx_count() const {
  return _has_bit(8);
}
inline void tm_perf_stats::clear_outstanding_tx_count() {
  outstanding_tx_count_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 tm_perf_stats::outstanding_tx_count() const {
  return outstanding_tx_count_;
}
inline void tm_perf_stats::set_outstanding_tx_count(::google::protobuf::int32 value) {
  _set_bit(8);
  outstanding_tx_count_ = value;
}

// required bytes oldest_transid = 10;
inline bool tm_perf_stats::has_oldest_transid() const {
  return _has_bit(9);
}
inline void tm_perf_stats::clear_oldest_transid() {
  if (oldest_transid_ != &_default_oldest_transid_) {
    oldest_transid_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& tm_perf_stats::oldest_transid() const {
  return *oldest_transid_;
}
inline void tm_perf_stats::set_oldest_transid(const ::std::string& value) {
  _set_bit(9);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_stats::set_oldest_transid(const char* value) {
  _set_bit(9);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_stats::set_oldest_transid(const void* value, size_t size) {
  _set_bit(9);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_perf_stats::mutable_oldest_transid() {
  _set_bit(9);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  return oldest_transid_;
}

// required int64 oldest_transid_timestamp = 11;
inline bool tm_perf_stats::has_oldest_transid_timestamp() const {
  return _has_bit(10);
}
inline void tm_perf_stats::clear_oldest_transid_timestamp() {
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(10);
}
inline ::google::protobuf::int64 tm_perf_stats::oldest_transid_timestamp() const {
  return oldest_transid_timestamp_;
}
inline void tm_perf_stats::set_oldest_transid_timestamp(::google::protobuf::int64 value) {
  _set_bit(10);
  oldest_transid_timestamp_ = value;
}

// -------------------------------------------------------------------

// tm_perf_tx_begin

// required .common.qpid_header header = 1;
inline bool tm_perf_tx_begin::has_header() const {
  return _has_bit(0);
}
inline void tm_perf_tx_begin::clear_header() {
  if (header_ != NULL) header_->::common::qpid_header::Clear();
  _clear_bit(0);
}
inline const ::common::qpid_header& tm_perf_tx_begin::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::qpid_header* tm_perf_tx_begin::mutable_header() {
  _set_bit(0);
  if (header_ == NULL) header_ = new ::common::qpid_header;
  return header_;
}

// required int64 count = 2;
inline bool tm_perf_tx_begin::has_count() const {
  return _has_bit(1);
}
inline void tm_perf_tx_begin::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 tm_perf_tx_begin::count() const {
  return count_;
}
inline void tm_perf_tx_begin::set_count(::google::protobuf::int64 value) {
  _set_bit(1);
  count_ = value;
}

// required int64 nid = 3;
inline bool tm_perf_tx_begin::has_nid() const {
  return _has_bit(2);
}
inline void tm_perf_tx_begin::clear_nid() {
  nid_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 tm_perf_tx_begin::nid() const {
  return nid_;
}
inline void tm_perf_tx_begin::set_nid(::google::protobuf::int64 value) {
  _set_bit(2);
  nid_ = value;
}

// optional int64 pid = 4;
inline bool tm_perf_tx_begin::has_pid() const {
  return _has_bit(3);
}
inline void tm_perf_tx_begin::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 tm_perf_tx_begin::pid() const {
  return pid_;
}
inline void tm_perf_tx_begin::set_pid(::google::protobuf::int64 value) {
  _set_bit(3);
  pid_ = value;
}

// required bytes oldest_transid = 5;
inline bool tm_perf_tx_begin::has_oldest_transid() const {
  return _has_bit(4);
}
inline void tm_perf_tx_begin::clear_oldest_transid() {
  if (oldest_transid_ != &_default_oldest_transid_) {
    oldest_transid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& tm_perf_tx_begin::oldest_transid() const {
  return *oldest_transid_;
}
inline void tm_perf_tx_begin::set_oldest_transid(const ::std::string& value) {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_tx_begin::set_oldest_transid(const char* value) {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_tx_begin::set_oldest_transid(const void* value, size_t size) {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_perf_tx_begin::mutable_oldest_transid() {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  return oldest_transid_;
}

// required int64 oldest_transid_timestamp = 6;
inline bool tm_perf_tx_begin::has_oldest_transid_timestamp() const {
  return _has_bit(5);
}
inline void tm_perf_tx_begin::clear_oldest_transid_timestamp() {
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 tm_perf_tx_begin::oldest_transid_timestamp() const {
  return oldest_transid_timestamp_;
}
inline void tm_perf_tx_begin::set_oldest_transid_timestamp(::google::protobuf::int64 value) {
  _set_bit(5);
  oldest_transid_timestamp_ = value;
}

// -------------------------------------------------------------------

// tm_perf_audit_write

// required .common.qpid_header header = 1;
inline bool tm_perf_audit_write::has_header() const {
  return _has_bit(0);
}
inline void tm_perf_audit_write::clear_header() {
  if (header_ != NULL) header_->::common::qpid_header::Clear();
  _clear_bit(0);
}
inline const ::common::qpid_header& tm_perf_audit_write::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::qpid_header* tm_perf_audit_write::mutable_header() {
  _set_bit(0);
  if (header_ == NULL) header_ = new ::common::qpid_header;
  return header_;
}

// required int64 time = 2;
inline bool tm_perf_audit_write::has_time() const {
  return _has_bit(1);
}
inline void tm_perf_audit_write::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 tm_perf_audit_write::time() const {
  return time_;
}
inline void tm_perf_audit_write::set_time(::google::protobuf::int64 value) {
  _set_bit(1);
  time_ = value;
}

// required int64 nid = 3;
inline bool tm_perf_audit_write::has_nid() const {
  return _has_bit(2);
}
inline void tm_perf_audit_write::clear_nid() {
  nid_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 tm_perf_audit_write::nid() const {
  return nid_;
}
inline void tm_perf_audit_write::set_nid(::google::protobuf::int64 value) {
  _set_bit(2);
  nid_ = value;
}

// required int64 pid = 4;
inline bool tm_perf_audit_write::has_pid() const {
  return _has_bit(3);
}
inline void tm_perf_audit_write::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 tm_perf_audit_write::pid() const {
  return pid_;
}
inline void tm_perf_audit_write::set_pid(::google::protobuf::int64 value) {
  _set_bit(3);
  pid_ = value;
}

// required int64 transid_1 = 5;
inline bool tm_perf_audit_write::has_transid_1() const {
  return _has_bit(4);
}
inline void tm_perf_audit_write::clear_transid_1() {
  transid_1_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 tm_perf_audit_write::transid_1() const {
  return transid_1_;
}
inline void tm_perf_audit_write::set_transid_1(::google::protobuf::int64 value) {
  _set_bit(4);
  transid_1_ = value;
}

// required int64 transid_2 = 6;
inline bool tm_perf_audit_write::has_transid_2() const {
  return _has_bit(5);
}
inline void tm_perf_audit_write::clear_transid_2() {
  transid_2_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 tm_perf_audit_write::transid_2() const {
  return transid_2_;
}
inline void tm_perf_audit_write::set_transid_2(::google::protobuf::int64 value) {
  _set_bit(5);
  transid_2_ = value;
}

// required int64 transid_3 = 7;
inline bool tm_perf_audit_write::has_transid_3() const {
  return _has_bit(6);
}
inline void tm_perf_audit_write::clear_transid_3() {
  transid_3_ = GOOGLE_LONGLONG(0);
  _clear_bit(6);
}
inline ::google::protobuf::int64 tm_perf_audit_write::transid_3() const {
  return transid_3_;
}
inline void tm_perf_audit_write::set_transid_3(::google::protobuf::int64 value) {
  _set_bit(6);
  transid_3_ = value;
}

// required int64 transid_4 = 8;
inline bool tm_perf_audit_write::has_transid_4() const {
  return _has_bit(7);
}
inline void tm_perf_audit_write::clear_transid_4() {
  transid_4_ = GOOGLE_LONGLONG(0);
  _clear_bit(7);
}
inline ::google::protobuf::int64 tm_perf_audit_write::transid_4() const {
  return transid_4_;
}
inline void tm_perf_audit_write::set_transid_4(::google::protobuf::int64 value) {
  _set_bit(7);
  transid_4_ = value;
}

// -------------------------------------------------------------------

// tm_perf_abort_count

// required .common.qpid_header header = 1;
inline bool tm_perf_abort_count::has_header() const {
  return _has_bit(0);
}
inline void tm_perf_abort_count::clear_header() {
  if (header_ != NULL) header_->::common::qpid_header::Clear();
  _clear_bit(0);
}
inline const ::common::qpid_header& tm_perf_abort_count::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::qpid_header* tm_perf_abort_count::mutable_header() {
  _set_bit(0);
  if (header_ == NULL) header_ = new ::common::qpid_header;
  return header_;
}

// required int64 abort = 2;
inline bool tm_perf_abort_count::has_abort() const {
  return _has_bit(1);
}
inline void tm_perf_abort_count::clear_abort() {
  abort_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 tm_perf_abort_count::abort() const {
  return abort_;
}
inline void tm_perf_abort_count::set_abort(::google::protobuf::int64 value) {
  _set_bit(1);
  abort_ = value;
}

// required int64 nid = 3;
inline bool tm_perf_abort_count::has_nid() const {
  return _has_bit(2);
}
inline void tm_perf_abort_count::clear_nid() {
  nid_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 tm_perf_abort_count::nid() const {
  return nid_;
}
inline void tm_perf_abort_count::set_nid(::google::protobuf::int64 value) {
  _set_bit(2);
  nid_ = value;
}

// required int64 pid = 4;
inline bool tm_perf_abort_count::has_pid() const {
  return _has_bit(3);
}
inline void tm_perf_abort_count::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 tm_perf_abort_count::pid() const {
  return pid_;
}
inline void tm_perf_abort_count::set_pid(::google::protobuf::int64 value) {
  _set_bit(3);
  pid_ = value;
}

// required bytes oldest_transid = 5;
inline bool tm_perf_abort_count::has_oldest_transid() const {
  return _has_bit(4);
}
inline void tm_perf_abort_count::clear_oldest_transid() {
  if (oldest_transid_ != &_default_oldest_transid_) {
    oldest_transid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& tm_perf_abort_count::oldest_transid() const {
  return *oldest_transid_;
}
inline void tm_perf_abort_count::set_oldest_transid(const ::std::string& value) {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_abort_count::set_oldest_transid(const char* value) {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_abort_count::set_oldest_transid(const void* value, size_t size) {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_perf_abort_count::mutable_oldest_transid() {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  return oldest_transid_;
}

// required int64 oldest_transid_timestamp = 6;
inline bool tm_perf_abort_count::has_oldest_transid_timestamp() const {
  return _has_bit(5);
}
inline void tm_perf_abort_count::clear_oldest_transid_timestamp() {
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 tm_perf_abort_count::oldest_transid_timestamp() const {
  return oldest_transid_timestamp_;
}
inline void tm_perf_abort_count::set_oldest_transid_timestamp(::google::protobuf::int64 value) {
  _set_bit(5);
  oldest_transid_timestamp_ = value;
}

// -------------------------------------------------------------------

// tm_perf_commit_count

// required .common.qpid_header header = 1;
inline bool tm_perf_commit_count::has_header() const {
  return _has_bit(0);
}
inline void tm_perf_commit_count::clear_header() {
  if (header_ != NULL) header_->::common::qpid_header::Clear();
  _clear_bit(0);
}
inline const ::common::qpid_header& tm_perf_commit_count::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::qpid_header* tm_perf_commit_count::mutable_header() {
  _set_bit(0);
  if (header_ == NULL) header_ = new ::common::qpid_header;
  return header_;
}

// required int64 commit = 2;
inline bool tm_perf_commit_count::has_commit() const {
  return _has_bit(1);
}
inline void tm_perf_commit_count::clear_commit() {
  commit_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 tm_perf_commit_count::commit() const {
  return commit_;
}
inline void tm_perf_commit_count::set_commit(::google::protobuf::int64 value) {
  _set_bit(1);
  commit_ = value;
}

// required int64 nid = 3;
inline bool tm_perf_commit_count::has_nid() const {
  return _has_bit(2);
}
inline void tm_perf_commit_count::clear_nid() {
  nid_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 tm_perf_commit_count::nid() const {
  return nid_;
}
inline void tm_perf_commit_count::set_nid(::google::protobuf::int64 value) {
  _set_bit(2);
  nid_ = value;
}

// required int64 pid = 4;
inline bool tm_perf_commit_count::has_pid() const {
  return _has_bit(3);
}
inline void tm_perf_commit_count::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 tm_perf_commit_count::pid() const {
  return pid_;
}
inline void tm_perf_commit_count::set_pid(::google::protobuf::int64 value) {
  _set_bit(3);
  pid_ = value;
}

// required bytes oldest_transid = 5;
inline bool tm_perf_commit_count::has_oldest_transid() const {
  return _has_bit(4);
}
inline void tm_perf_commit_count::clear_oldest_transid() {
  if (oldest_transid_ != &_default_oldest_transid_) {
    oldest_transid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& tm_perf_commit_count::oldest_transid() const {
  return *oldest_transid_;
}
inline void tm_perf_commit_count::set_oldest_transid(const ::std::string& value) {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_commit_count::set_oldest_transid(const char* value) {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_commit_count::set_oldest_transid(const void* value, size_t size) {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_perf_commit_count::mutable_oldest_transid() {
  _set_bit(4);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  return oldest_transid_;
}

// required int64 oldest_transid_timestamp = 6;
inline bool tm_perf_commit_count::has_oldest_transid_timestamp() const {
  return _has_bit(5);
}
inline void tm_perf_commit_count::clear_oldest_transid_timestamp() {
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 tm_perf_commit_count::oldest_transid_timestamp() const {
  return oldest_transid_timestamp_;
}
inline void tm_perf_commit_count::set_oldest_transid_timestamp(::google::protobuf::int64 value) {
  _set_bit(5);
  oldest_transid_timestamp_ = value;
}

// -------------------------------------------------------------------

// tm_perf_resources_by_node

// required .common.qpid_header header = 1;
inline bool tm_perf_resources_by_node::has_header() const {
  return _has_bit(0);
}
inline void tm_perf_resources_by_node::clear_header() {
  if (header_ != NULL) header_->::common::qpid_header::Clear();
  _clear_bit(0);
}
inline const ::common::qpid_header& tm_perf_resources_by_node::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::common::qpid_header* tm_perf_resources_by_node::mutable_header() {
  _set_bit(0);
  if (header_ == NULL) header_ = new ::common::qpid_header;
  return header_;
}

// required int64 node = 2;
inline bool tm_perf_resources_by_node::has_node() const {
  return _has_bit(1);
}
inline void tm_perf_resources_by_node::clear_node() {
  node_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 tm_perf_resources_by_node::node() const {
  return node_;
}
inline void tm_perf_resources_by_node::set_node(::google::protobuf::int64 value) {
  _set_bit(1);
  node_ = value;
}

// required int32 tx_poolThresholdEventCounter = 3;
inline bool tm_perf_resources_by_node::has_tx_poolthresholdeventcounter() const {
  return _has_bit(2);
}
inline void tm_perf_resources_by_node::clear_tx_poolthresholdeventcounter() {
  tx_poolthresholdeventcounter_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_poolthresholdeventcounter() const {
  return tx_poolthresholdeventcounter_;
}
inline void tm_perf_resources_by_node::set_tx_poolthresholdeventcounter(::google::protobuf::int32 value) {
  _set_bit(2);
  tx_poolthresholdeventcounter_ = value;
}

// required int32 tx_poolSizeNow = 4;
inline bool tm_perf_resources_by_node::has_tx_poolsizenow() const {
  return _has_bit(3);
}
inline void tm_perf_resources_by_node::clear_tx_poolsizenow() {
  tx_poolsizenow_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_poolsizenow() const {
  return tx_poolsizenow_;
}
inline void tm_perf_resources_by_node::set_tx_poolsizenow(::google::protobuf::int32 value) {
  _set_bit(3);
  tx_poolsizenow_ = value;
}

// required int32 tx_inUseListNow = 5;
inline bool tm_perf_resources_by_node::has_tx_inuselistnow() const {
  return _has_bit(4);
}
inline void tm_perf_resources_by_node::clear_tx_inuselistnow() {
  tx_inuselistnow_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_inuselistnow() const {
  return tx_inuselistnow_;
}
inline void tm_perf_resources_by_node::set_tx_inuselistnow(::google::protobuf::int32 value) {
  _set_bit(4);
  tx_inuselistnow_ = value;
}

// required int32 tx_freeListNow = 6;
inline bool tm_perf_resources_by_node::has_tx_freelistnow() const {
  return _has_bit(5);
}
inline void tm_perf_resources_by_node::clear_tx_freelistnow() {
  tx_freelistnow_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_freelistnow() const {
  return tx_freelistnow_;
}
inline void tm_perf_resources_by_node::set_tx_freelistnow(::google::protobuf::int32 value) {
  _set_bit(5);
  tx_freelistnow_ = value;
}

// required int32 tx_steadyStateLow = 7;
inline bool tm_perf_resources_by_node::has_tx_steadystatelow() const {
  return _has_bit(6);
}
inline void tm_perf_resources_by_node::clear_tx_steadystatelow() {
  tx_steadystatelow_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_steadystatelow() const {
  return tx_steadystatelow_;
}
inline void tm_perf_resources_by_node::set_tx_steadystatelow(::google::protobuf::int32 value) {
  _set_bit(6);
  tx_steadystatelow_ = value;
}

// required int32 tx_steadyStateHigh = 8;
inline bool tm_perf_resources_by_node::has_tx_steadystatehigh() const {
  return _has_bit(7);
}
inline void tm_perf_resources_by_node::clear_tx_steadystatehigh() {
  tx_steadystatehigh_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_steadystatehigh() const {
  return tx_steadystatehigh_;
}
inline void tm_perf_resources_by_node::set_tx_steadystatehigh(::google::protobuf::int32 value) {
  _set_bit(7);
  tx_steadystatehigh_ = value;
}

// required int32 tx_max = 9;
inline bool tm_perf_resources_by_node::has_tx_max() const {
  return _has_bit(8);
}
inline void tm_perf_resources_by_node::clear_tx_max() {
  tx_max_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_max() const {
  return tx_max_;
}
inline void tm_perf_resources_by_node::set_tx_max(::google::protobuf::int32 value) {
  _set_bit(8);
  tx_max_ = value;
}

// required int32 tx_totalAllocs_new = 10;
inline bool tm_perf_resources_by_node::has_tx_totalallocs_new() const {
  return _has_bit(9);
}
inline void tm_perf_resources_by_node::clear_tx_totalallocs_new() {
  tx_totalallocs_new_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_totalallocs_new() const {
  return tx_totalallocs_new_;
}
inline void tm_perf_resources_by_node::set_tx_totalallocs_new(::google::protobuf::int32 value) {
  _set_bit(9);
  tx_totalallocs_new_ = value;
}

// required int32 tx_totalAllocs_free = 11;
inline bool tm_perf_resources_by_node::has_tx_totalallocs_free() const {
  return _has_bit(10);
}
inline void tm_perf_resources_by_node::clear_tx_totalallocs_free() {
  tx_totalallocs_free_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_totalallocs_free() const {
  return tx_totalallocs_free_;
}
inline void tm_perf_resources_by_node::set_tx_totalallocs_free(::google::protobuf::int32 value) {
  _set_bit(10);
  tx_totalallocs_free_ = value;
}

// required int32 tx_totalDeallocs_free = 12;
inline bool tm_perf_resources_by_node::has_tx_totaldeallocs_free() const {
  return _has_bit(11);
}
inline void tm_perf_resources_by_node::clear_tx_totaldeallocs_free() {
  tx_totaldeallocs_free_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_totaldeallocs_free() const {
  return tx_totaldeallocs_free_;
}
inline void tm_perf_resources_by_node::set_tx_totaldeallocs_free(::google::protobuf::int32 value) {
  _set_bit(11);
  tx_totaldeallocs_free_ = value;
}

// required int32 tx_totalDeallocs_delete = 13;
inline bool tm_perf_resources_by_node::has_tx_totaldeallocs_delete() const {
  return _has_bit(12);
}
inline void tm_perf_resources_by_node::clear_tx_totaldeallocs_delete() {
  tx_totaldeallocs_delete_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::tx_totaldeallocs_delete() const {
  return tx_totaldeallocs_delete_;
}
inline void tm_perf_resources_by_node::set_tx_totaldeallocs_delete(::google::protobuf::int32 value) {
  _set_bit(12);
  tx_totaldeallocs_delete_ = value;
}

// required int64 tx_total_tx_count = 14;
inline bool tm_perf_resources_by_node::has_tx_total_tx_count() const {
  return _has_bit(13);
}
inline void tm_perf_resources_by_node::clear_tx_total_tx_count() {
  tx_total_tx_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(13);
}
inline ::google::protobuf::int64 tm_perf_resources_by_node::tx_total_tx_count() const {
  return tx_total_tx_count_;
}
inline void tm_perf_resources_by_node::set_tx_total_tx_count(::google::protobuf::int64 value) {
  _set_bit(13);
  tx_total_tx_count_ = value;
}

// required int64 tx_total_abort_count = 15;
inline bool tm_perf_resources_by_node::has_tx_total_abort_count() const {
  return _has_bit(14);
}
inline void tm_perf_resources_by_node::clear_tx_total_abort_count() {
  tx_total_abort_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(14);
}
inline ::google::protobuf::int64 tm_perf_resources_by_node::tx_total_abort_count() const {
  return tx_total_abort_count_;
}
inline void tm_perf_resources_by_node::set_tx_total_abort_count(::google::protobuf::int64 value) {
  _set_bit(14);
  tx_total_abort_count_ = value;
}

// required int64 tx_total_commit_count = 16;
inline bool tm_perf_resources_by_node::has_tx_total_commit_count() const {
  return _has_bit(15);
}
inline void tm_perf_resources_by_node::clear_tx_total_commit_count() {
  tx_total_commit_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(15);
}
inline ::google::protobuf::int64 tm_perf_resources_by_node::tx_total_commit_count() const {
  return tx_total_commit_count_;
}
inline void tm_perf_resources_by_node::set_tx_total_commit_count(::google::protobuf::int64 value) {
  _set_bit(15);
  tx_total_commit_count_ = value;
}

// required int32 thread_poolThresholdEventCounter = 17;
inline bool tm_perf_resources_by_node::has_thread_poolthresholdeventcounter() const {
  return _has_bit(16);
}
inline void tm_perf_resources_by_node::clear_thread_poolthresholdeventcounter() {
  thread_poolthresholdeventcounter_ = 0;
  _clear_bit(16);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_poolthresholdeventcounter() const {
  return thread_poolthresholdeventcounter_;
}
inline void tm_perf_resources_by_node::set_thread_poolthresholdeventcounter(::google::protobuf::int32 value) {
  _set_bit(16);
  thread_poolthresholdeventcounter_ = value;
}

// required int32 thread_poolSizeNow = 18;
inline bool tm_perf_resources_by_node::has_thread_poolsizenow() const {
  return _has_bit(17);
}
inline void tm_perf_resources_by_node::clear_thread_poolsizenow() {
  thread_poolsizenow_ = 0;
  _clear_bit(17);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_poolsizenow() const {
  return thread_poolsizenow_;
}
inline void tm_perf_resources_by_node::set_thread_poolsizenow(::google::protobuf::int32 value) {
  _set_bit(17);
  thread_poolsizenow_ = value;
}

// required int32 thread_inUseListNow = 19;
inline bool tm_perf_resources_by_node::has_thread_inuselistnow() const {
  return _has_bit(18);
}
inline void tm_perf_resources_by_node::clear_thread_inuselistnow() {
  thread_inuselistnow_ = 0;
  _clear_bit(18);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_inuselistnow() const {
  return thread_inuselistnow_;
}
inline void tm_perf_resources_by_node::set_thread_inuselistnow(::google::protobuf::int32 value) {
  _set_bit(18);
  thread_inuselistnow_ = value;
}

// required int32 thread_freeListNow = 20;
inline bool tm_perf_resources_by_node::has_thread_freelistnow() const {
  return _has_bit(19);
}
inline void tm_perf_resources_by_node::clear_thread_freelistnow() {
  thread_freelistnow_ = 0;
  _clear_bit(19);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_freelistnow() const {
  return thread_freelistnow_;
}
inline void tm_perf_resources_by_node::set_thread_freelistnow(::google::protobuf::int32 value) {
  _set_bit(19);
  thread_freelistnow_ = value;
}

// required int32 thread_steadyStateLow = 21;
inline bool tm_perf_resources_by_node::has_thread_steadystatelow() const {
  return _has_bit(20);
}
inline void tm_perf_resources_by_node::clear_thread_steadystatelow() {
  thread_steadystatelow_ = 0;
  _clear_bit(20);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_steadystatelow() const {
  return thread_steadystatelow_;
}
inline void tm_perf_resources_by_node::set_thread_steadystatelow(::google::protobuf::int32 value) {
  _set_bit(20);
  thread_steadystatelow_ = value;
}

// required int32 thread_steadyStateHigh = 22;
inline bool tm_perf_resources_by_node::has_thread_steadystatehigh() const {
  return _has_bit(21);
}
inline void tm_perf_resources_by_node::clear_thread_steadystatehigh() {
  thread_steadystatehigh_ = 0;
  _clear_bit(21);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_steadystatehigh() const {
  return thread_steadystatehigh_;
}
inline void tm_perf_resources_by_node::set_thread_steadystatehigh(::google::protobuf::int32 value) {
  _set_bit(21);
  thread_steadystatehigh_ = value;
}

// required int32 thread_max = 23;
inline bool tm_perf_resources_by_node::has_thread_max() const {
  return _has_bit(22);
}
inline void tm_perf_resources_by_node::clear_thread_max() {
  thread_max_ = 0;
  _clear_bit(22);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_max() const {
  return thread_max_;
}
inline void tm_perf_resources_by_node::set_thread_max(::google::protobuf::int32 value) {
  _set_bit(22);
  thread_max_ = value;
}

// required int32 thread_totalAllocs_new = 24;
inline bool tm_perf_resources_by_node::has_thread_totalallocs_new() const {
  return _has_bit(23);
}
inline void tm_perf_resources_by_node::clear_thread_totalallocs_new() {
  thread_totalallocs_new_ = 0;
  _clear_bit(23);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_totalallocs_new() const {
  return thread_totalallocs_new_;
}
inline void tm_perf_resources_by_node::set_thread_totalallocs_new(::google::protobuf::int32 value) {
  _set_bit(23);
  thread_totalallocs_new_ = value;
}

// required int32 thread_totalAllocs_free = 25;
inline bool tm_perf_resources_by_node::has_thread_totalallocs_free() const {
  return _has_bit(24);
}
inline void tm_perf_resources_by_node::clear_thread_totalallocs_free() {
  thread_totalallocs_free_ = 0;
  _clear_bit(24);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_totalallocs_free() const {
  return thread_totalallocs_free_;
}
inline void tm_perf_resources_by_node::set_thread_totalallocs_free(::google::protobuf::int32 value) {
  _set_bit(24);
  thread_totalallocs_free_ = value;
}

// required int32 thread_totalDeallocs_free = 26;
inline bool tm_perf_resources_by_node::has_thread_totaldeallocs_free() const {
  return _has_bit(25);
}
inline void tm_perf_resources_by_node::clear_thread_totaldeallocs_free() {
  thread_totaldeallocs_free_ = 0;
  _clear_bit(25);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_totaldeallocs_free() const {
  return thread_totaldeallocs_free_;
}
inline void tm_perf_resources_by_node::set_thread_totaldeallocs_free(::google::protobuf::int32 value) {
  _set_bit(25);
  thread_totaldeallocs_free_ = value;
}

// required int32 thread_totalDeallocs_delete = 27;
inline bool tm_perf_resources_by_node::has_thread_totaldeallocs_delete() const {
  return _has_bit(26);
}
inline void tm_perf_resources_by_node::clear_thread_totaldeallocs_delete() {
  thread_totaldeallocs_delete_ = 0;
  _clear_bit(26);
}
inline ::google::protobuf::int32 tm_perf_resources_by_node::thread_totaldeallocs_delete() const {
  return thread_totaldeallocs_delete_;
}
inline void tm_perf_resources_by_node::set_thread_totaldeallocs_delete(::google::protobuf::int32 value) {
  _set_bit(26);
  thread_totaldeallocs_delete_ = value;
}

// required int64 total_tx_count = 28;
inline bool tm_perf_resources_by_node::has_total_tx_count() const {
  return _has_bit(27);
}
inline void tm_perf_resources_by_node::clear_total_tx_count() {
  total_tx_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(27);
}
inline ::google::protobuf::int64 tm_perf_resources_by_node::total_tx_count() const {
  return total_tx_count_;
}
inline void tm_perf_resources_by_node::set_total_tx_count(::google::protobuf::int64 value) {
  _set_bit(27);
  total_tx_count_ = value;
}

// required int64 total_abort_count = 29;
inline bool tm_perf_resources_by_node::has_total_abort_count() const {
  return _has_bit(28);
}
inline void tm_perf_resources_by_node::clear_total_abort_count() {
  total_abort_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(28);
}
inline ::google::protobuf::int64 tm_perf_resources_by_node::total_abort_count() const {
  return total_abort_count_;
}
inline void tm_perf_resources_by_node::set_total_abort_count(::google::protobuf::int64 value) {
  _set_bit(28);
  total_abort_count_ = value;
}

// required int64 total_commit_count = 30;
inline bool tm_perf_resources_by_node::has_total_commit_count() const {
  return _has_bit(29);
}
inline void tm_perf_resources_by_node::clear_total_commit_count() {
  total_commit_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(29);
}
inline ::google::protobuf::int64 tm_perf_resources_by_node::total_commit_count() const {
  return total_commit_count_;
}
inline void tm_perf_resources_by_node::set_total_commit_count(::google::protobuf::int64 value) {
  _set_bit(29);
  total_commit_count_ = value;
}

// required int64 current_tx_count = 31;
inline bool tm_perf_resources_by_node::has_current_tx_count() const {
  return _has_bit(30);
}
inline void tm_perf_resources_by_node::clear_current_tx_count() {
  current_tx_count_ = GOOGLE_LONGLONG(0);
  _clear_bit(30);
}
inline ::google::protobuf::int64 tm_perf_resources_by_node::current_tx_count() const {
  return current_tx_count_;
}
inline void tm_perf_resources_by_node::set_current_tx_count(::google::protobuf::int64 value) {
  _set_bit(30);
  current_tx_count_ = value;
}

// required bytes oldest_transid = 32;
inline bool tm_perf_resources_by_node::has_oldest_transid() const {
  return _has_bit(31);
}
inline void tm_perf_resources_by_node::clear_oldest_transid() {
  if (oldest_transid_ != &_default_oldest_transid_) {
    oldest_transid_->clear();
  }
  _clear_bit(31);
}
inline const ::std::string& tm_perf_resources_by_node::oldest_transid() const {
  return *oldest_transid_;
}
inline void tm_perf_resources_by_node::set_oldest_transid(const ::std::string& value) {
  _set_bit(31);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_resources_by_node::set_oldest_transid(const char* value) {
  _set_bit(31);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(value);
}
inline void tm_perf_resources_by_node::set_oldest_transid(const void* value, size_t size) {
  _set_bit(31);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  oldest_transid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_perf_resources_by_node::mutable_oldest_transid() {
  _set_bit(31);
  if (oldest_transid_ == &_default_oldest_transid_) {
    oldest_transid_ = new ::std::string;
  }
  return oldest_transid_;
}

// required int64 oldest_transid_timestamp = 33;
inline bool tm_perf_resources_by_node::has_oldest_transid_timestamp() const {
  return _has_bit(32);
}
inline void tm_perf_resources_by_node::clear_oldest_transid_timestamp() {
  oldest_transid_timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(32);
}
inline ::google::protobuf::int64 tm_perf_resources_by_node::oldest_transid_timestamp() const {
  return oldest_transid_timestamp_;
}
inline void tm_perf_resources_by_node::set_oldest_transid_timestamp(::google::protobuf::int64 value) {
  _set_bit(32);
  oldest_transid_timestamp_ = value;
}


}  // namespace dtm
#endif  // PROTOBUF_dtm_2eperf_5fstats_2eproto__INCLUDED
